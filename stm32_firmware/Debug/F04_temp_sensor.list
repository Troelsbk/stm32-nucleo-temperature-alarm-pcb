
F04_temp_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000716c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad8  08007ad8  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007ad8  08007ad8  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007ad8  08007ad8  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad8  08007ad8  00008ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007adc  08007adc  00008adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007ae0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000060  08007b40  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  08007b40  00009790  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001288e  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e6  00000000  00000000  0001b916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0001e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8c  00000000  00000000  0001f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6d3  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001667b  00000000  00000000  0003a897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096bbe  00000000  00000000  00050f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000e7b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ec028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007214 	.word	0x08007214

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08007214 	.word	0x08007214

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 f9d1 	bl	80007b8 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 f959 	bl	80006d8 <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9c3 	bl	80007b8 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f9b9 	bl	80007b8 <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f967 	bl	8000728 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 f95d 	bl	8000728 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_f2uiz>:
 800047c:	219e      	movs	r1, #158	@ 0x9e
 800047e:	b510      	push	{r4, lr}
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	1c04      	adds	r4, r0, #0
 8000484:	f7ff fff0 	bl	8000468 <__aeabi_fcmpge>
 8000488:	2800      	cmp	r0, #0
 800048a:	d103      	bne.n	8000494 <__aeabi_f2uiz+0x18>
 800048c:	1c20      	adds	r0, r4, #0
 800048e:	f000 fd99 	bl	8000fc4 <__aeabi_f2iz>
 8000492:	bd10      	pop	{r4, pc}
 8000494:	219e      	movs	r1, #158	@ 0x9e
 8000496:	1c20      	adds	r0, r4, #0
 8000498:	05c9      	lsls	r1, r1, #23
 800049a:	f000 fb2f 	bl	8000afc <__aeabi_fsub>
 800049e:	f000 fd91 	bl	8000fc4 <__aeabi_f2iz>
 80004a2:	2380      	movs	r3, #128	@ 0x80
 80004a4:	061b      	lsls	r3, r3, #24
 80004a6:	469c      	mov	ip, r3
 80004a8:	4460      	add	r0, ip
 80004aa:	e7f2      	b.n	8000492 <__aeabi_f2uiz+0x16>

080004ac <__aeabi_fdiv>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	4646      	mov	r6, r8
 80004b0:	464f      	mov	r7, r9
 80004b2:	46d6      	mov	lr, sl
 80004b4:	0245      	lsls	r5, r0, #9
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	0fc3      	lsrs	r3, r0, #31
 80004ba:	0047      	lsls	r7, r0, #1
 80004bc:	4698      	mov	r8, r3
 80004be:	1c0e      	adds	r6, r1, #0
 80004c0:	0a6d      	lsrs	r5, r5, #9
 80004c2:	0e3f      	lsrs	r7, r7, #24
 80004c4:	d05b      	beq.n	800057e <__aeabi_fdiv+0xd2>
 80004c6:	2fff      	cmp	r7, #255	@ 0xff
 80004c8:	d021      	beq.n	800050e <__aeabi_fdiv+0x62>
 80004ca:	2380      	movs	r3, #128	@ 0x80
 80004cc:	00ed      	lsls	r5, r5, #3
 80004ce:	04db      	lsls	r3, r3, #19
 80004d0:	431d      	orrs	r5, r3
 80004d2:	2300      	movs	r3, #0
 80004d4:	4699      	mov	r9, r3
 80004d6:	469a      	mov	sl, r3
 80004d8:	3f7f      	subs	r7, #127	@ 0x7f
 80004da:	0274      	lsls	r4, r6, #9
 80004dc:	0073      	lsls	r3, r6, #1
 80004de:	0a64      	lsrs	r4, r4, #9
 80004e0:	0e1b      	lsrs	r3, r3, #24
 80004e2:	0ff6      	lsrs	r6, r6, #31
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d020      	beq.n	800052a <__aeabi_fdiv+0x7e>
 80004e8:	2bff      	cmp	r3, #255	@ 0xff
 80004ea:	d043      	beq.n	8000574 <__aeabi_fdiv+0xc8>
 80004ec:	2280      	movs	r2, #128	@ 0x80
 80004ee:	2000      	movs	r0, #0
 80004f0:	00e4      	lsls	r4, r4, #3
 80004f2:	04d2      	lsls	r2, r2, #19
 80004f4:	4314      	orrs	r4, r2
 80004f6:	3b7f      	subs	r3, #127	@ 0x7f
 80004f8:	4642      	mov	r2, r8
 80004fa:	1aff      	subs	r7, r7, r3
 80004fc:	464b      	mov	r3, r9
 80004fe:	4072      	eors	r2, r6
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d900      	bls.n	8000506 <__aeabi_fdiv+0x5a>
 8000504:	e09d      	b.n	8000642 <__aeabi_fdiv+0x196>
 8000506:	4971      	ldr	r1, [pc, #452]	@ (80006cc <__aeabi_fdiv+0x220>)
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	58cb      	ldr	r3, [r1, r3]
 800050c:	469f      	mov	pc, r3
 800050e:	2d00      	cmp	r5, #0
 8000510:	d15a      	bne.n	80005c8 <__aeabi_fdiv+0x11c>
 8000512:	2308      	movs	r3, #8
 8000514:	4699      	mov	r9, r3
 8000516:	3b06      	subs	r3, #6
 8000518:	0274      	lsls	r4, r6, #9
 800051a:	469a      	mov	sl, r3
 800051c:	0073      	lsls	r3, r6, #1
 800051e:	27ff      	movs	r7, #255	@ 0xff
 8000520:	0a64      	lsrs	r4, r4, #9
 8000522:	0e1b      	lsrs	r3, r3, #24
 8000524:	0ff6      	lsrs	r6, r6, #31
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1de      	bne.n	80004e8 <__aeabi_fdiv+0x3c>
 800052a:	2c00      	cmp	r4, #0
 800052c:	d13b      	bne.n	80005a6 <__aeabi_fdiv+0xfa>
 800052e:	2301      	movs	r3, #1
 8000530:	4642      	mov	r2, r8
 8000532:	4649      	mov	r1, r9
 8000534:	4072      	eors	r2, r6
 8000536:	4319      	orrs	r1, r3
 8000538:	290e      	cmp	r1, #14
 800053a:	d818      	bhi.n	800056e <__aeabi_fdiv+0xc2>
 800053c:	4864      	ldr	r0, [pc, #400]	@ (80006d0 <__aeabi_fdiv+0x224>)
 800053e:	0089      	lsls	r1, r1, #2
 8000540:	5841      	ldr	r1, [r0, r1]
 8000542:	468f      	mov	pc, r1
 8000544:	4653      	mov	r3, sl
 8000546:	2b02      	cmp	r3, #2
 8000548:	d100      	bne.n	800054c <__aeabi_fdiv+0xa0>
 800054a:	e0b8      	b.n	80006be <__aeabi_fdiv+0x212>
 800054c:	2b03      	cmp	r3, #3
 800054e:	d06e      	beq.n	800062e <__aeabi_fdiv+0x182>
 8000550:	4642      	mov	r2, r8
 8000552:	002c      	movs	r4, r5
 8000554:	2b01      	cmp	r3, #1
 8000556:	d140      	bne.n	80005da <__aeabi_fdiv+0x12e>
 8000558:	2000      	movs	r0, #0
 800055a:	2400      	movs	r4, #0
 800055c:	05c0      	lsls	r0, r0, #23
 800055e:	4320      	orrs	r0, r4
 8000560:	07d2      	lsls	r2, r2, #31
 8000562:	4310      	orrs	r0, r2
 8000564:	bce0      	pop	{r5, r6, r7}
 8000566:	46ba      	mov	sl, r7
 8000568:	46b1      	mov	r9, r6
 800056a:	46a8      	mov	r8, r5
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	20ff      	movs	r0, #255	@ 0xff
 8000570:	2400      	movs	r4, #0
 8000572:	e7f3      	b.n	800055c <__aeabi_fdiv+0xb0>
 8000574:	2c00      	cmp	r4, #0
 8000576:	d120      	bne.n	80005ba <__aeabi_fdiv+0x10e>
 8000578:	2302      	movs	r3, #2
 800057a:	3fff      	subs	r7, #255	@ 0xff
 800057c:	e7d8      	b.n	8000530 <__aeabi_fdiv+0x84>
 800057e:	2d00      	cmp	r5, #0
 8000580:	d105      	bne.n	800058e <__aeabi_fdiv+0xe2>
 8000582:	2304      	movs	r3, #4
 8000584:	4699      	mov	r9, r3
 8000586:	3b03      	subs	r3, #3
 8000588:	2700      	movs	r7, #0
 800058a:	469a      	mov	sl, r3
 800058c:	e7a5      	b.n	80004da <__aeabi_fdiv+0x2e>
 800058e:	0028      	movs	r0, r5
 8000590:	f000 fdce 	bl	8001130 <__clzsi2>
 8000594:	2776      	movs	r7, #118	@ 0x76
 8000596:	1f43      	subs	r3, r0, #5
 8000598:	409d      	lsls	r5, r3
 800059a:	2300      	movs	r3, #0
 800059c:	427f      	negs	r7, r7
 800059e:	4699      	mov	r9, r3
 80005a0:	469a      	mov	sl, r3
 80005a2:	1a3f      	subs	r7, r7, r0
 80005a4:	e799      	b.n	80004da <__aeabi_fdiv+0x2e>
 80005a6:	0020      	movs	r0, r4
 80005a8:	f000 fdc2 	bl	8001130 <__clzsi2>
 80005ac:	1f43      	subs	r3, r0, #5
 80005ae:	409c      	lsls	r4, r3
 80005b0:	2376      	movs	r3, #118	@ 0x76
 80005b2:	425b      	negs	r3, r3
 80005b4:	1a1b      	subs	r3, r3, r0
 80005b6:	2000      	movs	r0, #0
 80005b8:	e79e      	b.n	80004f8 <__aeabi_fdiv+0x4c>
 80005ba:	2303      	movs	r3, #3
 80005bc:	464a      	mov	r2, r9
 80005be:	431a      	orrs	r2, r3
 80005c0:	4691      	mov	r9, r2
 80005c2:	2003      	movs	r0, #3
 80005c4:	33fc      	adds	r3, #252	@ 0xfc
 80005c6:	e797      	b.n	80004f8 <__aeabi_fdiv+0x4c>
 80005c8:	230c      	movs	r3, #12
 80005ca:	4699      	mov	r9, r3
 80005cc:	3b09      	subs	r3, #9
 80005ce:	27ff      	movs	r7, #255	@ 0xff
 80005d0:	469a      	mov	sl, r3
 80005d2:	e782      	b.n	80004da <__aeabi_fdiv+0x2e>
 80005d4:	2803      	cmp	r0, #3
 80005d6:	d02c      	beq.n	8000632 <__aeabi_fdiv+0x186>
 80005d8:	0032      	movs	r2, r6
 80005da:	0038      	movs	r0, r7
 80005dc:	307f      	adds	r0, #127	@ 0x7f
 80005de:	2800      	cmp	r0, #0
 80005e0:	dd47      	ble.n	8000672 <__aeabi_fdiv+0x1c6>
 80005e2:	0763      	lsls	r3, r4, #29
 80005e4:	d004      	beq.n	80005f0 <__aeabi_fdiv+0x144>
 80005e6:	230f      	movs	r3, #15
 80005e8:	4023      	ands	r3, r4
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d000      	beq.n	80005f0 <__aeabi_fdiv+0x144>
 80005ee:	3404      	adds	r4, #4
 80005f0:	0123      	lsls	r3, r4, #4
 80005f2:	d503      	bpl.n	80005fc <__aeabi_fdiv+0x150>
 80005f4:	0038      	movs	r0, r7
 80005f6:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <__aeabi_fdiv+0x228>)
 80005f8:	3080      	adds	r0, #128	@ 0x80
 80005fa:	401c      	ands	r4, r3
 80005fc:	28fe      	cmp	r0, #254	@ 0xfe
 80005fe:	dcb6      	bgt.n	800056e <__aeabi_fdiv+0xc2>
 8000600:	01a4      	lsls	r4, r4, #6
 8000602:	0a64      	lsrs	r4, r4, #9
 8000604:	b2c0      	uxtb	r0, r0
 8000606:	e7a9      	b.n	800055c <__aeabi_fdiv+0xb0>
 8000608:	2480      	movs	r4, #128	@ 0x80
 800060a:	2200      	movs	r2, #0
 800060c:	20ff      	movs	r0, #255	@ 0xff
 800060e:	03e4      	lsls	r4, r4, #15
 8000610:	e7a4      	b.n	800055c <__aeabi_fdiv+0xb0>
 8000612:	2380      	movs	r3, #128	@ 0x80
 8000614:	03db      	lsls	r3, r3, #15
 8000616:	421d      	tst	r5, r3
 8000618:	d001      	beq.n	800061e <__aeabi_fdiv+0x172>
 800061a:	421c      	tst	r4, r3
 800061c:	d00b      	beq.n	8000636 <__aeabi_fdiv+0x18a>
 800061e:	2480      	movs	r4, #128	@ 0x80
 8000620:	03e4      	lsls	r4, r4, #15
 8000622:	432c      	orrs	r4, r5
 8000624:	0264      	lsls	r4, r4, #9
 8000626:	4642      	mov	r2, r8
 8000628:	20ff      	movs	r0, #255	@ 0xff
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	e796      	b.n	800055c <__aeabi_fdiv+0xb0>
 800062e:	4646      	mov	r6, r8
 8000630:	002c      	movs	r4, r5
 8000632:	2380      	movs	r3, #128	@ 0x80
 8000634:	03db      	lsls	r3, r3, #15
 8000636:	431c      	orrs	r4, r3
 8000638:	0264      	lsls	r4, r4, #9
 800063a:	0032      	movs	r2, r6
 800063c:	20ff      	movs	r0, #255	@ 0xff
 800063e:	0a64      	lsrs	r4, r4, #9
 8000640:	e78c      	b.n	800055c <__aeabi_fdiv+0xb0>
 8000642:	016d      	lsls	r5, r5, #5
 8000644:	0160      	lsls	r0, r4, #5
 8000646:	4285      	cmp	r5, r0
 8000648:	d22d      	bcs.n	80006a6 <__aeabi_fdiv+0x1fa>
 800064a:	231b      	movs	r3, #27
 800064c:	2400      	movs	r4, #0
 800064e:	3f01      	subs	r7, #1
 8000650:	2601      	movs	r6, #1
 8000652:	0029      	movs	r1, r5
 8000654:	0064      	lsls	r4, r4, #1
 8000656:	006d      	lsls	r5, r5, #1
 8000658:	2900      	cmp	r1, #0
 800065a:	db01      	blt.n	8000660 <__aeabi_fdiv+0x1b4>
 800065c:	4285      	cmp	r5, r0
 800065e:	d301      	bcc.n	8000664 <__aeabi_fdiv+0x1b8>
 8000660:	1a2d      	subs	r5, r5, r0
 8000662:	4334      	orrs	r4, r6
 8000664:	3b01      	subs	r3, #1
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f3      	bne.n	8000652 <__aeabi_fdiv+0x1a6>
 800066a:	1e6b      	subs	r3, r5, #1
 800066c:	419d      	sbcs	r5, r3
 800066e:	432c      	orrs	r4, r5
 8000670:	e7b3      	b.n	80005da <__aeabi_fdiv+0x12e>
 8000672:	2301      	movs	r3, #1
 8000674:	1a1b      	subs	r3, r3, r0
 8000676:	2b1b      	cmp	r3, #27
 8000678:	dd00      	ble.n	800067c <__aeabi_fdiv+0x1d0>
 800067a:	e76d      	b.n	8000558 <__aeabi_fdiv+0xac>
 800067c:	0021      	movs	r1, r4
 800067e:	379e      	adds	r7, #158	@ 0x9e
 8000680:	40d9      	lsrs	r1, r3
 8000682:	40bc      	lsls	r4, r7
 8000684:	000b      	movs	r3, r1
 8000686:	1e61      	subs	r1, r4, #1
 8000688:	418c      	sbcs	r4, r1
 800068a:	4323      	orrs	r3, r4
 800068c:	0759      	lsls	r1, r3, #29
 800068e:	d004      	beq.n	800069a <__aeabi_fdiv+0x1ee>
 8000690:	210f      	movs	r1, #15
 8000692:	4019      	ands	r1, r3
 8000694:	2904      	cmp	r1, #4
 8000696:	d000      	beq.n	800069a <__aeabi_fdiv+0x1ee>
 8000698:	3304      	adds	r3, #4
 800069a:	0159      	lsls	r1, r3, #5
 800069c:	d413      	bmi.n	80006c6 <__aeabi_fdiv+0x21a>
 800069e:	019b      	lsls	r3, r3, #6
 80006a0:	2000      	movs	r0, #0
 80006a2:	0a5c      	lsrs	r4, r3, #9
 80006a4:	e75a      	b.n	800055c <__aeabi_fdiv+0xb0>
 80006a6:	231a      	movs	r3, #26
 80006a8:	2401      	movs	r4, #1
 80006aa:	1a2d      	subs	r5, r5, r0
 80006ac:	e7d0      	b.n	8000650 <__aeabi_fdiv+0x1a4>
 80006ae:	1e98      	subs	r0, r3, #2
 80006b0:	4243      	negs	r3, r0
 80006b2:	4158      	adcs	r0, r3
 80006b4:	4240      	negs	r0, r0
 80006b6:	0032      	movs	r2, r6
 80006b8:	2400      	movs	r4, #0
 80006ba:	b2c0      	uxtb	r0, r0
 80006bc:	e74e      	b.n	800055c <__aeabi_fdiv+0xb0>
 80006be:	4642      	mov	r2, r8
 80006c0:	20ff      	movs	r0, #255	@ 0xff
 80006c2:	2400      	movs	r4, #0
 80006c4:	e74a      	b.n	800055c <__aeabi_fdiv+0xb0>
 80006c6:	2001      	movs	r0, #1
 80006c8:	2400      	movs	r4, #0
 80006ca:	e747      	b.n	800055c <__aeabi_fdiv+0xb0>
 80006cc:	08007278 	.word	0x08007278
 80006d0:	080072b8 	.word	0x080072b8
 80006d4:	f7ffffff 	.word	0xf7ffffff

080006d8 <__eqsf2>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	0042      	lsls	r2, r0, #1
 80006dc:	024e      	lsls	r6, r1, #9
 80006de:	004c      	lsls	r4, r1, #1
 80006e0:	0245      	lsls	r5, r0, #9
 80006e2:	0a6d      	lsrs	r5, r5, #9
 80006e4:	0e12      	lsrs	r2, r2, #24
 80006e6:	0fc3      	lsrs	r3, r0, #31
 80006e8:	0a76      	lsrs	r6, r6, #9
 80006ea:	0e24      	lsrs	r4, r4, #24
 80006ec:	0fc9      	lsrs	r1, r1, #31
 80006ee:	2aff      	cmp	r2, #255	@ 0xff
 80006f0:	d010      	beq.n	8000714 <__eqsf2+0x3c>
 80006f2:	2cff      	cmp	r4, #255	@ 0xff
 80006f4:	d00c      	beq.n	8000710 <__eqsf2+0x38>
 80006f6:	2001      	movs	r0, #1
 80006f8:	42a2      	cmp	r2, r4
 80006fa:	d10a      	bne.n	8000712 <__eqsf2+0x3a>
 80006fc:	42b5      	cmp	r5, r6
 80006fe:	d108      	bne.n	8000712 <__eqsf2+0x3a>
 8000700:	428b      	cmp	r3, r1
 8000702:	d00f      	beq.n	8000724 <__eqsf2+0x4c>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d104      	bne.n	8000712 <__eqsf2+0x3a>
 8000708:	0028      	movs	r0, r5
 800070a:	1e43      	subs	r3, r0, #1
 800070c:	4198      	sbcs	r0, r3
 800070e:	e000      	b.n	8000712 <__eqsf2+0x3a>
 8000710:	2001      	movs	r0, #1
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	2001      	movs	r0, #1
 8000716:	2cff      	cmp	r4, #255	@ 0xff
 8000718:	d1fb      	bne.n	8000712 <__eqsf2+0x3a>
 800071a:	4335      	orrs	r5, r6
 800071c:	d1f9      	bne.n	8000712 <__eqsf2+0x3a>
 800071e:	404b      	eors	r3, r1
 8000720:	0018      	movs	r0, r3
 8000722:	e7f6      	b.n	8000712 <__eqsf2+0x3a>
 8000724:	2000      	movs	r0, #0
 8000726:	e7f4      	b.n	8000712 <__eqsf2+0x3a>

08000728 <__gesf2>:
 8000728:	b530      	push	{r4, r5, lr}
 800072a:	0042      	lsls	r2, r0, #1
 800072c:	0244      	lsls	r4, r0, #9
 800072e:	024d      	lsls	r5, r1, #9
 8000730:	0fc3      	lsrs	r3, r0, #31
 8000732:	0048      	lsls	r0, r1, #1
 8000734:	0a64      	lsrs	r4, r4, #9
 8000736:	0e12      	lsrs	r2, r2, #24
 8000738:	0a6d      	lsrs	r5, r5, #9
 800073a:	0e00      	lsrs	r0, r0, #24
 800073c:	0fc9      	lsrs	r1, r1, #31
 800073e:	2aff      	cmp	r2, #255	@ 0xff
 8000740:	d018      	beq.n	8000774 <__gesf2+0x4c>
 8000742:	28ff      	cmp	r0, #255	@ 0xff
 8000744:	d00a      	beq.n	800075c <__gesf2+0x34>
 8000746:	2a00      	cmp	r2, #0
 8000748:	d11e      	bne.n	8000788 <__gesf2+0x60>
 800074a:	2800      	cmp	r0, #0
 800074c:	d10a      	bne.n	8000764 <__gesf2+0x3c>
 800074e:	2d00      	cmp	r5, #0
 8000750:	d029      	beq.n	80007a6 <__gesf2+0x7e>
 8000752:	2c00      	cmp	r4, #0
 8000754:	d12d      	bne.n	80007b2 <__gesf2+0x8a>
 8000756:	0048      	lsls	r0, r1, #1
 8000758:	3801      	subs	r0, #1
 800075a:	bd30      	pop	{r4, r5, pc}
 800075c:	2d00      	cmp	r5, #0
 800075e:	d125      	bne.n	80007ac <__gesf2+0x84>
 8000760:	2a00      	cmp	r2, #0
 8000762:	d101      	bne.n	8000768 <__gesf2+0x40>
 8000764:	2c00      	cmp	r4, #0
 8000766:	d0f6      	beq.n	8000756 <__gesf2+0x2e>
 8000768:	428b      	cmp	r3, r1
 800076a:	d019      	beq.n	80007a0 <__gesf2+0x78>
 800076c:	2001      	movs	r0, #1
 800076e:	425b      	negs	r3, r3
 8000770:	4318      	orrs	r0, r3
 8000772:	e7f2      	b.n	800075a <__gesf2+0x32>
 8000774:	2c00      	cmp	r4, #0
 8000776:	d119      	bne.n	80007ac <__gesf2+0x84>
 8000778:	28ff      	cmp	r0, #255	@ 0xff
 800077a:	d1f7      	bne.n	800076c <__gesf2+0x44>
 800077c:	2d00      	cmp	r5, #0
 800077e:	d115      	bne.n	80007ac <__gesf2+0x84>
 8000780:	2000      	movs	r0, #0
 8000782:	428b      	cmp	r3, r1
 8000784:	d1f2      	bne.n	800076c <__gesf2+0x44>
 8000786:	e7e8      	b.n	800075a <__gesf2+0x32>
 8000788:	2800      	cmp	r0, #0
 800078a:	d0ef      	beq.n	800076c <__gesf2+0x44>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1ed      	bne.n	800076c <__gesf2+0x44>
 8000790:	4282      	cmp	r2, r0
 8000792:	dceb      	bgt.n	800076c <__gesf2+0x44>
 8000794:	db04      	blt.n	80007a0 <__gesf2+0x78>
 8000796:	42ac      	cmp	r4, r5
 8000798:	d8e8      	bhi.n	800076c <__gesf2+0x44>
 800079a:	2000      	movs	r0, #0
 800079c:	42ac      	cmp	r4, r5
 800079e:	d2dc      	bcs.n	800075a <__gesf2+0x32>
 80007a0:	0058      	lsls	r0, r3, #1
 80007a2:	3801      	subs	r0, #1
 80007a4:	e7d9      	b.n	800075a <__gesf2+0x32>
 80007a6:	2c00      	cmp	r4, #0
 80007a8:	d0d7      	beq.n	800075a <__gesf2+0x32>
 80007aa:	e7df      	b.n	800076c <__gesf2+0x44>
 80007ac:	2002      	movs	r0, #2
 80007ae:	4240      	negs	r0, r0
 80007b0:	e7d3      	b.n	800075a <__gesf2+0x32>
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d1da      	bne.n	800076c <__gesf2+0x44>
 80007b6:	e7ee      	b.n	8000796 <__gesf2+0x6e>

080007b8 <__lesf2>:
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0048      	lsls	r0, r1, #1
 80007c4:	0a64      	lsrs	r4, r4, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e00      	lsrs	r0, r0, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2aff      	cmp	r2, #255	@ 0xff
 80007d0:	d017      	beq.n	8000802 <__lesf2+0x4a>
 80007d2:	28ff      	cmp	r0, #255	@ 0xff
 80007d4:	d00a      	beq.n	80007ec <__lesf2+0x34>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d11b      	bne.n	8000812 <__lesf2+0x5a>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d10a      	bne.n	80007f4 <__lesf2+0x3c>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d01d      	beq.n	800081e <__lesf2+0x66>
 80007e2:	2c00      	cmp	r4, #0
 80007e4:	d12d      	bne.n	8000842 <__lesf2+0x8a>
 80007e6:	0048      	lsls	r0, r1, #1
 80007e8:	3801      	subs	r0, #1
 80007ea:	e011      	b.n	8000810 <__lesf2+0x58>
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d10e      	bne.n	800080e <__lesf2+0x56>
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	d101      	bne.n	80007f8 <__lesf2+0x40>
 80007f4:	2c00      	cmp	r4, #0
 80007f6:	d0f6      	beq.n	80007e6 <__lesf2+0x2e>
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d10c      	bne.n	8000816 <__lesf2+0x5e>
 80007fc:	0058      	lsls	r0, r3, #1
 80007fe:	3801      	subs	r0, #1
 8000800:	e006      	b.n	8000810 <__lesf2+0x58>
 8000802:	2c00      	cmp	r4, #0
 8000804:	d103      	bne.n	800080e <__lesf2+0x56>
 8000806:	28ff      	cmp	r0, #255	@ 0xff
 8000808:	d105      	bne.n	8000816 <__lesf2+0x5e>
 800080a:	2d00      	cmp	r5, #0
 800080c:	d015      	beq.n	800083a <__lesf2+0x82>
 800080e:	2002      	movs	r0, #2
 8000810:	bd30      	pop	{r4, r5, pc}
 8000812:	2800      	cmp	r0, #0
 8000814:	d106      	bne.n	8000824 <__lesf2+0x6c>
 8000816:	2001      	movs	r0, #1
 8000818:	425b      	negs	r3, r3
 800081a:	4318      	orrs	r0, r3
 800081c:	e7f8      	b.n	8000810 <__lesf2+0x58>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d0f6      	beq.n	8000810 <__lesf2+0x58>
 8000822:	e7f8      	b.n	8000816 <__lesf2+0x5e>
 8000824:	428b      	cmp	r3, r1
 8000826:	d1f6      	bne.n	8000816 <__lesf2+0x5e>
 8000828:	4282      	cmp	r2, r0
 800082a:	dcf4      	bgt.n	8000816 <__lesf2+0x5e>
 800082c:	dbe6      	blt.n	80007fc <__lesf2+0x44>
 800082e:	42ac      	cmp	r4, r5
 8000830:	d8f1      	bhi.n	8000816 <__lesf2+0x5e>
 8000832:	2000      	movs	r0, #0
 8000834:	42ac      	cmp	r4, r5
 8000836:	d2eb      	bcs.n	8000810 <__lesf2+0x58>
 8000838:	e7e0      	b.n	80007fc <__lesf2+0x44>
 800083a:	2000      	movs	r0, #0
 800083c:	428b      	cmp	r3, r1
 800083e:	d1ea      	bne.n	8000816 <__lesf2+0x5e>
 8000840:	e7e6      	b.n	8000810 <__lesf2+0x58>
 8000842:	428b      	cmp	r3, r1
 8000844:	d1e7      	bne.n	8000816 <__lesf2+0x5e>
 8000846:	e7f2      	b.n	800082e <__lesf2+0x76>

08000848 <__aeabi_fmul>:
 8000848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084a:	464f      	mov	r7, r9
 800084c:	4646      	mov	r6, r8
 800084e:	46d6      	mov	lr, sl
 8000850:	0044      	lsls	r4, r0, #1
 8000852:	b5c0      	push	{r6, r7, lr}
 8000854:	0246      	lsls	r6, r0, #9
 8000856:	1c0f      	adds	r7, r1, #0
 8000858:	0a76      	lsrs	r6, r6, #9
 800085a:	0e24      	lsrs	r4, r4, #24
 800085c:	0fc5      	lsrs	r5, r0, #31
 800085e:	2c00      	cmp	r4, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fmul+0x1c>
 8000862:	e0da      	b.n	8000a1a <__aeabi_fmul+0x1d2>
 8000864:	2cff      	cmp	r4, #255	@ 0xff
 8000866:	d074      	beq.n	8000952 <__aeabi_fmul+0x10a>
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	00f6      	lsls	r6, r6, #3
 800086c:	04db      	lsls	r3, r3, #19
 800086e:	431e      	orrs	r6, r3
 8000870:	2300      	movs	r3, #0
 8000872:	4699      	mov	r9, r3
 8000874:	469a      	mov	sl, r3
 8000876:	3c7f      	subs	r4, #127	@ 0x7f
 8000878:	027b      	lsls	r3, r7, #9
 800087a:	0a5b      	lsrs	r3, r3, #9
 800087c:	4698      	mov	r8, r3
 800087e:	007b      	lsls	r3, r7, #1
 8000880:	0e1b      	lsrs	r3, r3, #24
 8000882:	0fff      	lsrs	r7, r7, #31
 8000884:	2b00      	cmp	r3, #0
 8000886:	d074      	beq.n	8000972 <__aeabi_fmul+0x12a>
 8000888:	2bff      	cmp	r3, #255	@ 0xff
 800088a:	d100      	bne.n	800088e <__aeabi_fmul+0x46>
 800088c:	e08e      	b.n	80009ac <__aeabi_fmul+0x164>
 800088e:	4642      	mov	r2, r8
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	00d2      	lsls	r2, r2, #3
 8000894:	04c9      	lsls	r1, r1, #19
 8000896:	4311      	orrs	r1, r2
 8000898:	3b7f      	subs	r3, #127	@ 0x7f
 800089a:	002a      	movs	r2, r5
 800089c:	18e4      	adds	r4, r4, r3
 800089e:	464b      	mov	r3, r9
 80008a0:	407a      	eors	r2, r7
 80008a2:	4688      	mov	r8, r1
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	2b0a      	cmp	r3, #10
 80008a8:	dc75      	bgt.n	8000996 <__aeabi_fmul+0x14e>
 80008aa:	464b      	mov	r3, r9
 80008ac:	2000      	movs	r0, #0
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	dd0f      	ble.n	80008d2 <__aeabi_fmul+0x8a>
 80008b2:	4649      	mov	r1, r9
 80008b4:	2301      	movs	r3, #1
 80008b6:	408b      	lsls	r3, r1
 80008b8:	21a6      	movs	r1, #166	@ 0xa6
 80008ba:	00c9      	lsls	r1, r1, #3
 80008bc:	420b      	tst	r3, r1
 80008be:	d169      	bne.n	8000994 <__aeabi_fmul+0x14c>
 80008c0:	2190      	movs	r1, #144	@ 0x90
 80008c2:	0089      	lsls	r1, r1, #2
 80008c4:	420b      	tst	r3, r1
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x82>
 80008c8:	e100      	b.n	8000acc <__aeabi_fmul+0x284>
 80008ca:	2188      	movs	r1, #136	@ 0x88
 80008cc:	4219      	tst	r1, r3
 80008ce:	d000      	beq.n	80008d2 <__aeabi_fmul+0x8a>
 80008d0:	e0f5      	b.n	8000abe <__aeabi_fmul+0x276>
 80008d2:	4641      	mov	r1, r8
 80008d4:	0409      	lsls	r1, r1, #16
 80008d6:	0c09      	lsrs	r1, r1, #16
 80008d8:	4643      	mov	r3, r8
 80008da:	0008      	movs	r0, r1
 80008dc:	0c35      	lsrs	r5, r6, #16
 80008de:	0436      	lsls	r6, r6, #16
 80008e0:	0c1b      	lsrs	r3, r3, #16
 80008e2:	0c36      	lsrs	r6, r6, #16
 80008e4:	4370      	muls	r0, r6
 80008e6:	4369      	muls	r1, r5
 80008e8:	435e      	muls	r6, r3
 80008ea:	435d      	muls	r5, r3
 80008ec:	1876      	adds	r6, r6, r1
 80008ee:	0c03      	lsrs	r3, r0, #16
 80008f0:	199b      	adds	r3, r3, r6
 80008f2:	4299      	cmp	r1, r3
 80008f4:	d903      	bls.n	80008fe <__aeabi_fmul+0xb6>
 80008f6:	2180      	movs	r1, #128	@ 0x80
 80008f8:	0249      	lsls	r1, r1, #9
 80008fa:	468c      	mov	ip, r1
 80008fc:	4465      	add	r5, ip
 80008fe:	0400      	lsls	r0, r0, #16
 8000900:	0419      	lsls	r1, r3, #16
 8000902:	0c00      	lsrs	r0, r0, #16
 8000904:	1809      	adds	r1, r1, r0
 8000906:	018e      	lsls	r6, r1, #6
 8000908:	1e70      	subs	r0, r6, #1
 800090a:	4186      	sbcs	r6, r0
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	0e89      	lsrs	r1, r1, #26
 8000910:	195b      	adds	r3, r3, r5
 8000912:	430e      	orrs	r6, r1
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	431e      	orrs	r6, r3
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	d46c      	bmi.n	80009f6 <__aeabi_fmul+0x1ae>
 800091c:	0023      	movs	r3, r4
 800091e:	337f      	adds	r3, #127	@ 0x7f
 8000920:	2b00      	cmp	r3, #0
 8000922:	dc00      	bgt.n	8000926 <__aeabi_fmul+0xde>
 8000924:	e0b1      	b.n	8000a8a <__aeabi_fmul+0x242>
 8000926:	0015      	movs	r5, r2
 8000928:	0771      	lsls	r1, r6, #29
 800092a:	d00b      	beq.n	8000944 <__aeabi_fmul+0xfc>
 800092c:	200f      	movs	r0, #15
 800092e:	0021      	movs	r1, r4
 8000930:	4030      	ands	r0, r6
 8000932:	2804      	cmp	r0, #4
 8000934:	d006      	beq.n	8000944 <__aeabi_fmul+0xfc>
 8000936:	3604      	adds	r6, #4
 8000938:	0132      	lsls	r2, r6, #4
 800093a:	d503      	bpl.n	8000944 <__aeabi_fmul+0xfc>
 800093c:	4b6e      	ldr	r3, [pc, #440]	@ (8000af8 <__aeabi_fmul+0x2b0>)
 800093e:	401e      	ands	r6, r3
 8000940:	000b      	movs	r3, r1
 8000942:	3380      	adds	r3, #128	@ 0x80
 8000944:	2bfe      	cmp	r3, #254	@ 0xfe
 8000946:	dd00      	ble.n	800094a <__aeabi_fmul+0x102>
 8000948:	e0bd      	b.n	8000ac6 <__aeabi_fmul+0x27e>
 800094a:	01b2      	lsls	r2, r6, #6
 800094c:	0a52      	lsrs	r2, r2, #9
 800094e:	b2db      	uxtb	r3, r3
 8000950:	e048      	b.n	80009e4 <__aeabi_fmul+0x19c>
 8000952:	2e00      	cmp	r6, #0
 8000954:	d000      	beq.n	8000958 <__aeabi_fmul+0x110>
 8000956:	e092      	b.n	8000a7e <__aeabi_fmul+0x236>
 8000958:	2308      	movs	r3, #8
 800095a:	4699      	mov	r9, r3
 800095c:	3b06      	subs	r3, #6
 800095e:	469a      	mov	sl, r3
 8000960:	027b      	lsls	r3, r7, #9
 8000962:	0a5b      	lsrs	r3, r3, #9
 8000964:	4698      	mov	r8, r3
 8000966:	007b      	lsls	r3, r7, #1
 8000968:	24ff      	movs	r4, #255	@ 0xff
 800096a:	0e1b      	lsrs	r3, r3, #24
 800096c:	0fff      	lsrs	r7, r7, #31
 800096e:	2b00      	cmp	r3, #0
 8000970:	d18a      	bne.n	8000888 <__aeabi_fmul+0x40>
 8000972:	4642      	mov	r2, r8
 8000974:	2a00      	cmp	r2, #0
 8000976:	d164      	bne.n	8000a42 <__aeabi_fmul+0x1fa>
 8000978:	4649      	mov	r1, r9
 800097a:	3201      	adds	r2, #1
 800097c:	4311      	orrs	r1, r2
 800097e:	4689      	mov	r9, r1
 8000980:	290a      	cmp	r1, #10
 8000982:	dc08      	bgt.n	8000996 <__aeabi_fmul+0x14e>
 8000984:	407d      	eors	r5, r7
 8000986:	2001      	movs	r0, #1
 8000988:	b2ea      	uxtb	r2, r5
 800098a:	2902      	cmp	r1, #2
 800098c:	dc91      	bgt.n	80008b2 <__aeabi_fmul+0x6a>
 800098e:	0015      	movs	r5, r2
 8000990:	2200      	movs	r2, #0
 8000992:	e027      	b.n	80009e4 <__aeabi_fmul+0x19c>
 8000994:	0015      	movs	r5, r2
 8000996:	4653      	mov	r3, sl
 8000998:	2b02      	cmp	r3, #2
 800099a:	d100      	bne.n	800099e <__aeabi_fmul+0x156>
 800099c:	e093      	b.n	8000ac6 <__aeabi_fmul+0x27e>
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d01a      	beq.n	80009d8 <__aeabi_fmul+0x190>
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d12c      	bne.n	8000a00 <__aeabi_fmul+0x1b8>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2200      	movs	r2, #0
 80009aa:	e01b      	b.n	80009e4 <__aeabi_fmul+0x19c>
 80009ac:	4643      	mov	r3, r8
 80009ae:	34ff      	adds	r4, #255	@ 0xff
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d055      	beq.n	8000a60 <__aeabi_fmul+0x218>
 80009b4:	2103      	movs	r1, #3
 80009b6:	464b      	mov	r3, r9
 80009b8:	430b      	orrs	r3, r1
 80009ba:	0019      	movs	r1, r3
 80009bc:	2b0a      	cmp	r3, #10
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fmul+0x17a>
 80009c0:	e092      	b.n	8000ae8 <__aeabi_fmul+0x2a0>
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fmul+0x180>
 80009c6:	e08c      	b.n	8000ae2 <__aeabi_fmul+0x29a>
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	03d2      	lsls	r2, r2, #15
 80009cc:	4216      	tst	r6, r2
 80009ce:	d003      	beq.n	80009d8 <__aeabi_fmul+0x190>
 80009d0:	4643      	mov	r3, r8
 80009d2:	4213      	tst	r3, r2
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fmul+0x190>
 80009d6:	e07d      	b.n	8000ad4 <__aeabi_fmul+0x28c>
 80009d8:	2280      	movs	r2, #128	@ 0x80
 80009da:	03d2      	lsls	r2, r2, #15
 80009dc:	4332      	orrs	r2, r6
 80009de:	0252      	lsls	r2, r2, #9
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	23ff      	movs	r3, #255	@ 0xff
 80009e4:	05d8      	lsls	r0, r3, #23
 80009e6:	07ed      	lsls	r5, r5, #31
 80009e8:	4310      	orrs	r0, r2
 80009ea:	4328      	orrs	r0, r5
 80009ec:	bce0      	pop	{r5, r6, r7}
 80009ee:	46ba      	mov	sl, r7
 80009f0:	46b1      	mov	r9, r6
 80009f2:	46a8      	mov	r8, r5
 80009f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f6:	2301      	movs	r3, #1
 80009f8:	0015      	movs	r5, r2
 80009fa:	0871      	lsrs	r1, r6, #1
 80009fc:	401e      	ands	r6, r3
 80009fe:	430e      	orrs	r6, r1
 8000a00:	0023      	movs	r3, r4
 8000a02:	3380      	adds	r3, #128	@ 0x80
 8000a04:	1c61      	adds	r1, r4, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	dd41      	ble.n	8000a8e <__aeabi_fmul+0x246>
 8000a0a:	0772      	lsls	r2, r6, #29
 8000a0c:	d094      	beq.n	8000938 <__aeabi_fmul+0xf0>
 8000a0e:	220f      	movs	r2, #15
 8000a10:	4032      	ands	r2, r6
 8000a12:	2a04      	cmp	r2, #4
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fmul+0x1d0>
 8000a16:	e78e      	b.n	8000936 <__aeabi_fmul+0xee>
 8000a18:	e78e      	b.n	8000938 <__aeabi_fmul+0xf0>
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	d105      	bne.n	8000a2a <__aeabi_fmul+0x1e2>
 8000a1e:	2304      	movs	r3, #4
 8000a20:	4699      	mov	r9, r3
 8000a22:	3b03      	subs	r3, #3
 8000a24:	2400      	movs	r4, #0
 8000a26:	469a      	mov	sl, r3
 8000a28:	e726      	b.n	8000878 <__aeabi_fmul+0x30>
 8000a2a:	0030      	movs	r0, r6
 8000a2c:	f000 fb80 	bl	8001130 <__clzsi2>
 8000a30:	2476      	movs	r4, #118	@ 0x76
 8000a32:	1f43      	subs	r3, r0, #5
 8000a34:	409e      	lsls	r6, r3
 8000a36:	2300      	movs	r3, #0
 8000a38:	4264      	negs	r4, r4
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	1a24      	subs	r4, r4, r0
 8000a40:	e71a      	b.n	8000878 <__aeabi_fmul+0x30>
 8000a42:	4640      	mov	r0, r8
 8000a44:	f000 fb74 	bl	8001130 <__clzsi2>
 8000a48:	464b      	mov	r3, r9
 8000a4a:	1a24      	subs	r4, r4, r0
 8000a4c:	3c76      	subs	r4, #118	@ 0x76
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	dca1      	bgt.n	8000996 <__aeabi_fmul+0x14e>
 8000a52:	4643      	mov	r3, r8
 8000a54:	3805      	subs	r0, #5
 8000a56:	4083      	lsls	r3, r0
 8000a58:	407d      	eors	r5, r7
 8000a5a:	4698      	mov	r8, r3
 8000a5c:	b2ea      	uxtb	r2, r5
 8000a5e:	e724      	b.n	80008aa <__aeabi_fmul+0x62>
 8000a60:	464a      	mov	r2, r9
 8000a62:	3302      	adds	r3, #2
 8000a64:	4313      	orrs	r3, r2
 8000a66:	002a      	movs	r2, r5
 8000a68:	407a      	eors	r2, r7
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	2b0a      	cmp	r3, #10
 8000a6e:	dc92      	bgt.n	8000996 <__aeabi_fmul+0x14e>
 8000a70:	4649      	mov	r1, r9
 8000a72:	0015      	movs	r5, r2
 8000a74:	2900      	cmp	r1, #0
 8000a76:	d026      	beq.n	8000ac6 <__aeabi_fmul+0x27e>
 8000a78:	4699      	mov	r9, r3
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	e719      	b.n	80008b2 <__aeabi_fmul+0x6a>
 8000a7e:	230c      	movs	r3, #12
 8000a80:	4699      	mov	r9, r3
 8000a82:	3b09      	subs	r3, #9
 8000a84:	24ff      	movs	r4, #255	@ 0xff
 8000a86:	469a      	mov	sl, r3
 8000a88:	e6f6      	b.n	8000878 <__aeabi_fmul+0x30>
 8000a8a:	0015      	movs	r5, r2
 8000a8c:	0021      	movs	r1, r4
 8000a8e:	2201      	movs	r2, #1
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	2b1b      	cmp	r3, #27
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_fmul+0x250>
 8000a96:	e786      	b.n	80009a6 <__aeabi_fmul+0x15e>
 8000a98:	319e      	adds	r1, #158	@ 0x9e
 8000a9a:	0032      	movs	r2, r6
 8000a9c:	408e      	lsls	r6, r1
 8000a9e:	40da      	lsrs	r2, r3
 8000aa0:	1e73      	subs	r3, r6, #1
 8000aa2:	419e      	sbcs	r6, r3
 8000aa4:	4332      	orrs	r2, r6
 8000aa6:	0753      	lsls	r3, r2, #29
 8000aa8:	d004      	beq.n	8000ab4 <__aeabi_fmul+0x26c>
 8000aaa:	230f      	movs	r3, #15
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_fmul+0x26c>
 8000ab2:	3204      	adds	r2, #4
 8000ab4:	0153      	lsls	r3, r2, #5
 8000ab6:	d510      	bpl.n	8000ada <__aeabi_fmul+0x292>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	2200      	movs	r2, #0
 8000abc:	e792      	b.n	80009e4 <__aeabi_fmul+0x19c>
 8000abe:	003d      	movs	r5, r7
 8000ac0:	4646      	mov	r6, r8
 8000ac2:	4682      	mov	sl, r0
 8000ac4:	e767      	b.n	8000996 <__aeabi_fmul+0x14e>
 8000ac6:	23ff      	movs	r3, #255	@ 0xff
 8000ac8:	2200      	movs	r2, #0
 8000aca:	e78b      	b.n	80009e4 <__aeabi_fmul+0x19c>
 8000acc:	2280      	movs	r2, #128	@ 0x80
 8000ace:	2500      	movs	r5, #0
 8000ad0:	03d2      	lsls	r2, r2, #15
 8000ad2:	e786      	b.n	80009e2 <__aeabi_fmul+0x19a>
 8000ad4:	003d      	movs	r5, r7
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	e783      	b.n	80009e2 <__aeabi_fmul+0x19a>
 8000ada:	0192      	lsls	r2, r2, #6
 8000adc:	2300      	movs	r3, #0
 8000ade:	0a52      	lsrs	r2, r2, #9
 8000ae0:	e780      	b.n	80009e4 <__aeabi_fmul+0x19c>
 8000ae2:	003d      	movs	r5, r7
 8000ae4:	4646      	mov	r6, r8
 8000ae6:	e777      	b.n	80009d8 <__aeabi_fmul+0x190>
 8000ae8:	002a      	movs	r2, r5
 8000aea:	2301      	movs	r3, #1
 8000aec:	407a      	eors	r2, r7
 8000aee:	408b      	lsls	r3, r1
 8000af0:	2003      	movs	r0, #3
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	e6e9      	b.n	80008ca <__aeabi_fmul+0x82>
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	f7ffffff 	.word	0xf7ffffff

08000afc <__aeabi_fsub>:
 8000afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afe:	4647      	mov	r7, r8
 8000b00:	46ce      	mov	lr, r9
 8000b02:	0243      	lsls	r3, r0, #9
 8000b04:	b580      	push	{r7, lr}
 8000b06:	0a5f      	lsrs	r7, r3, #9
 8000b08:	099b      	lsrs	r3, r3, #6
 8000b0a:	0045      	lsls	r5, r0, #1
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	469c      	mov	ip, r3
 8000b10:	024b      	lsls	r3, r1, #9
 8000b12:	0fc4      	lsrs	r4, r0, #31
 8000b14:	0fce      	lsrs	r6, r1, #31
 8000b16:	0e2d      	lsrs	r5, r5, #24
 8000b18:	0a58      	lsrs	r0, r3, #9
 8000b1a:	0e12      	lsrs	r2, r2, #24
 8000b1c:	0999      	lsrs	r1, r3, #6
 8000b1e:	2aff      	cmp	r2, #255	@ 0xff
 8000b20:	d06b      	beq.n	8000bfa <__aeabi_fsub+0xfe>
 8000b22:	2301      	movs	r3, #1
 8000b24:	405e      	eors	r6, r3
 8000b26:	1aab      	subs	r3, r5, r2
 8000b28:	42b4      	cmp	r4, r6
 8000b2a:	d04b      	beq.n	8000bc4 <__aeabi_fsub+0xc8>
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dc00      	bgt.n	8000b32 <__aeabi_fsub+0x36>
 8000b30:	e0ff      	b.n	8000d32 <__aeabi_fsub+0x236>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_fsub+0x3c>
 8000b36:	e088      	b.n	8000c4a <__aeabi_fsub+0x14e>
 8000b38:	2dff      	cmp	r5, #255	@ 0xff
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fsub+0x42>
 8000b3c:	e0ef      	b.n	8000d1e <__aeabi_fsub+0x222>
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	04d2      	lsls	r2, r2, #19
 8000b42:	4311      	orrs	r1, r2
 8000b44:	2001      	movs	r0, #1
 8000b46:	2b1b      	cmp	r3, #27
 8000b48:	dc08      	bgt.n	8000b5c <__aeabi_fsub+0x60>
 8000b4a:	0008      	movs	r0, r1
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	40d8      	lsrs	r0, r3
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4099      	lsls	r1, r3
 8000b54:	000b      	movs	r3, r1
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	4193      	sbcs	r3, r2
 8000b5a:	4318      	orrs	r0, r3
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	1a1b      	subs	r3, r3, r0
 8000b60:	469c      	mov	ip, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	015b      	lsls	r3, r3, #5
 8000b66:	d400      	bmi.n	8000b6a <__aeabi_fsub+0x6e>
 8000b68:	e0cd      	b.n	8000d06 <__aeabi_fsub+0x20a>
 8000b6a:	4663      	mov	r3, ip
 8000b6c:	019f      	lsls	r7, r3, #6
 8000b6e:	09bf      	lsrs	r7, r7, #6
 8000b70:	0038      	movs	r0, r7
 8000b72:	f000 fadd 	bl	8001130 <__clzsi2>
 8000b76:	003b      	movs	r3, r7
 8000b78:	3805      	subs	r0, #5
 8000b7a:	4083      	lsls	r3, r0
 8000b7c:	4285      	cmp	r5, r0
 8000b7e:	dc00      	bgt.n	8000b82 <__aeabi_fsub+0x86>
 8000b80:	e0a2      	b.n	8000cc8 <__aeabi_fsub+0x1cc>
 8000b82:	4ab7      	ldr	r2, [pc, #732]	@ (8000e60 <__aeabi_fsub+0x364>)
 8000b84:	1a2d      	subs	r5, r5, r0
 8000b86:	401a      	ands	r2, r3
 8000b88:	4694      	mov	ip, r2
 8000b8a:	075a      	lsls	r2, r3, #29
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fsub+0x94>
 8000b8e:	e0c3      	b.n	8000d18 <__aeabi_fsub+0x21c>
 8000b90:	220f      	movs	r2, #15
 8000b92:	4013      	ands	r3, r2
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fsub+0x9e>
 8000b98:	e0be      	b.n	8000d18 <__aeabi_fsub+0x21c>
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	4698      	mov	r8, r3
 8000b9e:	44c4      	add	ip, r8
 8000ba0:	4663      	mov	r3, ip
 8000ba2:	015b      	lsls	r3, r3, #5
 8000ba4:	d400      	bmi.n	8000ba8 <__aeabi_fsub+0xac>
 8000ba6:	e0b7      	b.n	8000d18 <__aeabi_fsub+0x21c>
 8000ba8:	1c68      	adds	r0, r5, #1
 8000baa:	2dfe      	cmp	r5, #254	@ 0xfe
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_fsub+0xb4>
 8000bae:	e0a5      	b.n	8000cfc <__aeabi_fsub+0x200>
 8000bb0:	20ff      	movs	r0, #255	@ 0xff
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	05c0      	lsls	r0, r0, #23
 8000bb6:	4310      	orrs	r0, r2
 8000bb8:	07e4      	lsls	r4, r4, #31
 8000bba:	4320      	orrs	r0, r4
 8000bbc:	bcc0      	pop	{r6, r7}
 8000bbe:	46b9      	mov	r9, r7
 8000bc0:	46b0      	mov	r8, r6
 8000bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dc00      	bgt.n	8000bca <__aeabi_fsub+0xce>
 8000bc8:	e1eb      	b.n	8000fa2 <__aeabi_fsub+0x4a6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d046      	beq.n	8000c5c <__aeabi_fsub+0x160>
 8000bce:	2dff      	cmp	r5, #255	@ 0xff
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0xd8>
 8000bd2:	e0a4      	b.n	8000d1e <__aeabi_fsub+0x222>
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	04d2      	lsls	r2, r2, #19
 8000bd8:	4311      	orrs	r1, r2
 8000bda:	2b1b      	cmp	r3, #27
 8000bdc:	dc00      	bgt.n	8000be0 <__aeabi_fsub+0xe4>
 8000bde:	e0fb      	b.n	8000dd8 <__aeabi_fsub+0x2dc>
 8000be0:	2305      	movs	r3, #5
 8000be2:	4698      	mov	r8, r3
 8000be4:	002b      	movs	r3, r5
 8000be6:	44c4      	add	ip, r8
 8000be8:	4662      	mov	r2, ip
 8000bea:	08d7      	lsrs	r7, r2, #3
 8000bec:	2bff      	cmp	r3, #255	@ 0xff
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fsub+0xf6>
 8000bf0:	e095      	b.n	8000d1e <__aeabi_fsub+0x222>
 8000bf2:	027a      	lsls	r2, r7, #9
 8000bf4:	0a52      	lsrs	r2, r2, #9
 8000bf6:	b2d8      	uxtb	r0, r3
 8000bf8:	e7dc      	b.n	8000bb4 <__aeabi_fsub+0xb8>
 8000bfa:	002b      	movs	r3, r5
 8000bfc:	3bff      	subs	r3, #255	@ 0xff
 8000bfe:	4699      	mov	r9, r3
 8000c00:	2900      	cmp	r1, #0
 8000c02:	d118      	bne.n	8000c36 <__aeabi_fsub+0x13a>
 8000c04:	2301      	movs	r3, #1
 8000c06:	405e      	eors	r6, r3
 8000c08:	42b4      	cmp	r4, r6
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fsub+0x112>
 8000c0c:	e0ca      	b.n	8000da4 <__aeabi_fsub+0x2a8>
 8000c0e:	464b      	mov	r3, r9
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d02d      	beq.n	8000c70 <__aeabi_fsub+0x174>
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d000      	beq.n	8000c1a <__aeabi_fsub+0x11e>
 8000c18:	e13c      	b.n	8000e94 <__aeabi_fsub+0x398>
 8000c1a:	23ff      	movs	r3, #255	@ 0xff
 8000c1c:	4664      	mov	r4, ip
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x128>
 8000c22:	e15f      	b.n	8000ee4 <__aeabi_fsub+0x3e8>
 8000c24:	1e5d      	subs	r5, r3, #1
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0x130>
 8000c2a:	e174      	b.n	8000f16 <__aeabi_fsub+0x41a>
 8000c2c:	0034      	movs	r4, r6
 8000c2e:	2bff      	cmp	r3, #255	@ 0xff
 8000c30:	d074      	beq.n	8000d1c <__aeabi_fsub+0x220>
 8000c32:	002b      	movs	r3, r5
 8000c34:	e103      	b.n	8000e3e <__aeabi_fsub+0x342>
 8000c36:	42b4      	cmp	r4, r6
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fsub+0x140>
 8000c3a:	e09c      	b.n	8000d76 <__aeabi_fsub+0x27a>
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d017      	beq.n	8000c70 <__aeabi_fsub+0x174>
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d0ea      	beq.n	8000c1a <__aeabi_fsub+0x11e>
 8000c44:	0007      	movs	r7, r0
 8000c46:	0034      	movs	r4, r6
 8000c48:	e06c      	b.n	8000d24 <__aeabi_fsub+0x228>
 8000c4a:	2900      	cmp	r1, #0
 8000c4c:	d0cc      	beq.n	8000be8 <__aeabi_fsub+0xec>
 8000c4e:	1e5a      	subs	r2, r3, #1
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d02b      	beq.n	8000cac <__aeabi_fsub+0x1b0>
 8000c54:	2bff      	cmp	r3, #255	@ 0xff
 8000c56:	d062      	beq.n	8000d1e <__aeabi_fsub+0x222>
 8000c58:	0013      	movs	r3, r2
 8000c5a:	e773      	b.n	8000b44 <__aeabi_fsub+0x48>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d0c3      	beq.n	8000be8 <__aeabi_fsub+0xec>
 8000c60:	1e5a      	subs	r2, r3, #1
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0x16c>
 8000c66:	e11e      	b.n	8000ea6 <__aeabi_fsub+0x3aa>
 8000c68:	2bff      	cmp	r3, #255	@ 0xff
 8000c6a:	d058      	beq.n	8000d1e <__aeabi_fsub+0x222>
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	e7b4      	b.n	8000bda <__aeabi_fsub+0xde>
 8000c70:	22fe      	movs	r2, #254	@ 0xfe
 8000c72:	1c6b      	adds	r3, r5, #1
 8000c74:	421a      	tst	r2, r3
 8000c76:	d10d      	bne.n	8000c94 <__aeabi_fsub+0x198>
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d060      	beq.n	8000d3e <__aeabi_fsub+0x242>
 8000c7c:	4663      	mov	r3, ip
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d000      	beq.n	8000c84 <__aeabi_fsub+0x188>
 8000c82:	e120      	b.n	8000ec6 <__aeabi_fsub+0x3ca>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	d000      	beq.n	8000c8a <__aeabi_fsub+0x18e>
 8000c88:	e128      	b.n	8000edc <__aeabi_fsub+0x3e0>
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	20ff      	movs	r0, #255	@ 0xff
 8000c90:	03d2      	lsls	r2, r2, #15
 8000c92:	e78f      	b.n	8000bb4 <__aeabi_fsub+0xb8>
 8000c94:	4663      	mov	r3, ip
 8000c96:	1a5f      	subs	r7, r3, r1
 8000c98:	017b      	lsls	r3, r7, #5
 8000c9a:	d500      	bpl.n	8000c9e <__aeabi_fsub+0x1a2>
 8000c9c:	e0fe      	b.n	8000e9c <__aeabi_fsub+0x3a0>
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_fsub+0x1a8>
 8000ca2:	e765      	b.n	8000b70 <__aeabi_fsub+0x74>
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e783      	b.n	8000bb4 <__aeabi_fsub+0xb8>
 8000cac:	4663      	mov	r3, ip
 8000cae:	1a59      	subs	r1, r3, r1
 8000cb0:	014b      	lsls	r3, r1, #5
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_fsub+0x1ba>
 8000cb4:	e119      	b.n	8000eea <__aeabi_fsub+0x3ee>
 8000cb6:	018f      	lsls	r7, r1, #6
 8000cb8:	09bf      	lsrs	r7, r7, #6
 8000cba:	0038      	movs	r0, r7
 8000cbc:	f000 fa38 	bl	8001130 <__clzsi2>
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	3805      	subs	r0, #5
 8000cc4:	4083      	lsls	r3, r0
 8000cc6:	2501      	movs	r5, #1
 8000cc8:	2220      	movs	r2, #32
 8000cca:	1b40      	subs	r0, r0, r5
 8000ccc:	3001      	adds	r0, #1
 8000cce:	1a12      	subs	r2, r2, r0
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	4093      	lsls	r3, r2
 8000cd4:	40c1      	lsrs	r1, r0
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	4193      	sbcs	r3, r2
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	468c      	mov	ip, r1
 8000cde:	1e0b      	subs	r3, r1, #0
 8000ce0:	d0e1      	beq.n	8000ca6 <__aeabi_fsub+0x1aa>
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_fsub+0x1ec>
 8000ce6:	e152      	b.n	8000f8e <__aeabi_fsub+0x492>
 8000ce8:	230f      	movs	r3, #15
 8000cea:	2500      	movs	r5, #0
 8000cec:	400b      	ands	r3, r1
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_fsub+0x1f8>
 8000cf2:	e752      	b.n	8000b9a <__aeabi_fsub+0x9e>
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	014a      	lsls	r2, r1, #5
 8000cf8:	d400      	bmi.n	8000cfc <__aeabi_fsub+0x200>
 8000cfa:	e092      	b.n	8000e22 <__aeabi_fsub+0x326>
 8000cfc:	b2c0      	uxtb	r0, r0
 8000cfe:	4663      	mov	r3, ip
 8000d00:	019a      	lsls	r2, r3, #6
 8000d02:	0a52      	lsrs	r2, r2, #9
 8000d04:	e756      	b.n	8000bb4 <__aeabi_fsub+0xb8>
 8000d06:	4663      	mov	r3, ip
 8000d08:	075b      	lsls	r3, r3, #29
 8000d0a:	d005      	beq.n	8000d18 <__aeabi_fsub+0x21c>
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	4662      	mov	r2, ip
 8000d10:	4013      	ands	r3, r2
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d000      	beq.n	8000d18 <__aeabi_fsub+0x21c>
 8000d16:	e740      	b.n	8000b9a <__aeabi_fsub+0x9e>
 8000d18:	002b      	movs	r3, r5
 8000d1a:	e765      	b.n	8000be8 <__aeabi_fsub+0xec>
 8000d1c:	0007      	movs	r7, r0
 8000d1e:	2f00      	cmp	r7, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_fsub+0x228>
 8000d22:	e745      	b.n	8000bb0 <__aeabi_fsub+0xb4>
 8000d24:	2280      	movs	r2, #128	@ 0x80
 8000d26:	03d2      	lsls	r2, r2, #15
 8000d28:	433a      	orrs	r2, r7
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	20ff      	movs	r0, #255	@ 0xff
 8000d2e:	0a52      	lsrs	r2, r2, #9
 8000d30:	e740      	b.n	8000bb4 <__aeabi_fsub+0xb8>
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d179      	bne.n	8000e2a <__aeabi_fsub+0x32e>
 8000d36:	22fe      	movs	r2, #254	@ 0xfe
 8000d38:	1c6b      	adds	r3, r5, #1
 8000d3a:	421a      	tst	r2, r3
 8000d3c:	d1aa      	bne.n	8000c94 <__aeabi_fsub+0x198>
 8000d3e:	4663      	mov	r3, ip
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d100      	bne.n	8000d46 <__aeabi_fsub+0x24a>
 8000d44:	e0f5      	b.n	8000f32 <__aeabi_fsub+0x436>
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fsub+0x250>
 8000d4a:	e0d1      	b.n	8000ef0 <__aeabi_fsub+0x3f4>
 8000d4c:	1a5f      	subs	r7, r3, r1
 8000d4e:	2380      	movs	r3, #128	@ 0x80
 8000d50:	04db      	lsls	r3, r3, #19
 8000d52:	421f      	tst	r7, r3
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x25c>
 8000d56:	e10e      	b.n	8000f76 <__aeabi_fsub+0x47a>
 8000d58:	4662      	mov	r2, ip
 8000d5a:	2401      	movs	r4, #1
 8000d5c:	1a8a      	subs	r2, r1, r2
 8000d5e:	4694      	mov	ip, r2
 8000d60:	2000      	movs	r0, #0
 8000d62:	4034      	ands	r4, r6
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fsub+0x26e>
 8000d68:	e724      	b.n	8000bb4 <__aeabi_fsub+0xb8>
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	421a      	tst	r2, r3
 8000d6e:	d1c6      	bne.n	8000cfe <__aeabi_fsub+0x202>
 8000d70:	2300      	movs	r3, #0
 8000d72:	08d7      	lsrs	r7, r2, #3
 8000d74:	e73d      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d017      	beq.n	8000daa <__aeabi_fsub+0x2ae>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0x284>
 8000d7e:	e0af      	b.n	8000ee0 <__aeabi_fsub+0x3e4>
 8000d80:	23ff      	movs	r3, #255	@ 0xff
 8000d82:	4665      	mov	r5, ip
 8000d84:	2d00      	cmp	r5, #0
 8000d86:	d100      	bne.n	8000d8a <__aeabi_fsub+0x28e>
 8000d88:	e0ad      	b.n	8000ee6 <__aeabi_fsub+0x3ea>
 8000d8a:	1e5e      	subs	r6, r3, #1
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_fsub+0x296>
 8000d90:	e089      	b.n	8000ea6 <__aeabi_fsub+0x3aa>
 8000d92:	2bff      	cmp	r3, #255	@ 0xff
 8000d94:	d0c2      	beq.n	8000d1c <__aeabi_fsub+0x220>
 8000d96:	2e1b      	cmp	r6, #27
 8000d98:	dc00      	bgt.n	8000d9c <__aeabi_fsub+0x2a0>
 8000d9a:	e0ab      	b.n	8000ef4 <__aeabi_fsub+0x3f8>
 8000d9c:	1d4b      	adds	r3, r1, #5
 8000d9e:	469c      	mov	ip, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	e721      	b.n	8000be8 <__aeabi_fsub+0xec>
 8000da4:	464b      	mov	r3, r9
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d170      	bne.n	8000e8c <__aeabi_fsub+0x390>
 8000daa:	22fe      	movs	r2, #254	@ 0xfe
 8000dac:	1c6b      	adds	r3, r5, #1
 8000dae:	421a      	tst	r2, r3
 8000db0:	d15e      	bne.n	8000e70 <__aeabi_fsub+0x374>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fsub+0x2bc>
 8000db6:	e0c3      	b.n	8000f40 <__aeabi_fsub+0x444>
 8000db8:	4663      	mov	r3, ip
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x2c4>
 8000dbe:	e0d0      	b.n	8000f62 <__aeabi_fsub+0x466>
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x2ca>
 8000dc4:	e094      	b.n	8000ef0 <__aeabi_fsub+0x3f4>
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	4462      	add	r2, ip
 8000dca:	0153      	lsls	r3, r2, #5
 8000dcc:	d400      	bmi.n	8000dd0 <__aeabi_fsub+0x2d4>
 8000dce:	e0d8      	b.n	8000f82 <__aeabi_fsub+0x486>
 8000dd0:	0192      	lsls	r2, r2, #6
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	0a52      	lsrs	r2, r2, #9
 8000dd6:	e6ed      	b.n	8000bb4 <__aeabi_fsub+0xb8>
 8000dd8:	0008      	movs	r0, r1
 8000dda:	2220      	movs	r2, #32
 8000ddc:	40d8      	lsrs	r0, r3
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	4099      	lsls	r1, r3
 8000de2:	000b      	movs	r3, r1
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	4193      	sbcs	r3, r2
 8000de8:	4303      	orrs	r3, r0
 8000dea:	449c      	add	ip, r3
 8000dec:	4663      	mov	r3, ip
 8000dee:	015b      	lsls	r3, r3, #5
 8000df0:	d589      	bpl.n	8000d06 <__aeabi_fsub+0x20a>
 8000df2:	3501      	adds	r5, #1
 8000df4:	2dff      	cmp	r5, #255	@ 0xff
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x2fe>
 8000df8:	e6da      	b.n	8000bb0 <__aeabi_fsub+0xb4>
 8000dfa:	4662      	mov	r2, ip
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	4919      	ldr	r1, [pc, #100]	@ (8000e64 <__aeabi_fsub+0x368>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	0852      	lsrs	r2, r2, #1
 8000e04:	400a      	ands	r2, r1
 8000e06:	431a      	orrs	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	4694      	mov	ip, r2
 8000e0c:	075b      	lsls	r3, r3, #29
 8000e0e:	d004      	beq.n	8000e1a <__aeabi_fsub+0x31e>
 8000e10:	230f      	movs	r3, #15
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x31e>
 8000e18:	e6bf      	b.n	8000b9a <__aeabi_fsub+0x9e>
 8000e1a:	4663      	mov	r3, ip
 8000e1c:	015b      	lsls	r3, r3, #5
 8000e1e:	d500      	bpl.n	8000e22 <__aeabi_fsub+0x326>
 8000e20:	e6c2      	b.n	8000ba8 <__aeabi_fsub+0xac>
 8000e22:	4663      	mov	r3, ip
 8000e24:	08df      	lsrs	r7, r3, #3
 8000e26:	002b      	movs	r3, r5
 8000e28:	e6e3      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000e2a:	1b53      	subs	r3, r2, r5
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0x336>
 8000e30:	e6f4      	b.n	8000c1c <__aeabi_fsub+0x120>
 8000e32:	2080      	movs	r0, #128	@ 0x80
 8000e34:	4664      	mov	r4, ip
 8000e36:	04c0      	lsls	r0, r0, #19
 8000e38:	4304      	orrs	r4, r0
 8000e3a:	46a4      	mov	ip, r4
 8000e3c:	0034      	movs	r4, r6
 8000e3e:	2001      	movs	r0, #1
 8000e40:	2b1b      	cmp	r3, #27
 8000e42:	dc09      	bgt.n	8000e58 <__aeabi_fsub+0x35c>
 8000e44:	2520      	movs	r5, #32
 8000e46:	4660      	mov	r0, ip
 8000e48:	40d8      	lsrs	r0, r3
 8000e4a:	1aeb      	subs	r3, r5, r3
 8000e4c:	4665      	mov	r5, ip
 8000e4e:	409d      	lsls	r5, r3
 8000e50:	002b      	movs	r3, r5
 8000e52:	1e5d      	subs	r5, r3, #1
 8000e54:	41ab      	sbcs	r3, r5
 8000e56:	4318      	orrs	r0, r3
 8000e58:	1a0b      	subs	r3, r1, r0
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	0015      	movs	r5, r2
 8000e5e:	e680      	b.n	8000b62 <__aeabi_fsub+0x66>
 8000e60:	fbffffff 	.word	0xfbffffff
 8000e64:	7dffffff 	.word	0x7dffffff
 8000e68:	22fe      	movs	r2, #254	@ 0xfe
 8000e6a:	1c6b      	adds	r3, r5, #1
 8000e6c:	4213      	tst	r3, r2
 8000e6e:	d0a3      	beq.n	8000db8 <__aeabi_fsub+0x2bc>
 8000e70:	2bff      	cmp	r3, #255	@ 0xff
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x37a>
 8000e74:	e69c      	b.n	8000bb0 <__aeabi_fsub+0xb4>
 8000e76:	4461      	add	r1, ip
 8000e78:	0849      	lsrs	r1, r1, #1
 8000e7a:	074a      	lsls	r2, r1, #29
 8000e7c:	d049      	beq.n	8000f12 <__aeabi_fsub+0x416>
 8000e7e:	220f      	movs	r2, #15
 8000e80:	400a      	ands	r2, r1
 8000e82:	2a04      	cmp	r2, #4
 8000e84:	d045      	beq.n	8000f12 <__aeabi_fsub+0x416>
 8000e86:	1d0a      	adds	r2, r1, #4
 8000e88:	4694      	mov	ip, r2
 8000e8a:	e6ad      	b.n	8000be8 <__aeabi_fsub+0xec>
 8000e8c:	2d00      	cmp	r5, #0
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_fsub+0x396>
 8000e90:	e776      	b.n	8000d80 <__aeabi_fsub+0x284>
 8000e92:	e68d      	b.n	8000bb0 <__aeabi_fsub+0xb4>
 8000e94:	0034      	movs	r4, r6
 8000e96:	20ff      	movs	r0, #255	@ 0xff
 8000e98:	2200      	movs	r2, #0
 8000e9a:	e68b      	b.n	8000bb4 <__aeabi_fsub+0xb8>
 8000e9c:	4663      	mov	r3, ip
 8000e9e:	2401      	movs	r4, #1
 8000ea0:	1acf      	subs	r7, r1, r3
 8000ea2:	4034      	ands	r4, r6
 8000ea4:	e664      	b.n	8000b70 <__aeabi_fsub+0x74>
 8000ea6:	4461      	add	r1, ip
 8000ea8:	014b      	lsls	r3, r1, #5
 8000eaa:	d56d      	bpl.n	8000f88 <__aeabi_fsub+0x48c>
 8000eac:	0848      	lsrs	r0, r1, #1
 8000eae:	4944      	ldr	r1, [pc, #272]	@ (8000fc0 <__aeabi_fsub+0x4c4>)
 8000eb0:	4001      	ands	r1, r0
 8000eb2:	0743      	lsls	r3, r0, #29
 8000eb4:	d02c      	beq.n	8000f10 <__aeabi_fsub+0x414>
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	4003      	ands	r3, r0
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d028      	beq.n	8000f10 <__aeabi_fsub+0x414>
 8000ebe:	1d0b      	adds	r3, r1, #4
 8000ec0:	469c      	mov	ip, r3
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e690      	b.n	8000be8 <__aeabi_fsub+0xec>
 8000ec6:	2900      	cmp	r1, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fsub+0x3d0>
 8000eca:	e72b      	b.n	8000d24 <__aeabi_fsub+0x228>
 8000ecc:	2380      	movs	r3, #128	@ 0x80
 8000ece:	03db      	lsls	r3, r3, #15
 8000ed0:	429f      	cmp	r7, r3
 8000ed2:	d200      	bcs.n	8000ed6 <__aeabi_fsub+0x3da>
 8000ed4:	e726      	b.n	8000d24 <__aeabi_fsub+0x228>
 8000ed6:	4298      	cmp	r0, r3
 8000ed8:	d300      	bcc.n	8000edc <__aeabi_fsub+0x3e0>
 8000eda:	e723      	b.n	8000d24 <__aeabi_fsub+0x228>
 8000edc:	2401      	movs	r4, #1
 8000ede:	4034      	ands	r4, r6
 8000ee0:	0007      	movs	r7, r0
 8000ee2:	e71f      	b.n	8000d24 <__aeabi_fsub+0x228>
 8000ee4:	0034      	movs	r4, r6
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	e67e      	b.n	8000be8 <__aeabi_fsub+0xec>
 8000eea:	2301      	movs	r3, #1
 8000eec:	08cf      	lsrs	r7, r1, #3
 8000eee:	e680      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e67e      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000ef4:	2020      	movs	r0, #32
 8000ef6:	4665      	mov	r5, ip
 8000ef8:	1b80      	subs	r0, r0, r6
 8000efa:	4085      	lsls	r5, r0
 8000efc:	4663      	mov	r3, ip
 8000efe:	0028      	movs	r0, r5
 8000f00:	40f3      	lsrs	r3, r6
 8000f02:	1e45      	subs	r5, r0, #1
 8000f04:	41a8      	sbcs	r0, r5
 8000f06:	4303      	orrs	r3, r0
 8000f08:	469c      	mov	ip, r3
 8000f0a:	0015      	movs	r5, r2
 8000f0c:	448c      	add	ip, r1
 8000f0e:	e76d      	b.n	8000dec <__aeabi_fsub+0x2f0>
 8000f10:	2302      	movs	r3, #2
 8000f12:	08cf      	lsrs	r7, r1, #3
 8000f14:	e66d      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000f16:	1b0f      	subs	r7, r1, r4
 8000f18:	017b      	lsls	r3, r7, #5
 8000f1a:	d528      	bpl.n	8000f6e <__aeabi_fsub+0x472>
 8000f1c:	01bf      	lsls	r7, r7, #6
 8000f1e:	09bf      	lsrs	r7, r7, #6
 8000f20:	0038      	movs	r0, r7
 8000f22:	f000 f905 	bl	8001130 <__clzsi2>
 8000f26:	003b      	movs	r3, r7
 8000f28:	3805      	subs	r0, #5
 8000f2a:	4083      	lsls	r3, r0
 8000f2c:	0034      	movs	r4, r6
 8000f2e:	2501      	movs	r5, #1
 8000f30:	e6ca      	b.n	8000cc8 <__aeabi_fsub+0x1cc>
 8000f32:	2900      	cmp	r1, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x43c>
 8000f36:	e6b5      	b.n	8000ca4 <__aeabi_fsub+0x1a8>
 8000f38:	2401      	movs	r4, #1
 8000f3a:	0007      	movs	r7, r0
 8000f3c:	4034      	ands	r4, r6
 8000f3e:	e658      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000f40:	4663      	mov	r3, ip
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x44c>
 8000f46:	e6e9      	b.n	8000d1c <__aeabi_fsub+0x220>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_fsub+0x452>
 8000f4c:	e6ea      	b.n	8000d24 <__aeabi_fsub+0x228>
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	03db      	lsls	r3, r3, #15
 8000f52:	429f      	cmp	r7, r3
 8000f54:	d200      	bcs.n	8000f58 <__aeabi_fsub+0x45c>
 8000f56:	e6e5      	b.n	8000d24 <__aeabi_fsub+0x228>
 8000f58:	4298      	cmp	r0, r3
 8000f5a:	d300      	bcc.n	8000f5e <__aeabi_fsub+0x462>
 8000f5c:	e6e2      	b.n	8000d24 <__aeabi_fsub+0x228>
 8000f5e:	0007      	movs	r7, r0
 8000f60:	e6e0      	b.n	8000d24 <__aeabi_fsub+0x228>
 8000f62:	2900      	cmp	r1, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_fsub+0x46c>
 8000f66:	e69e      	b.n	8000ca6 <__aeabi_fsub+0x1aa>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	08cf      	lsrs	r7, r1, #3
 8000f6c:	e641      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000f6e:	0034      	movs	r4, r6
 8000f70:	2301      	movs	r3, #1
 8000f72:	08ff      	lsrs	r7, r7, #3
 8000f74:	e63d      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000f76:	2f00      	cmp	r7, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x480>
 8000f7a:	e693      	b.n	8000ca4 <__aeabi_fsub+0x1a8>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	08ff      	lsrs	r7, r7, #3
 8000f80:	e637      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000f82:	2300      	movs	r3, #0
 8000f84:	08d7      	lsrs	r7, r2, #3
 8000f86:	e634      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	08cf      	lsrs	r7, r1, #3
 8000f8c:	e631      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000f8e:	2280      	movs	r2, #128	@ 0x80
 8000f90:	000b      	movs	r3, r1
 8000f92:	04d2      	lsls	r2, r2, #19
 8000f94:	2001      	movs	r0, #1
 8000f96:	4013      	ands	r3, r2
 8000f98:	4211      	tst	r1, r2
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_fsub+0x4a2>
 8000f9c:	e6ae      	b.n	8000cfc <__aeabi_fsub+0x200>
 8000f9e:	08cf      	lsrs	r7, r1, #3
 8000fa0:	e627      	b.n	8000bf2 <__aeabi_fsub+0xf6>
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0x4ac>
 8000fa6:	e75f      	b.n	8000e68 <__aeabi_fsub+0x36c>
 8000fa8:	1b56      	subs	r6, r2, r5
 8000faa:	2d00      	cmp	r5, #0
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_fsub+0x4b6>
 8000fae:	0033      	movs	r3, r6
 8000fb0:	e6e7      	b.n	8000d82 <__aeabi_fsub+0x286>
 8000fb2:	2380      	movs	r3, #128	@ 0x80
 8000fb4:	4660      	mov	r0, ip
 8000fb6:	04db      	lsls	r3, r3, #19
 8000fb8:	4318      	orrs	r0, r3
 8000fba:	4684      	mov	ip, r0
 8000fbc:	e6eb      	b.n	8000d96 <__aeabi_fsub+0x29a>
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	7dffffff 	.word	0x7dffffff

08000fc4 <__aeabi_f2iz>:
 8000fc4:	0241      	lsls	r1, r0, #9
 8000fc6:	0042      	lsls	r2, r0, #1
 8000fc8:	0fc3      	lsrs	r3, r0, #31
 8000fca:	0a49      	lsrs	r1, r1, #9
 8000fcc:	2000      	movs	r0, #0
 8000fce:	0e12      	lsrs	r2, r2, #24
 8000fd0:	2a7e      	cmp	r2, #126	@ 0x7e
 8000fd2:	dd03      	ble.n	8000fdc <__aeabi_f2iz+0x18>
 8000fd4:	2a9d      	cmp	r2, #157	@ 0x9d
 8000fd6:	dd02      	ble.n	8000fde <__aeabi_f2iz+0x1a>
 8000fd8:	4a09      	ldr	r2, [pc, #36]	@ (8001000 <__aeabi_f2iz+0x3c>)
 8000fda:	1898      	adds	r0, r3, r2
 8000fdc:	4770      	bx	lr
 8000fde:	2080      	movs	r0, #128	@ 0x80
 8000fe0:	0400      	lsls	r0, r0, #16
 8000fe2:	4301      	orrs	r1, r0
 8000fe4:	2a95      	cmp	r2, #149	@ 0x95
 8000fe6:	dc07      	bgt.n	8000ff8 <__aeabi_f2iz+0x34>
 8000fe8:	2096      	movs	r0, #150	@ 0x96
 8000fea:	1a82      	subs	r2, r0, r2
 8000fec:	40d1      	lsrs	r1, r2
 8000fee:	4248      	negs	r0, r1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f3      	bne.n	8000fdc <__aeabi_f2iz+0x18>
 8000ff4:	0008      	movs	r0, r1
 8000ff6:	e7f1      	b.n	8000fdc <__aeabi_f2iz+0x18>
 8000ff8:	3a96      	subs	r2, #150	@ 0x96
 8000ffa:	4091      	lsls	r1, r2
 8000ffc:	e7f7      	b.n	8000fee <__aeabi_f2iz+0x2a>
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	7fffffff 	.word	0x7fffffff

08001004 <__aeabi_i2f>:
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	2800      	cmp	r0, #0
 8001008:	d012      	beq.n	8001030 <__aeabi_i2f+0x2c>
 800100a:	17c3      	asrs	r3, r0, #31
 800100c:	18c5      	adds	r5, r0, r3
 800100e:	405d      	eors	r5, r3
 8001010:	0fc4      	lsrs	r4, r0, #31
 8001012:	0028      	movs	r0, r5
 8001014:	f000 f88c 	bl	8001130 <__clzsi2>
 8001018:	239e      	movs	r3, #158	@ 0x9e
 800101a:	1a1b      	subs	r3, r3, r0
 800101c:	2b96      	cmp	r3, #150	@ 0x96
 800101e:	dc0f      	bgt.n	8001040 <__aeabi_i2f+0x3c>
 8001020:	2808      	cmp	r0, #8
 8001022:	d038      	beq.n	8001096 <__aeabi_i2f+0x92>
 8001024:	3808      	subs	r0, #8
 8001026:	4085      	lsls	r5, r0
 8001028:	026d      	lsls	r5, r5, #9
 800102a:	0a6d      	lsrs	r5, r5, #9
 800102c:	b2d8      	uxtb	r0, r3
 800102e:	e002      	b.n	8001036 <__aeabi_i2f+0x32>
 8001030:	2400      	movs	r4, #0
 8001032:	2000      	movs	r0, #0
 8001034:	2500      	movs	r5, #0
 8001036:	05c0      	lsls	r0, r0, #23
 8001038:	4328      	orrs	r0, r5
 800103a:	07e4      	lsls	r4, r4, #31
 800103c:	4320      	orrs	r0, r4
 800103e:	bd70      	pop	{r4, r5, r6, pc}
 8001040:	2b99      	cmp	r3, #153	@ 0x99
 8001042:	dc14      	bgt.n	800106e <__aeabi_i2f+0x6a>
 8001044:	1f42      	subs	r2, r0, #5
 8001046:	4095      	lsls	r5, r2
 8001048:	002a      	movs	r2, r5
 800104a:	4915      	ldr	r1, [pc, #84]	@ (80010a0 <__aeabi_i2f+0x9c>)
 800104c:	4011      	ands	r1, r2
 800104e:	0755      	lsls	r5, r2, #29
 8001050:	d01c      	beq.n	800108c <__aeabi_i2f+0x88>
 8001052:	250f      	movs	r5, #15
 8001054:	402a      	ands	r2, r5
 8001056:	2a04      	cmp	r2, #4
 8001058:	d018      	beq.n	800108c <__aeabi_i2f+0x88>
 800105a:	3104      	adds	r1, #4
 800105c:	08ca      	lsrs	r2, r1, #3
 800105e:	0149      	lsls	r1, r1, #5
 8001060:	d515      	bpl.n	800108e <__aeabi_i2f+0x8a>
 8001062:	239f      	movs	r3, #159	@ 0x9f
 8001064:	0252      	lsls	r2, r2, #9
 8001066:	1a18      	subs	r0, r3, r0
 8001068:	0a55      	lsrs	r5, r2, #9
 800106a:	b2c0      	uxtb	r0, r0
 800106c:	e7e3      	b.n	8001036 <__aeabi_i2f+0x32>
 800106e:	2205      	movs	r2, #5
 8001070:	0029      	movs	r1, r5
 8001072:	1a12      	subs	r2, r2, r0
 8001074:	40d1      	lsrs	r1, r2
 8001076:	0002      	movs	r2, r0
 8001078:	321b      	adds	r2, #27
 800107a:	4095      	lsls	r5, r2
 800107c:	002a      	movs	r2, r5
 800107e:	1e55      	subs	r5, r2, #1
 8001080:	41aa      	sbcs	r2, r5
 8001082:	430a      	orrs	r2, r1
 8001084:	4906      	ldr	r1, [pc, #24]	@ (80010a0 <__aeabi_i2f+0x9c>)
 8001086:	4011      	ands	r1, r2
 8001088:	0755      	lsls	r5, r2, #29
 800108a:	d1e2      	bne.n	8001052 <__aeabi_i2f+0x4e>
 800108c:	08ca      	lsrs	r2, r1, #3
 800108e:	0252      	lsls	r2, r2, #9
 8001090:	0a55      	lsrs	r5, r2, #9
 8001092:	b2d8      	uxtb	r0, r3
 8001094:	e7cf      	b.n	8001036 <__aeabi_i2f+0x32>
 8001096:	026d      	lsls	r5, r5, #9
 8001098:	0a6d      	lsrs	r5, r5, #9
 800109a:	308e      	adds	r0, #142	@ 0x8e
 800109c:	e7cb      	b.n	8001036 <__aeabi_i2f+0x32>
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	fbffffff 	.word	0xfbffffff

080010a4 <__aeabi_ui2f>:
 80010a4:	b510      	push	{r4, lr}
 80010a6:	1e04      	subs	r4, r0, #0
 80010a8:	d00d      	beq.n	80010c6 <__aeabi_ui2f+0x22>
 80010aa:	f000 f841 	bl	8001130 <__clzsi2>
 80010ae:	239e      	movs	r3, #158	@ 0x9e
 80010b0:	1a1b      	subs	r3, r3, r0
 80010b2:	2b96      	cmp	r3, #150	@ 0x96
 80010b4:	dc0c      	bgt.n	80010d0 <__aeabi_ui2f+0x2c>
 80010b6:	2808      	cmp	r0, #8
 80010b8:	d034      	beq.n	8001124 <__aeabi_ui2f+0x80>
 80010ba:	3808      	subs	r0, #8
 80010bc:	4084      	lsls	r4, r0
 80010be:	0264      	lsls	r4, r4, #9
 80010c0:	0a64      	lsrs	r4, r4, #9
 80010c2:	b2d8      	uxtb	r0, r3
 80010c4:	e001      	b.n	80010ca <__aeabi_ui2f+0x26>
 80010c6:	2000      	movs	r0, #0
 80010c8:	2400      	movs	r4, #0
 80010ca:	05c0      	lsls	r0, r0, #23
 80010cc:	4320      	orrs	r0, r4
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	2b99      	cmp	r3, #153	@ 0x99
 80010d2:	dc13      	bgt.n	80010fc <__aeabi_ui2f+0x58>
 80010d4:	1f42      	subs	r2, r0, #5
 80010d6:	4094      	lsls	r4, r2
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <__aeabi_ui2f+0x88>)
 80010da:	4022      	ands	r2, r4
 80010dc:	0761      	lsls	r1, r4, #29
 80010de:	d01c      	beq.n	800111a <__aeabi_ui2f+0x76>
 80010e0:	210f      	movs	r1, #15
 80010e2:	4021      	ands	r1, r4
 80010e4:	2904      	cmp	r1, #4
 80010e6:	d018      	beq.n	800111a <__aeabi_ui2f+0x76>
 80010e8:	3204      	adds	r2, #4
 80010ea:	08d4      	lsrs	r4, r2, #3
 80010ec:	0152      	lsls	r2, r2, #5
 80010ee:	d515      	bpl.n	800111c <__aeabi_ui2f+0x78>
 80010f0:	239f      	movs	r3, #159	@ 0x9f
 80010f2:	0264      	lsls	r4, r4, #9
 80010f4:	1a18      	subs	r0, r3, r0
 80010f6:	0a64      	lsrs	r4, r4, #9
 80010f8:	b2c0      	uxtb	r0, r0
 80010fa:	e7e6      	b.n	80010ca <__aeabi_ui2f+0x26>
 80010fc:	0002      	movs	r2, r0
 80010fe:	0021      	movs	r1, r4
 8001100:	321b      	adds	r2, #27
 8001102:	4091      	lsls	r1, r2
 8001104:	000a      	movs	r2, r1
 8001106:	1e51      	subs	r1, r2, #1
 8001108:	418a      	sbcs	r2, r1
 800110a:	2105      	movs	r1, #5
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	40cc      	lsrs	r4, r1
 8001110:	4314      	orrs	r4, r2
 8001112:	4a06      	ldr	r2, [pc, #24]	@ (800112c <__aeabi_ui2f+0x88>)
 8001114:	4022      	ands	r2, r4
 8001116:	0761      	lsls	r1, r4, #29
 8001118:	d1e2      	bne.n	80010e0 <__aeabi_ui2f+0x3c>
 800111a:	08d4      	lsrs	r4, r2, #3
 800111c:	0264      	lsls	r4, r4, #9
 800111e:	0a64      	lsrs	r4, r4, #9
 8001120:	b2d8      	uxtb	r0, r3
 8001122:	e7d2      	b.n	80010ca <__aeabi_ui2f+0x26>
 8001124:	0264      	lsls	r4, r4, #9
 8001126:	0a64      	lsrs	r4, r4, #9
 8001128:	308e      	adds	r0, #142	@ 0x8e
 800112a:	e7ce      	b.n	80010ca <__aeabi_ui2f+0x26>
 800112c:	fbffffff 	.word	0xfbffffff

08001130 <__clzsi2>:
 8001130:	211c      	movs	r1, #28
 8001132:	2301      	movs	r3, #1
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	4298      	cmp	r0, r3
 8001138:	d301      	bcc.n	800113e <__clzsi2+0xe>
 800113a:	0c00      	lsrs	r0, r0, #16
 800113c:	3910      	subs	r1, #16
 800113e:	0a1b      	lsrs	r3, r3, #8
 8001140:	4298      	cmp	r0, r3
 8001142:	d301      	bcc.n	8001148 <__clzsi2+0x18>
 8001144:	0a00      	lsrs	r0, r0, #8
 8001146:	3908      	subs	r1, #8
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	4298      	cmp	r0, r3
 800114c:	d301      	bcc.n	8001152 <__clzsi2+0x22>
 800114e:	0900      	lsrs	r0, r0, #4
 8001150:	3904      	subs	r1, #4
 8001152:	a202      	add	r2, pc, #8	@ (adr r2, 800115c <__clzsi2+0x2c>)
 8001154:	5c10      	ldrb	r0, [r2, r0]
 8001156:	1840      	adds	r0, r0, r1
 8001158:	4770      	bx	lr
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	02020304 	.word	0x02020304
 8001160:	01010101 	.word	0x01010101
	...

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	b0a9      	sub	sp, #164	@ 0xa4
 8001170:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001172:	f001 f9dd 	bl	8002530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001176:	f000 fa11 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117a:	f000 fbc1 	bl	8001900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800117e:	f000 fb8f 	bl	80018a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001182:	f000 fac5 	bl	8001710 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001186:	f000 fb03 	bl	8001790 <MX_TIM3_Init>
  MX_ADC_Init();
 800118a:	f000 fa65 	bl	8001658 <MX_ADC_Init>
  MX_TIM14_Init();
 800118e:	f000 fb61 	bl	8001854 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  ////////////////////////////////////////////////////

  //timer 14 is used for ADS
  HAL_TIM_Base_Start_IT(&htim14);
 8001192:	4bf4      	ldr	r3, [pc, #976]	@ (8001564 <main+0x3f8>)
 8001194:	0018      	movs	r0, r3
 8001196:	f004 f959 	bl	800544c <HAL_TIM_Base_Start_IT>


  // ADC channel 7

  HAL_ADC_Start(&hadc);
 800119a:	4bf3      	ldr	r3, [pc, #972]	@ (8001568 <main+0x3fc>)
 800119c:	0018      	movs	r0, r3
 800119e:	f001 fb8f 	bl	80028c0 <HAL_ADC_Start>
  adc_ready = false;
 80011a2:	4bf2      	ldr	r3, [pc, #968]	@ (800156c <main+0x400>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
  uint16_t adc_index = 0;
 80011a8:	237e      	movs	r3, #126	@ 0x7e
 80011aa:	2118      	movs	r1, #24
 80011ac:	185b      	adds	r3, r3, r1
 80011ae:	19db      	adds	r3, r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
  uint32_t adc_samples[adc_sample_no];
 80011b4:	4bee      	ldr	r3, [pc, #952]	@ (8001570 <main+0x404>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	001a      	movs	r2, r3
 80011ba:	3a01      	subs	r2, #1
 80011bc:	208c      	movs	r0, #140	@ 0x8c
 80011be:	1838      	adds	r0, r7, r0
 80011c0:	6002      	str	r2, [r0, #0]
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	2200      	movs	r2, #0
 80011c6:	60fa      	str	r2, [r7, #12]
 80011c8:	68b8      	ldr	r0, [r7, #8]
 80011ca:	68f9      	ldr	r1, [r7, #12]
 80011cc:	0002      	movs	r2, r0
 80011ce:	0ed2      	lsrs	r2, r2, #27
 80011d0:	000e      	movs	r6, r1
 80011d2:	0176      	lsls	r6, r6, #5
 80011d4:	617e      	str	r6, [r7, #20]
 80011d6:	697e      	ldr	r6, [r7, #20]
 80011d8:	4316      	orrs	r6, r2
 80011da:	617e      	str	r6, [r7, #20]
 80011dc:	0002      	movs	r2, r0
 80011de:	0152      	lsls	r2, r2, #5
 80011e0:	613a      	str	r2, [r7, #16]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	0002      	movs	r2, r0
 80011ee:	0ed2      	lsrs	r2, r2, #27
 80011f0:	000e      	movs	r6, r1
 80011f2:	0175      	lsls	r5, r6, #5
 80011f4:	4315      	orrs	r5, r2
 80011f6:	0002      	movs	r2, r0
 80011f8:	0154      	lsls	r4, r2, #5
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	3307      	adds	r3, #7
 80011fe:	08db      	lsrs	r3, r3, #3
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	466a      	mov	r2, sp
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	469d      	mov	sp, r3
 8001208:	ab02      	add	r3, sp, #8
 800120a:	3303      	adds	r3, #3
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	2288      	movs	r2, #136	@ 0x88
 8001212:	18ba      	adds	r2, r7, r2
 8001214:	6013      	str	r3, [r2, #0]

  //initial set temp
  i = 18;
 8001216:	4bd7      	ldr	r3, [pc, #860]	@ (8001574 <main+0x408>)
 8001218:	2212      	movs	r2, #18
 800121a:	601a      	str	r2, [r3, #0]

  //temp text out
  char temp_set_text[20];
  memset(temp_set_text, 0x00, 20);
 800121c:	2348      	movs	r3, #72	@ 0x48
 800121e:	2418      	movs	r4, #24
 8001220:	191b      	adds	r3, r3, r4
 8001222:	19db      	adds	r3, r3, r7
 8001224:	2214      	movs	r2, #20
 8001226:	2100      	movs	r1, #0
 8001228:	0018      	movs	r0, r3
 800122a:	f005 fb89 	bl	8006940 <memset>

  //temp variables
  uint8_t tmp102_addr = (0x48 << 1);
 800122e:	236f      	movs	r3, #111	@ 0x6f
 8001230:	0021      	movs	r1, r4
 8001232:	185b      	adds	r3, r3, r1
 8001234:	19db      	adds	r3, r3, r7
 8001236:	2290      	movs	r2, #144	@ 0x90
 8001238:	701a      	strb	r2, [r3, #0]
  uint8_t receive_buffer[3];
  char temp_out_buffer[22];
  memset(temp_out_buffer, 0x00, 22);
 800123a:	232c      	movs	r3, #44	@ 0x2c
 800123c:	185b      	adds	r3, r3, r1
 800123e:	19db      	adds	r3, r3, r7
 8001240:	2216      	movs	r2, #22
 8001242:	2100      	movs	r1, #0
 8001244:	0018      	movs	r0, r3
 8001246:	f005 fb7b 	bl	8006940 <memset>
  int scaled;


  //timer 3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800124a:	4bcb      	ldr	r3, [pc, #812]	@ (8001578 <main+0x40c>)
 800124c:	2108      	movs	r1, #8
 800124e:	0018      	movs	r0, r3
 8001250:	f004 f998 	bl	8005584 <HAL_TIM_PWM_Start>

  //oled
  ssd1306_Init();
 8001254:	f001 f818 	bl	8002288 <ssd1306_Init>
  clear_oled();
 8001258:	f000 fed7 	bl	800200a <clear_oled>
  HAL_ADCEx_Calibration_Start(&hadc);
 800125c:	4bc2      	ldr	r3, [pc, #776]	@ (8001568 <main+0x3fc>)
 800125e:	0018      	movs	r0, r3
 8001260:	f001 fdb8 	bl	8002dd4 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //get temperature from TMP102
	  if((HAL_I2C_IsDeviceReady(&hi2c1, tmp102_addr, 1, 10)) == HAL_OK){
 8001264:	246f      	movs	r4, #111	@ 0x6f
 8001266:	2518      	movs	r5, #24
 8001268:	1963      	adds	r3, r4, r5
 800126a:	19db      	adds	r3, r3, r7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b299      	uxth	r1, r3
 8001270:	48c2      	ldr	r0, [pc, #776]	@ (800157c <main+0x410>)
 8001272:	230a      	movs	r3, #10
 8001274:	2201      	movs	r2, #1
 8001276:	f002 fded 	bl	8003e54 <HAL_I2C_IsDeviceReady>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d000      	beq.n	8001280 <main+0x114>
 800127e:	e088      	b.n	8001392 <main+0x226>
		  receive_buffer[0] = 0x00;
 8001280:	2044      	movs	r0, #68	@ 0x44
 8001282:	0029      	movs	r1, r5
 8001284:	1843      	adds	r3, r0, r1
 8001286:	19db      	adds	r3, r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Master_Transmit(&hi2c1, tmp102_addr, receive_buffer, 1, 20);
 800128c:	0025      	movs	r5, r4
 800128e:	000a      	movs	r2, r1
 8001290:	18a3      	adds	r3, r4, r2
 8001292:	19db      	adds	r3, r3, r7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b299      	uxth	r1, r3
 8001298:	0004      	movs	r4, r0
 800129a:	0016      	movs	r6, r2
 800129c:	1883      	adds	r3, r0, r2
 800129e:	19da      	adds	r2, r3, r7
 80012a0:	48b6      	ldr	r0, [pc, #728]	@ (800157c <main+0x410>)
 80012a2:	2314      	movs	r3, #20
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	f002 fa74 	bl	8003794 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c1, tmp102_addr, receive_buffer, 2, 20);
 80012ac:	0032      	movs	r2, r6
 80012ae:	18ab      	adds	r3, r5, r2
 80012b0:	19db      	adds	r3, r3, r7
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b299      	uxth	r1, r3
 80012b6:	0015      	movs	r5, r2
 80012b8:	18a3      	adds	r3, r4, r2
 80012ba:	19da      	adds	r2, r3, r7
 80012bc:	48af      	ldr	r0, [pc, #700]	@ (800157c <main+0x410>)
 80012be:	2314      	movs	r3, #20
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2302      	movs	r3, #2
 80012c4:	f002 fb90 	bl	80039e8 <HAL_I2C_Master_Receive>
		    int16_t raw = ((receive_buffer[0] << 4) | (receive_buffer[1] >> 4));
 80012c8:	002a      	movs	r2, r5
 80012ca:	18a3      	adds	r3, r4, r2
 80012cc:	19db      	adds	r3, r3, r7
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	b219      	sxth	r1, r3
 80012d6:	0015      	movs	r5, r2
 80012d8:	18a3      	adds	r3, r4, r2
 80012da:	19db      	adds	r3, r3, r7
 80012dc:	785b      	ldrb	r3, [r3, #1]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	206c      	movs	r0, #108	@ 0x6c
 80012e6:	1943      	adds	r3, r0, r5
 80012e8:	19db      	adds	r3, r3, r7
 80012ea:	430a      	orrs	r2, r1
 80012ec:	801a      	strh	r2, [r3, #0]
		    raw = (int16_t)(raw << 4) >> 4;  // sign-extend 12-bit value
 80012ee:	0001      	movs	r1, r0
 80012f0:	194b      	adds	r3, r1, r5
 80012f2:	19db      	adds	r3, r3, r7
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	194b      	adds	r3, r1, r5
 80012fc:	19db      	adds	r3, r3, r7
 80012fe:	1112      	asrs	r2, r2, #4
 8001300:	801a      	strh	r2, [r3, #0]

		    float temp = raw * 0.0625f;
 8001302:	002e      	movs	r6, r5
 8001304:	194b      	adds	r3, r1, r5
 8001306:	19db      	adds	r3, r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	5e9b      	ldrsh	r3, [r3, r2]
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff fe79 	bl	8001004 <__aeabi_i2f>
 8001312:	1c03      	adds	r3, r0, #0
 8001314:	21f6      	movs	r1, #246	@ 0xf6
 8001316:	0589      	lsls	r1, r1, #22
 8001318:	1c18      	adds	r0, r3, #0
 800131a:	f7ff fa95 	bl	8000848 <__aeabi_fmul>
 800131e:	1c03      	adds	r3, r0, #0
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	18b9      	adds	r1, r7, r2
 8001324:	600b      	str	r3, [r1, #0]
		    scaled = (int)(temp * 100);
 8001326:	4996      	ldr	r1, [pc, #600]	@ (8001580 <main+0x414>)
 8001328:	18bb      	adds	r3, r7, r2
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f7ff fa8c 	bl	8000848 <__aeabi_fmul>
 8001330:	1c03      	adds	r3, r0, #0
 8001332:	1c18      	adds	r0, r3, #0
 8001334:	f7ff fe46 	bl	8000fc4 <__aeabi_f2iz>
 8001338:	0003      	movs	r3, r0
 800133a:	2590      	movs	r5, #144	@ 0x90
 800133c:	197a      	adds	r2, r7, r5
 800133e:	6013      	str	r3, [r2, #0]
		    sprintf(temp_out_buffer, "TMP102:%d.%02d C", (scaled / 100)-TMP102_error, abs(scaled % 100));//correct temp. by subtracting 1
 8001340:	197b      	adds	r3, r7, r5
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2164      	movs	r1, #100	@ 0x64
 8001346:	0018      	movs	r0, r3
 8001348:	f7fe ff72 	bl	8000230 <__divsi3>
 800134c:	0003      	movs	r3, r0
 800134e:	001a      	movs	r2, r3
 8001350:	2301      	movs	r3, #1
 8001352:	1ad4      	subs	r4, r2, r3
 8001354:	197b      	adds	r3, r7, r5
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2164      	movs	r1, #100	@ 0x64
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff f84e 	bl	80003fc <__aeabi_idivmod>
 8001360:	000b      	movs	r3, r1
 8001362:	17da      	asrs	r2, r3, #31
 8001364:	189b      	adds	r3, r3, r2
 8001366:	4053      	eors	r3, r2
 8001368:	4986      	ldr	r1, [pc, #536]	@ (8001584 <main+0x418>)
 800136a:	252c      	movs	r5, #44	@ 0x2c
 800136c:	19aa      	adds	r2, r5, r6
 800136e:	19d0      	adds	r0, r2, r7
 8001370:	0022      	movs	r2, r4
 8001372:	f005 fab1 	bl	80068d8 <siprintf>
		    send_strXY(temp_out_buffer, 0, 0, 22);
 8001376:	19ab      	adds	r3, r5, r6
 8001378:	19d8      	adds	r0, r3, r7
 800137a:	2316      	movs	r3, #22
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	f000 fe4d 	bl	800201e <send_strXY>
		    HAL_GPIO_WritePin(TMP_OK_LED_GPIO_Port, TMP_OK_LED_Pin, GPIO_PIN_SET);
 8001384:	4b80      	ldr	r3, [pc, #512]	@ (8001588 <main+0x41c>)
 8001386:	2201      	movs	r2, #1
 8001388:	2120      	movs	r1, #32
 800138a:	0018      	movs	r0, r3
 800138c:	f002 f8d8 	bl	8003540 <HAL_GPIO_WritePin>
 8001390:	e00e      	b.n	80013b0 <main+0x244>
	  }
	  else{
		    HAL_GPIO_WritePin(TMP_OK_LED_GPIO_Port, TMP_OK_LED_Pin, GPIO_PIN_RESET);
 8001392:	4b7d      	ldr	r3, [pc, #500]	@ (8001588 <main+0x41c>)
 8001394:	2200      	movs	r2, #0
 8001396:	2120      	movs	r1, #32
 8001398:	0018      	movs	r0, r3
 800139a:	f002 f8d1 	bl	8003540 <HAL_GPIO_WritePin>


		    HAL_I2C_DeInit(&hi2c1);
 800139e:	4b77      	ldr	r3, [pc, #476]	@ (800157c <main+0x410>)
 80013a0:	0018      	movs	r0, r3
 80013a2:	f002 f9c7 	bl	8003734 <HAL_I2C_DeInit>
		    //HAL_I2C1
		    HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f001 f926 	bl	80025f8 <HAL_Delay>
		    //HAL_I2C_Init(&hi2c1);
		    MX_I2C1_Init();
 80013ac:	f000 f9b0 	bl	8001710 <MX_I2C1_Init>

	  }

	  //show set temp
	  sprintf(temp_set_text, "Alarm temp=%i C", i);
 80013b0:	4b70      	ldr	r3, [pc, #448]	@ (8001574 <main+0x408>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4975      	ldr	r1, [pc, #468]	@ (800158c <main+0x420>)
 80013b6:	2448      	movs	r4, #72	@ 0x48
 80013b8:	2518      	movs	r5, #24
 80013ba:	1963      	adds	r3, r4, r5
 80013bc:	19db      	adds	r3, r3, r7
 80013be:	0018      	movs	r0, r3
 80013c0:	f005 fa8a 	bl	80068d8 <siprintf>
	  send_strXY(temp_set_text, 0, 1, 15);
 80013c4:	1963      	adds	r3, r4, r5
 80013c6:	19d8      	adds	r0, r3, r7
 80013c8:	230f      	movs	r3, #15
 80013ca:	2201      	movs	r2, #1
 80013cc:	2100      	movs	r1, #0
 80013ce:	f000 fe26 	bl	800201e <send_strXY>

	  //test for alarm
	  if( i > ((scaled/100)- TMP102_error) ){
 80013d2:	2390      	movs	r3, #144	@ 0x90
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2164      	movs	r1, #100	@ 0x64
 80013da:	0018      	movs	r0, r3
 80013dc:	f7fe ff28 	bl	8000230 <__divsi3>
 80013e0:	0003      	movs	r3, r0
 80013e2:	001a      	movs	r2, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	1ad2      	subs	r2, r2, r3
 80013e8:	4b62      	ldr	r3, [pc, #392]	@ (8001574 <main+0x408>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	da20      	bge.n	8001432 <main+0x2c6>
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//start alarm
 80013f0:	4b61      	ldr	r3, [pc, #388]	@ (8001578 <main+0x40c>)
 80013f2:	2108      	movs	r1, #8
 80013f4:	0018      	movs	r0, r3
 80013f6:	f004 f8c5 	bl	8005584 <HAL_TIM_PWM_Start>
		  HAL_GPIO_WritePin(TMP_OFF_LED_GPIO_Port, TMP_OFF_LED_Pin, GPIO_PIN_SET); //turnoff red led
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	0119      	lsls	r1, r3, #4
 80013fe:	2390      	movs	r3, #144	@ 0x90
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	2201      	movs	r2, #1
 8001404:	0018      	movs	r0, r3
 8001406:	f002 f89b 	bl	8003540 <HAL_GPIO_WritePin>

		  HAL_Delay(250);
 800140a:	20fa      	movs	r0, #250	@ 0xfa
 800140c:	f001 f8f4 	bl	80025f8 <HAL_Delay>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);//stop alarm
 8001410:	4b59      	ldr	r3, [pc, #356]	@ (8001578 <main+0x40c>)
 8001412:	2108      	movs	r1, #8
 8001414:	0018      	movs	r0, r3
 8001416:	f004 f961 	bl	80056dc <HAL_TIM_PWM_Stop>
		    HAL_GPIO_WritePin(TMP_OFF_LED_GPIO_Port, TMP_OFF_LED_Pin, GPIO_PIN_RESET);
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	0119      	lsls	r1, r3, #4
 800141e:	2390      	movs	r3, #144	@ 0x90
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	2200      	movs	r2, #0
 8001424:	0018      	movs	r0, r3
 8001426:	f002 f88b 	bl	8003540 <HAL_GPIO_WritePin>

		  HAL_Delay(250);
 800142a:	20fa      	movs	r0, #250	@ 0xfa
 800142c:	f001 f8e4 	bl	80025f8 <HAL_Delay>
 8001430:	e004      	b.n	800143c <main+0x2d0>


	  }
	  else{
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);//stop alarm
 8001432:	4b51      	ldr	r3, [pc, #324]	@ (8001578 <main+0x40c>)
 8001434:	2108      	movs	r1, #8
 8001436:	0018      	movs	r0, r3
 8001438:	f004 f950 	bl	80056dc <HAL_TIM_PWM_Stop>
	  }


	  // calculate temp from analog temp sensor
	  if(adc_ready == true){
 800143c:	4b4b      	ldr	r3, [pc, #300]	@ (800156c <main+0x400>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d027      	beq.n	8001494 <main+0x328>
			adc_ready = false;
 8001444:	4b49      	ldr	r3, [pc, #292]	@ (800156c <main+0x400>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
			//HAL_I2C_DeInit(&hi2c1); //turn off I2C to reduce noise
			HAL_Delay(200);
 800144a:	20c8      	movs	r0, #200	@ 0xc8
 800144c:	f001 f8d4 	bl	80025f8 <HAL_Delay>
			HAL_ADC_PollForConversion(&hadc, 10);
 8001450:	4b45      	ldr	r3, [pc, #276]	@ (8001568 <main+0x3fc>)
 8001452:	210a      	movs	r1, #10
 8001454:	0018      	movs	r0, r3
 8001456:	f001 fa87 	bl	8002968 <HAL_ADC_PollForConversion>
			adc_samples[adc_index] = HAL_ADC_GetValue(&hadc);
 800145a:	257e      	movs	r5, #126	@ 0x7e
 800145c:	2618      	movs	r6, #24
 800145e:	19ab      	adds	r3, r5, r6
 8001460:	19db      	adds	r3, r3, r7
 8001462:	881c      	ldrh	r4, [r3, #0]
 8001464:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <main+0x3fc>)
 8001466:	0018      	movs	r0, r3
 8001468:	f001 fb16 	bl	8002a98 <HAL_ADC_GetValue>
 800146c:	0001      	movs	r1, r0
 800146e:	2388      	movs	r3, #136	@ 0x88
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	00a2      	lsls	r2, r4, #2
 8001476:	50d1      	str	r1, [r2, r3]
			//HAL_I2C_Init(&hi2c1); //turn on I2C again
			HAL_Delay(5);
 8001478:	2005      	movs	r0, #5
 800147a:	f001 f8bd 	bl	80025f8 <HAL_Delay>
			adc_index++;
 800147e:	19ab      	adds	r3, r5, r6
 8001480:	19db      	adds	r3, r3, r7
 8001482:	881a      	ldrh	r2, [r3, #0]
 8001484:	19ab      	adds	r3, r5, r6
 8001486:	19db      	adds	r3, r3, r7
 8001488:	3201      	adds	r2, #1
 800148a:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Start(&hadc);
 800148c:	4b36      	ldr	r3, [pc, #216]	@ (8001568 <main+0x3fc>)
 800148e:	0018      	movs	r0, r3
 8001490:	f001 fa16 	bl	80028c0 <HAL_ADC_Start>

	  }
	  if(adc_index == adc_sample_no){
 8001494:	217e      	movs	r1, #126	@ 0x7e
 8001496:	2518      	movs	r5, #24
 8001498:	194b      	adds	r3, r1, r5
 800149a:	19db      	adds	r3, r3, r7
 800149c:	881a      	ldrh	r2, [r3, #0]
 800149e:	4b34      	ldr	r3, [pc, #208]	@ (8001570 <main+0x404>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d15a      	bne.n	800155c <main+0x3f0>
		  adc_index = 0;
 80014a6:	194b      	adds	r3, r1, r5
 80014a8:	19db      	adds	r3, r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	801a      	strh	r2, [r3, #0]
		  uint32_t average = calc_average(adc_samples);
 80014ae:	2388      	movs	r3, #136	@ 0x88
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f000 fadf 	bl	8001a78 <calc_average>
 80014ba:	0003      	movs	r3, r0
 80014bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  //printf("average=%i\n", (int)average);
		  char text_average[20];
		  memset(text_average, 0x00, 20);
 80014be:	2418      	movs	r4, #24
 80014c0:	1963      	adds	r3, r4, r5
 80014c2:	19db      	adds	r3, r3, r7
 80014c4:	2214      	movs	r2, #20
 80014c6:	2100      	movs	r1, #0
 80014c8:	0018      	movs	r0, r3
 80014ca:	f005 fa39 	bl	8006940 <memset>
		  float voltage = adc_to_voltage(average)*1000;
 80014ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 fab3 	bl	8001a3c <adc_to_voltage>
 80014d6:	1c03      	adds	r3, r0, #0
 80014d8:	492d      	ldr	r1, [pc, #180]	@ (8001590 <main+0x424>)
 80014da:	1c18      	adds	r0, r3, #0
 80014dc:	f7ff f9b4 	bl	8000848 <__aeabi_fmul>
 80014e0:	1c03      	adds	r3, r0, #0
 80014e2:	67bb      	str	r3, [r7, #120]	@ 0x78
		  sprintf(text_average, "TMP36 voltage:%lu\n", (uint32_t)voltage);
 80014e4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80014e6:	f7fe ffc9 	bl	800047c <__aeabi_f2uiz>
 80014ea:	0002      	movs	r2, r0
 80014ec:	4929      	ldr	r1, [pc, #164]	@ (8001594 <main+0x428>)
 80014ee:	1963      	adds	r3, r4, r5
 80014f0:	19db      	adds	r3, r3, r7
 80014f2:	0018      	movs	r0, r3
 80014f4:	f005 f9f0 	bl	80068d8 <siprintf>
		  //HAL_UART_Transmit(&huart2, (uint8_t*)text_average, 10, 10);
		  send_strXY(text_average, 0, 4, 20);
 80014f8:	1963      	adds	r3, r4, r5
 80014fa:	19d8      	adds	r0, r3, r7
 80014fc:	2314      	movs	r3, #20
 80014fe:	2204      	movs	r2, #4
 8001500:	2100      	movs	r1, #0
 8001502:	f000 fd8c 	bl	800201e <send_strXY>

		  char text_tmp36_tmp[20];
		  memset(text_tmp36_tmp, 0x00, 20);
 8001506:	251c      	movs	r5, #28
 8001508:	197b      	adds	r3, r7, r5
 800150a:	2214      	movs	r2, #20
 800150c:	2100      	movs	r1, #0
 800150e:	0018      	movs	r0, r3
 8001510:	f005 fa16 	bl	8006940 <memset>
		  int32_t cdeg = tmp36_cdeg_from_mV((uint32_t)voltage);
 8001514:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001516:	f7fe ffb1 	bl	800047c <__aeabi_f2uiz>
 800151a:	0003      	movs	r3, r0
 800151c:	0018      	movs	r0, r3
 800151e:	f000 fa7d 	bl	8001a1c <tmp36_cdeg_from_mV>
 8001522:	0003      	movs	r3, r0
 8001524:	677b      	str	r3, [r7, #116]	@ 0x74
		  sprintf(text_tmp36_tmp, "TMP36:%ld.%02ldC", (cdeg/100)-4, labs(cdeg%100));//correct temperature by subtracting 4!
 8001526:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001528:	2164      	movs	r1, #100	@ 0x64
 800152a:	0018      	movs	r0, r3
 800152c:	f7fe fe80 	bl	8000230 <__divsi3>
 8001530:	0003      	movs	r3, r0
 8001532:	1f1c      	subs	r4, r3, #4
 8001534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001536:	2164      	movs	r1, #100	@ 0x64
 8001538:	0018      	movs	r0, r3
 800153a:	f7fe ff5f 	bl	80003fc <__aeabi_idivmod>
 800153e:	000b      	movs	r3, r1
 8001540:	17da      	asrs	r2, r3, #31
 8001542:	189b      	adds	r3, r3, r2
 8001544:	4053      	eors	r3, r2
 8001546:	4914      	ldr	r1, [pc, #80]	@ (8001598 <main+0x42c>)
 8001548:	1978      	adds	r0, r7, r5
 800154a:	0022      	movs	r2, r4
 800154c:	f005 f9c4 	bl	80068d8 <siprintf>
		  send_strXY(text_tmp36_tmp, 0, 5, 20);
 8001550:	1978      	adds	r0, r7, r5
 8001552:	2314      	movs	r3, #20
 8001554:	2205      	movs	r2, #5
 8001556:	2100      	movs	r1, #0
 8001558:	f000 fd61 	bl	800201e <send_strXY>

	  }

	  HAL_Delay(5);
 800155c:	2005      	movs	r0, #5
 800155e:	f001 f84b 	bl	80025f8 <HAL_Delay>
	  if((HAL_I2C_IsDeviceReady(&hi2c1, tmp102_addr, 1, 10)) == HAL_OK){
 8001562:	e67f      	b.n	8001264 <main+0xf8>
 8001564:	20000158 	.word	0x20000158
 8001568:	2000007c 	.word	0x2000007c
 800156c:	2000022c 	.word	0x2000022c
 8001570:	20000000 	.word	0x20000000
 8001574:	20000228 	.word	0x20000228
 8001578:	20000110 	.word	0x20000110
 800157c:	200000bc 	.word	0x200000bc
 8001580:	42c80000 	.word	0x42c80000
 8001584:	0800722c 	.word	0x0800722c
 8001588:	48000400 	.word	0x48000400
 800158c:	08007240 	.word	0x08007240
 8001590:	447a0000 	.word	0x447a0000
 8001594:	08007250 	.word	0x08007250
 8001598:	08007264 	.word	0x08007264

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b099      	sub	sp, #100	@ 0x64
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	242c      	movs	r4, #44	@ 0x2c
 80015a4:	193b      	adds	r3, r7, r4
 80015a6:	0018      	movs	r0, r3
 80015a8:	2334      	movs	r3, #52	@ 0x34
 80015aa:	001a      	movs	r2, r3
 80015ac:	2100      	movs	r1, #0
 80015ae:	f005 f9c7 	bl	8006940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b2:	231c      	movs	r3, #28
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	0018      	movs	r0, r3
 80015b8:	2310      	movs	r3, #16
 80015ba:	001a      	movs	r2, r3
 80015bc:	2100      	movs	r1, #0
 80015be:	f005 f9bf 	bl	8006940 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	0018      	movs	r0, r3
 80015c6:	2318      	movs	r3, #24
 80015c8:	001a      	movs	r2, r3
 80015ca:	2100      	movs	r1, #0
 80015cc:	f005 f9b8 	bl	8006940 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80015d0:	0021      	movs	r1, r4
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2212      	movs	r2, #18
 80015d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2201      	movs	r2, #1
 80015dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2201      	movs	r2, #1
 80015e2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2210      	movs	r2, #16
 80015e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2210      	movs	r2, #16
 80015ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	0018      	movs	r0, r3
 80015fa:	f003 f8f7 	bl	80047ec <HAL_RCC_OscConfig>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001602:	f000 fa99 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001606:	211c      	movs	r1, #28
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2207      	movs	r2, #7
 800160c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2100      	movs	r1, #0
 8001624:	0018      	movs	r0, r3
 8001626:	f003 fc67 	bl	8004ef8 <HAL_RCC_ClockConfig>
 800162a:	1e03      	subs	r3, r0, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800162e:	f000 fa83 	bl	8001b38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2220      	movs	r2, #32
 8001636:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	0018      	movs	r0, r3
 8001642:	f003 fdc5 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800164a:	f000 fa75 	bl	8001b38 <Error_Handler>
  }
}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b019      	add	sp, #100	@ 0x64
 8001654:	bd90      	pop	{r4, r7, pc}
	...

08001658 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	0018      	movs	r0, r3
 8001662:	230c      	movs	r3, #12
 8001664:	001a      	movs	r2, r3
 8001666:	2100      	movs	r1, #0
 8001668:	f005 f96a 	bl	8006940 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800166c:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <MX_ADC_Init+0xb0>)
 800166e:	4a27      	ldr	r2, [pc, #156]	@ (800170c <MX_ADC_Init+0xb4>)
 8001670:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001672:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <MX_ADC_Init+0xb0>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001678:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <MX_ADC_Init+0xb0>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800167e:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <MX_ADC_Init+0xb0>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001684:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <MX_ADC_Init+0xb0>)
 8001686:	2201      	movs	r2, #1
 8001688:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <MX_ADC_Init+0xb0>)
 800168c:	2204      	movs	r2, #4
 800168e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001690:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <MX_ADC_Init+0xb0>)
 8001692:	2200      	movs	r2, #0
 8001694:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_ADC_Init+0xb0>)
 8001698:	2200      	movs	r2, #0
 800169a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_ADC_Init+0xb0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_ADC_Init+0xb0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a8:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_ADC_Init+0xb0>)
 80016aa:	22c2      	movs	r2, #194	@ 0xc2
 80016ac:	32ff      	adds	r2, #255	@ 0xff
 80016ae:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_ADC_Init+0xb0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <MX_ADC_Init+0xb0>)
 80016b8:	2224      	movs	r2, #36	@ 0x24
 80016ba:	2100      	movs	r1, #0
 80016bc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <MX_ADC_Init+0xb0>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80016c4:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <MX_ADC_Init+0xb0>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 ffba 	bl	8002640 <HAL_ADC_Init>
 80016cc:	1e03      	subs	r3, r0, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f000 fa32 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2207      	movs	r2, #7
 80016d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2280      	movs	r2, #128	@ 0x80
 80016de:	0152      	lsls	r2, r2, #5
 80016e0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2280      	movs	r2, #128	@ 0x80
 80016e6:	0552      	lsls	r2, r2, #21
 80016e8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016ea:	1d3a      	adds	r2, r7, #4
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <MX_ADC_Init+0xb0>)
 80016ee:	0011      	movs	r1, r2
 80016f0:	0018      	movs	r0, r3
 80016f2:	f001 f9dd 	bl	8002ab0 <HAL_ADC_ConfigChannel>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d001      	beq.n	80016fe <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80016fa:	f000 fa1d 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	2000007c 	.word	0x2000007c
 800170c:	40012400 	.word	0x40012400

08001710 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <MX_I2C1_Init+0x78>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_I2C1_Init+0x74>)
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <MX_I2C1_Init+0x7c>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001720:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001728:	2201      	movs	r2, #1
 800172a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_I2C1_Init+0x74>)
 800174c:	0018      	movs	r0, r3
 800174e:	f001 ff4b 	bl	80035e8 <HAL_I2C_Init>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d001      	beq.n	800175a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001756:	f000 f9ef 	bl	8001b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <MX_I2C1_Init+0x74>)
 800175c:	2100      	movs	r1, #0
 800175e:	0018      	movs	r0, r3
 8001760:	f002 ffac 	bl	80046bc <HAL_I2CEx_ConfigAnalogFilter>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001768:	f000 f9e6 	bl	8001b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <MX_I2C1_Init+0x74>)
 800176e:	2100      	movs	r1, #0
 8001770:	0018      	movs	r0, r3
 8001772:	f002 ffef 	bl	8004754 <HAL_I2CEx_ConfigDigitalFilter>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d001      	beq.n	800177e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 f9dd 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200000bc 	.word	0x200000bc
 8001788:	40005400 	.word	0x40005400
 800178c:	00201d2b 	.word	0x00201d2b

08001790 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	2320      	movs	r3, #32
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	0018      	movs	r0, r3
 800179c:	2308      	movs	r3, #8
 800179e:	001a      	movs	r2, r3
 80017a0:	2100      	movs	r1, #0
 80017a2:	f005 f8cd 	bl	8006940 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	0018      	movs	r0, r3
 80017aa:	231c      	movs	r3, #28
 80017ac:	001a      	movs	r2, r3
 80017ae:	2100      	movs	r1, #0
 80017b0:	f005 f8c6 	bl	8006940 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b4:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <MX_TIM3_Init+0xb8>)
 80017b6:	4a25      	ldr	r2, [pc, #148]	@ (800184c <MX_TIM3_Init+0xbc>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017ba:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <MX_TIM3_Init+0xb8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <MX_TIM3_Init+0xb8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999-1;
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <MX_TIM3_Init+0xb8>)
 80017c8:	4a21      	ldr	r2, [pc, #132]	@ (8001850 <MX_TIM3_Init+0xc0>)
 80017ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <MX_TIM3_Init+0xb8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <MX_TIM3_Init+0xb8>)
 80017d4:	2280      	movs	r2, #128	@ 0x80
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <MX_TIM3_Init+0xb8>)
 80017da:	0018      	movs	r0, r3
 80017dc:	f003 fe82 	bl	80054e4 <HAL_TIM_PWM_Init>
 80017e0:	1e03      	subs	r3, r0, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017e4:	f000 f9a8 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2120      	movs	r1, #32
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017f6:	187a      	adds	r2, r7, r1
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <MX_TIM3_Init+0xb8>)
 80017fa:	0011      	movs	r1, r2
 80017fc:	0018      	movs	r0, r3
 80017fe:	f004 fc3f 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	1e03      	subs	r3, r0, #0
 8001804:	d001      	beq.n	800180a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001806:	f000 f997 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2260      	movs	r2, #96	@ 0x60
 800180e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	22fa      	movs	r2, #250	@ 0xfa
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001824:	1d39      	adds	r1, r7, #4
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <MX_TIM3_Init+0xb8>)
 8001828:	2208      	movs	r2, #8
 800182a:	0018      	movs	r0, r3
 800182c:	f004 f8ba 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001834:	f000 f980 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <MX_TIM3_Init+0xb8>)
 800183a:	0018      	movs	r0, r3
 800183c:	f000 faaa 	bl	8001d94 <HAL_TIM_MspPostInit>

}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b00a      	add	sp, #40	@ 0x28
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000110 	.word	0x20000110
 800184c:	40000400 	.word	0x40000400
 8001850:	000007ce 	.word	0x000007ce

08001854 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_TIM14_Init+0x40>)
 800185a:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <MX_TIM14_Init+0x44>)
 800185c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 800185e:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <MX_TIM14_Init+0x40>)
 8001860:	4a0e      	ldr	r2, [pc, #56]	@ (800189c <MX_TIM14_Init+0x48>)
 8001862:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <MX_TIM14_Init+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 125-1;
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <MX_TIM14_Init+0x40>)
 800186c:	227c      	movs	r2, #124	@ 0x7c
 800186e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <MX_TIM14_Init+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <MX_TIM14_Init+0x40>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <MX_TIM14_Init+0x40>)
 800187e:	0018      	movs	r0, r3
 8001880:	f003 fd94 	bl	80053ac <HAL_TIM_Base_Init>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d001      	beq.n	800188c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001888:	f000 f956 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800188c:	46c0      	nop			@ (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	20000158 	.word	0x20000158
 8001898:	40002000 	.word	0x40002000
 800189c:	00001f3f 	.word	0x00001f3f

080018a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018a6:	4a15      	ldr	r2, [pc, #84]	@ (80018fc <MX_USART2_UART_Init+0x5c>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018aa:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018ac:	22e1      	movs	r2, #225	@ 0xe1
 80018ae:	0252      	lsls	r2, r2, #9
 80018b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <MX_USART2_UART_Init+0x58>)
 80018e4:	0018      	movs	r0, r3
 80018e6:	f004 fc33 	bl	8006150 <HAL_UART_Init>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018ee:	f000 f923 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200001a0 	.word	0x200001a0
 80018fc:	40004400 	.word	0x40004400

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	240c      	movs	r4, #12
 8001908:	193b      	adds	r3, r7, r4
 800190a:	0018      	movs	r0, r3
 800190c:	2314      	movs	r3, #20
 800190e:	001a      	movs	r2, r3
 8001910:	2100      	movs	r1, #0
 8001912:	f005 f815 	bl	8006940 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001916:	4b3f      	ldr	r3, [pc, #252]	@ (8001a14 <MX_GPIO_Init+0x114>)
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a14 <MX_GPIO_Init+0x114>)
 800191c:	2180      	movs	r1, #128	@ 0x80
 800191e:	03c9      	lsls	r1, r1, #15
 8001920:	430a      	orrs	r2, r1
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	4b3b      	ldr	r3, [pc, #236]	@ (8001a14 <MX_GPIO_Init+0x114>)
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	03db      	lsls	r3, r3, #15
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b38      	ldr	r3, [pc, #224]	@ (8001a14 <MX_GPIO_Init+0x114>)
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	4b37      	ldr	r3, [pc, #220]	@ (8001a14 <MX_GPIO_Init+0x114>)
 8001938:	2180      	movs	r1, #128	@ 0x80
 800193a:	0289      	lsls	r1, r1, #10
 800193c:	430a      	orrs	r2, r1
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <MX_GPIO_Init+0x114>)
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	029b      	lsls	r3, r3, #10
 8001948:	4013      	ands	r3, r2
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <MX_GPIO_Init+0x114>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	4b30      	ldr	r3, [pc, #192]	@ (8001a14 <MX_GPIO_Init+0x114>)
 8001954:	2180      	movs	r1, #128	@ 0x80
 8001956:	02c9      	lsls	r1, r1, #11
 8001958:	430a      	orrs	r2, r1
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a14 <MX_GPIO_Init+0x114>)
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	02db      	lsls	r3, r3, #11
 8001964:	4013      	ands	r3, r2
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_IT_Toogle_Pin|TMP_OFF_LED_Pin, GPIO_PIN_RESET);
 800196a:	2384      	movs	r3, #132	@ 0x84
 800196c:	0119      	lsls	r1, r3, #4
 800196e:	2390      	movs	r3, #144	@ 0x90
 8001970:	05db      	lsls	r3, r3, #23
 8001972:	2200      	movs	r2, #0
 8001974:	0018      	movs	r0, r3
 8001976:	f001 fde3 	bl	8003540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TMP_OK_LED_GPIO_Port, TMP_OK_LED_Pin, GPIO_PIN_RESET);
 800197a:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <MX_GPIO_Init+0x118>)
 800197c:	2200      	movs	r2, #0
 800197e:	2120      	movs	r1, #32
 8001980:	0018      	movs	r0, r3
 8001982:	f001 fddd 	bl	8003540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001986:	193b      	adds	r3, r7, r4
 8001988:	2203      	movs	r2, #3
 800198a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800198c:	193b      	adds	r3, r7, r4
 800198e:	2284      	movs	r2, #132	@ 0x84
 8001990:	0392      	lsls	r2, r2, #14
 8001992:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001994:	193b      	adds	r3, r7, r4
 8001996:	2201      	movs	r2, #1
 8001998:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	193a      	adds	r2, r7, r4
 800199c:	2390      	movs	r3, #144	@ 0x90
 800199e:	05db      	lsls	r3, r3, #23
 80019a0:	0011      	movs	r1, r2
 80019a2:	0018      	movs	r0, r3
 80019a4:	f001 fb9c 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_IT_Toogle_Pin TMP_OFF_LED_Pin */
  GPIO_InitStruct.Pin = ADC_IT_Toogle_Pin|TMP_OFF_LED_Pin;
 80019a8:	0021      	movs	r1, r4
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2284      	movs	r2, #132	@ 0x84
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	000c      	movs	r4, r1
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2201      	movs	r2, #1
 80019b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	193a      	adds	r2, r7, r4
 80019c8:	2390      	movs	r3, #144	@ 0x90
 80019ca:	05db      	lsls	r3, r3, #23
 80019cc:	0011      	movs	r1, r2
 80019ce:	0018      	movs	r0, r3
 80019d0:	f001 fb86 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMP_OK_LED_Pin */
  GPIO_InitStruct.Pin = TMP_OK_LED_Pin;
 80019d4:	0021      	movs	r1, r4
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2220      	movs	r2, #32
 80019da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2201      	movs	r2, #1
 80019e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TMP_OK_LED_GPIO_Port, &GPIO_InitStruct);
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <MX_GPIO_Init+0x118>)
 80019f2:	0019      	movs	r1, r3
 80019f4:	0010      	movs	r0, r2
 80019f6:	f001 fb73 	bl	80030e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2005      	movs	r0, #5
 8001a00:	f001 fb3c 	bl	800307c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001a04:	2005      	movs	r0, #5
 8001a06:	f001 fb4e 	bl	80030a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b009      	add	sp, #36	@ 0x24
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48000400 	.word	0x48000400

08001a1c <tmp36_cdeg_from_mV>:
//    const uint32_t MAX_ADC = 4095;
//    return (adc_value * VREF) / MAX_ADC;
//}


int32_t tmp36_cdeg_from_mV(int32_t mv) {   // mv = measured millivolts
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    return (mv - 500) * 10;                // centi-°C
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3bf5      	subs	r3, #245	@ 0xf5
 8001a28:	3bff      	subs	r3, #255	@ 0xff
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <adc_to_voltage>:

float adc_to_voltage(uint32_t adc_value) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    //const float VREF = 3.3257f;  // your measured supply voltage breadboard
    const float VREF = 3.311f;  // your measured supply voltage
 8001a44:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <adc_to_voltage+0x34>)
 8001a46:	60fb      	str	r3, [r7, #12]

    const float MAX_ADC = 4095.0f;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <adc_to_voltage+0x38>)
 8001a4a:	60bb      	str	r3, [r7, #8]
    return (adc_value * VREF) / MAX_ADC;
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fb29 	bl	80010a4 <__aeabi_ui2f>
 8001a52:	1c03      	adds	r3, r0, #0
 8001a54:	68f9      	ldr	r1, [r7, #12]
 8001a56:	1c18      	adds	r0, r3, #0
 8001a58:	f7fe fef6 	bl	8000848 <__aeabi_fmul>
 8001a5c:	1c03      	adds	r3, r0, #0
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	1c18      	adds	r0, r3, #0
 8001a62:	f7fe fd23 	bl	80004ac <__aeabi_fdiv>
 8001a66:	1c03      	adds	r3, r0, #0
}
 8001a68:	1c18      	adds	r0, r3, #0
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b004      	add	sp, #16
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	4053e76d 	.word	0x4053e76d
 8001a74:	457ff000 	.word	0x457ff000

08001a78 <calc_average>:



uint32_t calc_average(uint32_t adc_samples[]){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint32_t out = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
	for(uint32_t index = 0; index < adc_sample_no; index++){
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	e00a      	b.n	8001aa0 <calc_average+0x28>
		out += adc_samples[index];
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	18d3      	adds	r3, r2, r3
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	18d3      	adds	r3, r2, r3
 8001a98:	60fb      	str	r3, [r7, #12]
	for(uint32_t index = 0; index < adc_sample_no; index++){
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <calc_average+0x4c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3ef      	bcc.n	8001a8a <calc_average+0x12>
	}
	out = (uint32_t)(out/adc_sample_no);
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <calc_average+0x4c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	0019      	movs	r1, r3
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7fe fb33 	bl	800011c <__udivsi3>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	60fb      	str	r3, [r7, #12]
	return out;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <HAL_TIM_PeriodElapsedCallback>:
int __io_putchar(int ch){
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM14){
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d108      	bne.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(ADC_IT_Toogle_GPIO_Port, ADC_IT_Toogle_Pin);
 8001ada:	2390      	movs	r3, #144	@ 0x90
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	2140      	movs	r1, #64	@ 0x40
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f001 fd4a 	bl	800357a <HAL_GPIO_TogglePin>
		adc_ready = true;
 8001ae6:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]

	}
}
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40002000 	.word	0x40002000
 8001af8:	2000022c 	.word	0x2000022c

08001afc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	0002      	movs	r2, r0
 8001b04:	1dbb      	adds	r3, r7, #6
 8001b06:	801a      	strh	r2, [r3, #0]
	//uint32_t now = HAL_GetTick();

    if (GPIO_Pin == GPIO_PIN_0)
 8001b08:	1dbb      	adds	r3, r7, #6
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d104      	bne.n	8001b1a <HAL_GPIO_EXTI_Callback+0x1e>
    {
        		i -= 1;
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0x38>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0x38>)
 8001b18:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_1)
 8001b1a:	1dbb      	adds	r3, r7, #6
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d104      	bne.n	8001b2c <HAL_GPIO_EXTI_Callback+0x30>
    {
    		i += 1;
 8001b22:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0x38>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	4b02      	ldr	r3, [pc, #8]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0x38>)
 8001b2a:	601a      	str	r2, [r3, #0]
    }
}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000228 	.word	0x20000228

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	e7fd      	b.n	8001b40 <Error_Handler+0x8>

08001b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	430a      	orrs	r2, r1
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	61da      	str	r2, [r3, #28]
 8001b70:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	055b      	lsls	r3, r3, #21
 8001b78:	4013      	ands	r3, r2
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b002      	add	sp, #8
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			@ (mov r8, r8)
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b08b      	sub	sp, #44	@ 0x2c
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	2414      	movs	r4, #20
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	0018      	movs	r0, r3
 8001b9a:	2314      	movs	r3, #20
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f004 fece 	bl	8006940 <memset>
  if(hadc->Instance==ADC1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <HAL_ADC_MspInit+0x84>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d12b      	bne.n	8001c06 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bae:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_ADC_MspInit+0x88>)
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <HAL_ADC_MspInit+0x88>)
 8001bb4:	2180      	movs	r1, #128	@ 0x80
 8001bb6:	0089      	lsls	r1, r1, #2
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	619a      	str	r2, [r3, #24]
 8001bbc:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_ADC_MspInit+0x88>)
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_ADC_MspInit+0x88>)
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_ADC_MspInit+0x88>)
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	0289      	lsls	r1, r1, #10
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	615a      	str	r2, [r3, #20]
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_ADC_MspInit+0x88>)
 8001bda:	695a      	ldr	r2, [r3, #20]
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	029b      	lsls	r3, r3, #10
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	2280      	movs	r2, #128	@ 0x80
 8001bea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bec:	193b      	adds	r3, r7, r4
 8001bee:	2203      	movs	r2, #3
 8001bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	193a      	adds	r2, r7, r4
 8001bfa:	2390      	movs	r3, #144	@ 0x90
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	0011      	movs	r1, r2
 8001c00:	0018      	movs	r0, r3
 8001c02:	f001 fa6d 	bl	80030e0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b00b      	add	sp, #44	@ 0x2c
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	40012400 	.word	0x40012400
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b08b      	sub	sp, #44	@ 0x2c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	2414      	movs	r4, #20
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	0018      	movs	r0, r3
 8001c26:	2314      	movs	r3, #20
 8001c28:	001a      	movs	r2, r3
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	f004 fe88 	bl	8006940 <memset>
  if(hi2c->Instance==I2C1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1d      	ldr	r2, [pc, #116]	@ (8001cac <HAL_I2C_MspInit+0x94>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d133      	bne.n	8001ca2 <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_I2C_MspInit+0x98>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <HAL_I2C_MspInit+0x98>)
 8001c40:	2180      	movs	r1, #128	@ 0x80
 8001c42:	0289      	lsls	r1, r1, #10
 8001c44:	430a      	orrs	r2, r1
 8001c46:	615a      	str	r2, [r3, #20]
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_I2C_MspInit+0x98>)
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	029b      	lsls	r3, r3, #10
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	22c0      	movs	r2, #192	@ 0xc0
 8001c5a:	00d2      	lsls	r2, r2, #3
 8001c5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	0021      	movs	r1, r4
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	2212      	movs	r2, #18
 8001c64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	2204      	movs	r2, #4
 8001c76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	187a      	adds	r2, r7, r1
 8001c7a:	2390      	movs	r3, #144	@ 0x90
 8001c7c:	05db      	lsls	r3, r3, #23
 8001c7e:	0011      	movs	r1, r2
 8001c80:	0018      	movs	r0, r3
 8001c82:	f001 fa2d 	bl	80030e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_I2C_MspInit+0x98>)
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_I2C_MspInit+0x98>)
 8001c8c:	2180      	movs	r1, #128	@ 0x80
 8001c8e:	0389      	lsls	r1, r1, #14
 8001c90:	430a      	orrs	r2, r1
 8001c92:	61da      	str	r2, [r3, #28]
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_I2C_MspInit+0x98>)
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	039b      	lsls	r3, r3, #14
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b00b      	add	sp, #44	@ 0x2c
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	40005400 	.word	0x40005400
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8001cfc <HAL_I2C_MspDeInit+0x48>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d115      	bne.n	8001cf2 <HAL_I2C_MspDeInit+0x3e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <HAL_I2C_MspDeInit+0x4c>)
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <HAL_I2C_MspDeInit+0x4c>)
 8001ccc:	490d      	ldr	r1, [pc, #52]	@ (8001d04 <HAL_I2C_MspDeInit+0x50>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	61da      	str	r2, [r3, #28]

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8001cd2:	2380      	movs	r3, #128	@ 0x80
 8001cd4:	009a      	lsls	r2, r3, #2
 8001cd6:	2390      	movs	r3, #144	@ 0x90
 8001cd8:	05db      	lsls	r3, r3, #23
 8001cda:	0011      	movs	r1, r2
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f001 fb67 	bl	80033b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	00da      	lsls	r2, r3, #3
 8001ce6:	2390      	movs	r3, #144	@ 0x90
 8001ce8:	05db      	lsls	r3, r3, #23
 8001cea:	0011      	movs	r1, r2
 8001cec:	0018      	movs	r0, r3
 8001cee:	f001 fb5f 	bl	80033b0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	40005400 	.word	0x40005400
 8001d00:	40021000 	.word	0x40021000
 8001d04:	ffdfffff 	.word	0xffdfffff

08001d08 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a09      	ldr	r2, [pc, #36]	@ (8001d3c <HAL_TIM_PWM_MspInit+0x34>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10b      	bne.n	8001d32 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_TIM_PWM_MspInit+0x38>)
 8001d1c:	69da      	ldr	r2, [r3, #28]
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_TIM_PWM_MspInit+0x38>)
 8001d20:	2102      	movs	r1, #2
 8001d22:	430a      	orrs	r2, r1
 8001d24:	61da      	str	r2, [r3, #28]
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_TIM_PWM_MspInit+0x38>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0e      	ldr	r2, [pc, #56]	@ (8001d8c <HAL_TIM_Base_MspInit+0x48>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d115      	bne.n	8001d82 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <HAL_TIM_Base_MspInit+0x4c>)
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_TIM_Base_MspInit+0x4c>)
 8001d5c:	2180      	movs	r1, #128	@ 0x80
 8001d5e:	0049      	lsls	r1, r1, #1
 8001d60:	430a      	orrs	r2, r1
 8001d62:	61da      	str	r2, [r3, #28]
 8001d64:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_TIM_Base_MspInit+0x4c>)
 8001d66:	69da      	ldr	r2, [r3, #28]
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2013      	movs	r0, #19
 8001d78:	f001 f980 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001d7c:	2013      	movs	r0, #19
 8001d7e:	f001 f992 	bl	80030a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b004      	add	sp, #16
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	40002000 	.word	0x40002000
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	240c      	movs	r4, #12
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	0018      	movs	r0, r3
 8001da2:	2314      	movs	r3, #20
 8001da4:	001a      	movs	r2, r3
 8001da6:	2100      	movs	r1, #0
 8001da8:	f004 fdca 	bl	8006940 <memset>
  if(htim->Instance==TIM3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a15      	ldr	r2, [pc, #84]	@ (8001e08 <HAL_TIM_MspPostInit+0x74>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d123      	bne.n	8001dfe <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_TIM_MspPostInit+0x78>)
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <HAL_TIM_MspPostInit+0x78>)
 8001dbc:	2180      	movs	r1, #128	@ 0x80
 8001dbe:	02c9      	lsls	r1, r1, #11
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	615a      	str	r2, [r3, #20]
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_TIM_MspPostInit+0x78>)
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	2380      	movs	r3, #128	@ 0x80
 8001dca:	02db      	lsls	r3, r3, #11
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dd2:	0021      	movs	r1, r4
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2202      	movs	r2, #2
 8001dde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	2201      	movs	r2, #1
 8001df0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <HAL_TIM_MspPostInit+0x7c>)
 8001df6:	0019      	movs	r1, r3
 8001df8:	0010      	movs	r0, r2
 8001dfa:	f001 f971 	bl	80030e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b009      	add	sp, #36	@ 0x24
 8001e04:	bd90      	pop	{r4, r7, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	48000400 	.word	0x48000400

08001e14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b08b      	sub	sp, #44	@ 0x2c
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	2414      	movs	r4, #20
 8001e1e:	193b      	adds	r3, r7, r4
 8001e20:	0018      	movs	r0, r3
 8001e22:	2314      	movs	r3, #20
 8001e24:	001a      	movs	r2, r3
 8001e26:	2100      	movs	r1, #0
 8001e28:	f004 fd8a 	bl	8006940 <memset>
  if(huart->Instance==USART2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d132      	bne.n	8001e9c <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e3c:	2180      	movs	r1, #128	@ 0x80
 8001e3e:	0289      	lsls	r1, r1, #10
 8001e40:	430a      	orrs	r2, r1
 8001e42:	61da      	str	r2, [r3, #28]
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	029b      	lsls	r3, r3, #10
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	0289      	lsls	r1, r1, #10
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	029b      	lsls	r3, r3, #10
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001e6e:	0021      	movs	r1, r4
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	4a0e      	ldr	r2, [pc, #56]	@ (8001eac <HAL_UART_MspInit+0x98>)
 8001e74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2202      	movs	r2, #2
 8001e7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	2203      	movs	r2, #3
 8001e86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	187a      	adds	r2, r7, r1
 8001e90:	2390      	movs	r3, #144	@ 0x90
 8001e92:	05db      	lsls	r3, r3, #23
 8001e94:	0011      	movs	r1, r2
 8001e96:	0018      	movs	r0, r3
 8001e98:	f001 f922 	bl	80030e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e9c:	46c0      	nop			@ (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b00b      	add	sp, #44	@ 0x2c
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	40004400 	.word	0x40004400
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	00008004 	.word	0x00008004

08001eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eb4:	46c0      	nop			@ (mov r8, r8)
 8001eb6:	e7fd      	b.n	8001eb4 <NMI_Handler+0x4>

08001eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	e7fd      	b.n	8001ebc <HardFault_Handler+0x4>

08001ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ec4:	46c0      	nop			@ (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed8:	f000 fb72 	bl	80025c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001edc:	46c0      	nop			@ (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f001 fb62 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001eec:	2002      	movs	r0, #2
 8001eee:	f001 fb5f 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <TIM14_IRQHandler+0x14>)
 8001efe:	0018      	movs	r0, r3
 8001f00:	f003 fc62 	bl	80057c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001f04:	46c0      	nop			@ (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	20000158 	.word	0x20000158

08001f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f18:	4a14      	ldr	r2, [pc, #80]	@ (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	18d3      	adds	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f40:	f004 fd06 	bl	8006950 <__errno>
 8001f44:	0003      	movs	r3, r0
 8001f46:	220c      	movs	r2, #12
 8001f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f56:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	18d2      	adds	r2, r2, r3
 8001f5e:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <_sbrk+0x64>)
 8001f60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b006      	add	sp, #24
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20001800 	.word	0x20001800
 8001f70:	00000400 	.word	0x00000400
 8001f74:	20000230 	.word	0x20000230
 8001f78:	20000790 	.word	0x20000790

08001f7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f88:	4813      	ldr	r0, [pc, #76]	@ (8001fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f8c:	f7ff fff6 	bl	8001f7c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001f90:	4812      	ldr	r0, [pc, #72]	@ (8001fdc <LoopForever+0x6>)
    LDR R1, [R0]
 8001f92:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001f94:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001f96:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <LoopForever+0xa>)
    CMP R1, R2
 8001f98:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001f9a:	d105      	bne.n	8001fa8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001f9c:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001f9e:	4912      	ldr	r1, [pc, #72]	@ (8001fe8 <LoopForever+0x12>)
    STR R1, [R0]
 8001fa0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001fa2:	4812      	ldr	r0, [pc, #72]	@ (8001fec <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001fa4:	4912      	ldr	r1, [pc, #72]	@ (8001ff0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001fa6:	6001      	str	r1, [r0, #0]

08001fa8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	4812      	ldr	r0, [pc, #72]	@ (8001ff4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001faa:	4913      	ldr	r1, [pc, #76]	@ (8001ff8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001fac:	4a13      	ldr	r2, [pc, #76]	@ (8001ffc <LoopForever+0x26>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001fc0:	4c10      	ldr	r4, [pc, #64]	@ (8002004 <LoopForever+0x2e>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fce:	f004 fcc5 	bl	800695c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fd2:	f7ff f8cb 	bl	800116c <main>

08001fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
  ldr   r0, =_estack
 8001fd8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001fdc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001fe0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001fe4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001fe8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001fec:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001ff0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ffc:	08007ae0 	.word	0x08007ae0
  ldr r2, =_sbss
 8002000:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002004:	20000790 	.word	0x20000790

08002008 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC1_IRQHandler>

0800200a <clear_oled>:

// oled screen object
static SSD1306_t SSD1306;


void clear_oled(void){
 800200a:	b580      	push	{r7, lr}
 800200c:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800200e:	2000      	movs	r0, #0
 8002010:	f000 f9a6 	bl	8002360 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8002014:	f000 f9be 	bl	8002394 <ssd1306_UpdateScreen>
}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <send_strXY>:




void send_strXY(char *str, uint8_t x, uint8_t y, uint8_t size){
 800201e:	b590      	push	{r4, r7, lr}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	000c      	movs	r4, r1
 8002028:	0010      	movs	r0, r2
 800202a:	0019      	movs	r1, r3
 800202c:	1cfb      	adds	r3, r7, #3
 800202e:	1c22      	adds	r2, r4, #0
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	1cbb      	adds	r3, r7, #2
 8002034:	1c02      	adds	r2, r0, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	1c7b      	adds	r3, r7, #1
 800203a:	1c0a      	adds	r2, r1, #0
 800203c:	701a      	strb	r2, [r3, #0]
	for(uint8_t index = 0; index < size; index++){
 800203e:	230f      	movs	r3, #15
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e015      	b.n	8002074 <send_strXY+0x56>
		send_charXY(str[index], index + x, y);
 8002048:	240f      	movs	r4, #15
 800204a:	193b      	adds	r3, r7, r4
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	18d3      	adds	r3, r2, r3
 8002052:	7818      	ldrb	r0, [r3, #0]
 8002054:	193a      	adds	r2, r7, r4
 8002056:	1cfb      	adds	r3, r7, #3
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	b2d9      	uxtb	r1, r3
 8002060:	1cbb      	adds	r3, r7, #2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	001a      	movs	r2, r3
 8002066:	f000 f813 	bl	8002090 <send_charXY>
	for(uint8_t index = 0; index < size; index++){
 800206a:	193b      	adds	r3, r7, r4
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	193b      	adds	r3, r7, r4
 8002070:	3201      	adds	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	230f      	movs	r3, #15
 8002076:	18fa      	adds	r2, r7, r3
 8002078:	1c7b      	adds	r3, r7, #1
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d3e2      	bcc.n	8002048 <send_strXY+0x2a>
	}
	ssd1306_UpdateScreen();
 8002082:	f000 f987 	bl	8002394 <ssd1306_UpdateScreen>
}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b005      	add	sp, #20
 800208c:	bd90      	pop	{r4, r7, pc}
	...

08002090 <send_charXY>:


char send_charXY(char ch, uint8_t x, uint8_t y){
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b08a      	sub	sp, #40	@ 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	0004      	movs	r4, r0
 8002098:	0008      	movs	r0, r1
 800209a:	0011      	movs	r1, r2
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	1c22      	adds	r2, r4, #0
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	1c02      	adds	r2, r0, #0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	1d7b      	adds	r3, r7, #5
 80020aa:	1c0a      	adds	r2, r1, #0
 80020ac:	701a      	strb	r2, [r3, #0]
	// internal helper function
	SSD1306_Font_t Font = Font_7x10;
 80020ae:	250c      	movs	r5, #12
 80020b0:	197b      	adds	r3, r7, r5
 80020b2:	4a56      	ldr	r2, [pc, #344]	@ (800220c <send_charXY+0x17c>)
 80020b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020b6:	c313      	stmia	r3!, {r0, r1, r4}
	SSD1306_COLOR color = 1;
 80020b8:	231f      	movs	r3, #31
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	SSD1306.CurrentX = x * Font.width;
 80020c0:	1dbb      	adds	r3, r7, #6
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	0029      	movs	r1, r5
 80020c8:	187a      	adds	r2, r7, r1
 80020ca:	7812      	ldrb	r2, [r2, #0]
 80020cc:	4353      	muls	r3, r2
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002210 <send_charXY+0x180>)
 80020d2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y * Font.height;
 80020d4:	1d7b      	adds	r3, r7, #5
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	187a      	adds	r2, r7, r1
 80020dc:	7852      	ldrb	r2, [r2, #1]
 80020de:	4353      	muls	r3, r2
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002210 <send_charXY+0x180>)
 80020e4:	805a      	strh	r2, [r3, #2]
	// Check if character is valid
	if (ch < 32 || ch > 126)
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b1f      	cmp	r3, #31
 80020ec:	d903      	bls.n	80020f6 <send_charXY+0x66>
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b7e      	cmp	r3, #126	@ 0x7e
 80020f4:	d901      	bls.n	80020fa <send_charXY+0x6a>
		return 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e083      	b.n	8002202 <send_charXY+0x172>
	// Char width is not equal to font width for proportional font
	const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80020fa:	220c      	movs	r2, #12
 80020fc:	18bb      	adds	r3, r7, r2
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <send_charXY+0x84>
 8002104:	18bb      	adds	r3, r7, r2
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3b20      	subs	r3, #32
 800210e:	18d3      	adds	r3, r2, r3
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	e002      	b.n	800211a <send_charXY+0x8a>
 8002114:	230c      	movs	r3, #12
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	211e      	movs	r1, #30
 800211c:	187a      	adds	r2, r7, r1
 800211e:	7013      	strb	r3, [r2, #0]
	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002120:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <send_charXY+0x180>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	001a      	movs	r2, r3
 8002126:	187b      	adds	r3, r7, r1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	2b80      	cmp	r3, #128	@ 0x80
 800212e:	dc08      	bgt.n	8002142 <send_charXY+0xb2>
		SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002130:	4b37      	ldr	r3, [pc, #220]	@ (8002210 <send_charXY+0x180>)
 8002132:	885b      	ldrh	r3, [r3, #2]
 8002134:	001a      	movs	r2, r3
 8002136:	230c      	movs	r3, #12
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	18d3      	adds	r3, r2, r3
	if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800213e:	2b40      	cmp	r3, #64	@ 0x40
 8002140:	dd01      	ble.n	8002146 <send_charXY+0xb6>
	{
		// Not enough space on current line
		return 0;
 8002142:	2300      	movs	r3, #0
 8002144:	e05d      	b.n	8002202 <send_charXY+0x172>
	}

	// Use the font to write
	for(i = 0; i < Font.height; i++) {
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
 800214a:	e051      	b.n	80021f0 <send_charXY+0x160>
		b = Font.data[(ch - 32) * Font.height + i];
 800214c:	210c      	movs	r1, #12
 800214e:	187b      	adds	r3, r7, r1
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	3b20      	subs	r3, #32
 8002158:	1879      	adds	r1, r7, r1
 800215a:	7849      	ldrb	r1, [r1, #1]
 800215c:	434b      	muls	r3, r1
 800215e:	0019      	movs	r1, r3
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	18cb      	adds	r3, r1, r3
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	18d3      	adds	r3, r2, r3
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	61bb      	str	r3, [r7, #24]
		for(j = 0; j < char_width; j++) {
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	e035      	b.n	80021de <send_charXY+0x14e>
			if((b << j) & 0x8000)  {
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	409a      	lsls	r2, r3
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	4013      	ands	r3, r2
 800217e:	d014      	beq.n	80021aa <send_charXY+0x11a>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002180:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <send_charXY+0x180>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	18d3      	adds	r3, r2, r3
 800218c:	b2d8      	uxtb	r0, r3
 800218e:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <send_charXY+0x180>)
 8002190:	885b      	ldrh	r3, [r3, #2]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	b2db      	uxtb	r3, r3
 8002198:	18d3      	adds	r3, r2, r3
 800219a:	b2d9      	uxtb	r1, r3
 800219c:	231f      	movs	r3, #31
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	001a      	movs	r2, r3
 80021a4:	f000 f924 	bl	80023f0 <ssd1306_DrawPixel>
 80021a8:	e016      	b.n	80021d8 <send_charXY+0x148>
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80021aa:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <send_charXY+0x180>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	18d3      	adds	r3, r2, r3
 80021b6:	b2d8      	uxtb	r0, r3
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <send_charXY+0x180>)
 80021ba:	885b      	ldrh	r3, [r3, #2]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	18d3      	adds	r3, r2, r3
 80021c4:	b2d9      	uxtb	r1, r3
 80021c6:	231f      	movs	r3, #31
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	425a      	negs	r2, r3
 80021ce:	4153      	adcs	r3, r2
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	001a      	movs	r2, r3
 80021d4:	f000 f90c 	bl	80023f0 <ssd1306_DrawPixel>
		for(j = 0; j < char_width; j++) {
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	3301      	adds	r3, #1
 80021dc:	623b      	str	r3, [r7, #32]
 80021de:	231e      	movs	r3, #30
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3c3      	bcc.n	8002172 <send_charXY+0xe2>
	for(i = 0; i < Font.height; i++) {
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	3301      	adds	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f0:	230c      	movs	r3, #12
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	001a      	movs	r2, r3
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d3a6      	bcc.n	800214c <send_charXY+0xbc>
			}
		}
	}
	return ch;
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b00a      	add	sp, #40	@ 0x28
 8002208:	bdb0      	pop	{r4, r5, r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	08007a78 	.word	0x08007a78
 8002210:	20000234 	.word	0x20000234

08002214 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af04      	add	r7, sp, #16
 8002226:	0002      	movs	r2, r0
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800222c:	4808      	ldr	r0, [pc, #32]	@ (8002250 <ssd1306_WriteCommand+0x30>)
 800222e:	2301      	movs	r3, #1
 8002230:	425b      	negs	r3, r3
 8002232:	9302      	str	r3, [sp, #8]
 8002234:	2301      	movs	r3, #1
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2301      	movs	r3, #1
 800223e:	2200      	movs	r2, #0
 8002240:	2178      	movs	r1, #120	@ 0x78
 8002242:	f001 fcd9 	bl	8003bf8 <HAL_I2C_Mem_Write>
}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	b002      	add	sp, #8
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	200000bc 	.word	0x200000bc

08002254 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af04      	add	r7, sp, #16
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4808      	ldr	r0, [pc, #32]	@ (8002284 <ssd1306_WriteData+0x30>)
 8002264:	2201      	movs	r2, #1
 8002266:	4252      	negs	r2, r2
 8002268:	9202      	str	r2, [sp, #8]
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	2240      	movs	r2, #64	@ 0x40
 8002274:	2178      	movs	r1, #120	@ 0x78
 8002276:	f001 fcbf 	bl	8003bf8 <HAL_I2C_Mem_Write>
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	200000bc 	.word	0x200000bc

08002288 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800228c:	f7ff ffc2 	bl	8002214 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002290:	2064      	movs	r0, #100	@ 0x64
 8002292:	f000 f9b1 	bl	80025f8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002296:	2000      	movs	r0, #0
 8002298:	f000 f924 	bl	80024e4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800229c:	2020      	movs	r0, #32
 800229e:	f7ff ffbf 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff ffbc 	bl	8002220 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022a8:	20b0      	movs	r0, #176	@ 0xb0
 80022aa:	f7ff ffb9 	bl	8002220 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80022ae:	20c8      	movs	r0, #200	@ 0xc8
 80022b0:	f7ff ffb6 	bl	8002220 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7ff ffb3 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80022ba:	2010      	movs	r0, #16
 80022bc:	f7ff ffb0 	bl	8002220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80022c0:	2040      	movs	r0, #64	@ 0x40
 80022c2:	f7ff ffad 	bl	8002220 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80022c6:	20ff      	movs	r0, #255	@ 0xff
 80022c8:	f000 f8f4 	bl	80024b4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80022cc:	20a1      	movs	r0, #161	@ 0xa1
 80022ce:	f7ff ffa7 	bl	8002220 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80022d2:	20a6      	movs	r0, #166	@ 0xa6
 80022d4:	f7ff ffa4 	bl	8002220 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80022d8:	20a8      	movs	r0, #168	@ 0xa8
 80022da:	f7ff ffa1 	bl	8002220 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80022de:	203f      	movs	r0, #63	@ 0x3f
 80022e0:	f7ff ff9e 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022e4:	20a4      	movs	r0, #164	@ 0xa4
 80022e6:	f7ff ff9b 	bl	8002220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80022ea:	20d3      	movs	r0, #211	@ 0xd3
 80022ec:	f7ff ff98 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff ff95 	bl	8002220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80022f6:	20d5      	movs	r0, #213	@ 0xd5
 80022f8:	f7ff ff92 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80022fc:	20f0      	movs	r0, #240	@ 0xf0
 80022fe:	f7ff ff8f 	bl	8002220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002302:	20d9      	movs	r0, #217	@ 0xd9
 8002304:	f7ff ff8c 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002308:	2022      	movs	r0, #34	@ 0x22
 800230a:	f7ff ff89 	bl	8002220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800230e:	20da      	movs	r0, #218	@ 0xda
 8002310:	f7ff ff86 	bl	8002220 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002314:	2012      	movs	r0, #18
 8002316:	f7ff ff83 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800231a:	20db      	movs	r0, #219	@ 0xdb
 800231c:	f7ff ff80 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002320:	2020      	movs	r0, #32
 8002322:	f7ff ff7d 	bl	8002220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002326:	208d      	movs	r0, #141	@ 0x8d
 8002328:	f7ff ff7a 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800232c:	2014      	movs	r0, #20
 800232e:	f7ff ff77 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002332:	2001      	movs	r0, #1
 8002334:	f000 f8d6 	bl	80024e4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002338:	2000      	movs	r0, #0
 800233a:	f000 f811 	bl	8002360 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800233e:	f000 f829 	bl	8002394 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <ssd1306_Init+0xd4>)
 8002344:	2200      	movs	r2, #0
 8002346:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <ssd1306_Init+0xd4>)
 800234a:	2200      	movs	r2, #0
 800234c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800234e:	4b03      	ldr	r3, [pc, #12]	@ (800235c <ssd1306_Init+0xd4>)
 8002350:	2201      	movs	r2, #1
 8002352:	711a      	strb	r2, [r3, #4]
}
 8002354:	46c0      	nop			@ (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	2000063c 	.word	0x2000063c

08002360 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	0002      	movs	r2, r0
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800236c:	1dfb      	adds	r3, r7, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <ssd1306_Fill+0x18>
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <ssd1306_Fill+0x1a>
 8002378:	23ff      	movs	r3, #255	@ 0xff
 800237a:	2280      	movs	r2, #128	@ 0x80
 800237c:	00d2      	lsls	r2, r2, #3
 800237e:	4804      	ldr	r0, [pc, #16]	@ (8002390 <ssd1306_Fill+0x30>)
 8002380:	0019      	movs	r1, r3
 8002382:	f004 fadd 	bl	8006940 <memset>
}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	2000023c 	.word	0x2000023c

08002394 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e01a      	b.n	80023d8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	3b50      	subs	r3, #80	@ 0x50
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	0018      	movs	r0, r3
 80023ac:	f7ff ff38 	bl	8002220 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80023b0:	2002      	movs	r0, #2
 80023b2:	f7ff ff35 	bl	8002220 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80023b6:	2010      	movs	r0, #16
 80023b8:	f7ff ff32 	bl	8002220 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	01da      	lsls	r2, r3, #7
 80023c2:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <ssd1306_UpdateScreen+0x58>)
 80023c4:	18d3      	adds	r3, r2, r3
 80023c6:	2180      	movs	r1, #128	@ 0x80
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff ff43 	bl	8002254 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	3201      	adds	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b07      	cmp	r3, #7
 80023de:	d9e0      	bls.n	80023a2 <ssd1306_UpdateScreen+0xe>
    }
}
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	2000023c 	.word	0x2000023c

080023f0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	0004      	movs	r4, r0
 80023f8:	0008      	movs	r0, r1
 80023fa:	0011      	movs	r1, r2
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	1c22      	adds	r2, r4, #0
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	1dbb      	adds	r3, r7, #6
 8002404:	1c02      	adds	r2, r0, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	1d7b      	adds	r3, r7, #5
 800240a:	1c0a      	adds	r2, r1, #0
 800240c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b25b      	sxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	db47      	blt.n	80024a8 <ssd1306_DrawPixel+0xb8>
 8002418:	1dbb      	adds	r3, r7, #6
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b3f      	cmp	r3, #63	@ 0x3f
 800241e:	d843      	bhi.n	80024a8 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002420:	1d7b      	adds	r3, r7, #5
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d11e      	bne.n	8002466 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002428:	1dfb      	adds	r3, r7, #7
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	1dbb      	adds	r3, r7, #6
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	b2d8      	uxtb	r0, r3
 8002434:	0003      	movs	r3, r0
 8002436:	01db      	lsls	r3, r3, #7
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <ssd1306_DrawPixel+0xc0>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	b25a      	sxtb	r2, r3
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2107      	movs	r1, #7
 8002446:	400b      	ands	r3, r1
 8002448:	2101      	movs	r1, #1
 800244a:	4099      	lsls	r1, r3
 800244c:	000b      	movs	r3, r1
 800244e:	b25b      	sxtb	r3, r3
 8002450:	4313      	orrs	r3, r2
 8002452:	b259      	sxtb	r1, r3
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	0003      	movs	r3, r0
 800245a:	01db      	lsls	r3, r3, #7
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	b2c9      	uxtb	r1, r1
 8002460:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <ssd1306_DrawPixel+0xc0>)
 8002462:	54d1      	strb	r1, [r2, r3]
 8002464:	e021      	b.n	80024aa <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	1dbb      	adds	r3, r7, #6
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	b2d8      	uxtb	r0, r3
 8002472:	0003      	movs	r3, r0
 8002474:	01db      	lsls	r3, r3, #7
 8002476:	18d3      	adds	r3, r2, r3
 8002478:	4a0d      	ldr	r2, [pc, #52]	@ (80024b0 <ssd1306_DrawPixel+0xc0>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	b25b      	sxtb	r3, r3
 800247e:	1dba      	adds	r2, r7, #6
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	2107      	movs	r1, #7
 8002484:	400a      	ands	r2, r1
 8002486:	2101      	movs	r1, #1
 8002488:	4091      	lsls	r1, r2
 800248a:	000a      	movs	r2, r1
 800248c:	b252      	sxtb	r2, r2
 800248e:	43d2      	mvns	r2, r2
 8002490:	b252      	sxtb	r2, r2
 8002492:	4013      	ands	r3, r2
 8002494:	b259      	sxtb	r1, r3
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	0003      	movs	r3, r0
 800249c:	01db      	lsls	r3, r3, #7
 800249e:	18d3      	adds	r3, r2, r3
 80024a0:	b2c9      	uxtb	r1, r1
 80024a2:	4a03      	ldr	r2, [pc, #12]	@ (80024b0 <ssd1306_DrawPixel+0xc0>)
 80024a4:	54d1      	strb	r1, [r2, r3]
 80024a6:	e000      	b.n	80024aa <ssd1306_DrawPixel+0xba>
        return;
 80024a8:	46c0      	nop			@ (mov r8, r8)
    }
}
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b003      	add	sp, #12
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	2000023c 	.word	0x2000023c

080024b4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	0002      	movs	r2, r0
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80024c0:	210f      	movs	r1, #15
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	2281      	movs	r2, #129	@ 0x81
 80024c6:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff fea7 	bl	8002220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f7ff fea2 	bl	8002220 <ssd1306_WriteCommand>
}
 80024dc:	46c0      	nop			@ (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b004      	add	sp, #16
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	0002      	movs	r2, r0
 80024ec:	1dfb      	adds	r3, r7, #7
 80024ee:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80024f8:	230f      	movs	r3, #15
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	22af      	movs	r2, #175	@ 0xaf
 80024fe:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8002500:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <ssd1306_SetDisplayOn+0x48>)
 8002502:	2201      	movs	r2, #1
 8002504:	715a      	strb	r2, [r3, #5]
 8002506:	e006      	b.n	8002516 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8002508:	230f      	movs	r3, #15
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	22ae      	movs	r2, #174	@ 0xae
 800250e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <ssd1306_SetDisplayOn+0x48>)
 8002512:	2200      	movs	r2, #0
 8002514:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002516:	230f      	movs	r3, #15
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff fe7f 	bl	8002220 <ssd1306_WriteCommand>
}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	2000063c 	.word	0x2000063c

08002530 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002534:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <HAL_Init+0x24>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_Init+0x24>)
 800253a:	2110      	movs	r1, #16
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002540:	2000      	movs	r0, #0
 8002542:	f000 f809 	bl	8002558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002546:	f7ff fafd 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	40022000 	.word	0x40022000

08002558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002560:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <HAL_InitTick+0x5c>)
 8002562:	681c      	ldr	r4, [r3, #0]
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <HAL_InitTick+0x60>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	0019      	movs	r1, r3
 800256a:	23fa      	movs	r3, #250	@ 0xfa
 800256c:	0098      	lsls	r0, r3, #2
 800256e:	f7fd fdd5 	bl	800011c <__udivsi3>
 8002572:	0003      	movs	r3, r0
 8002574:	0019      	movs	r1, r3
 8002576:	0020      	movs	r0, r4
 8002578:	f7fd fdd0 	bl	800011c <__udivsi3>
 800257c:	0003      	movs	r3, r0
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fda1 	bl	80030c6 <HAL_SYSTICK_Config>
 8002584:	1e03      	subs	r3, r0, #0
 8002586:	d001      	beq.n	800258c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e00f      	b.n	80025ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d80b      	bhi.n	80025aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	2301      	movs	r3, #1
 8002596:	425b      	negs	r3, r3
 8002598:	2200      	movs	r2, #0
 800259a:	0018      	movs	r0, r3
 800259c:	f000 fd6e 	bl	800307c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_InitTick+0x64>)
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b003      	add	sp, #12
 80025b2:	bd90      	pop	{r4, r7, pc}
 80025b4:	20000004 	.word	0x20000004
 80025b8:	2000000c 	.word	0x2000000c
 80025bc:	20000008 	.word	0x20000008

080025c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c4:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <HAL_IncTick+0x1c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	001a      	movs	r2, r3
 80025ca:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_IncTick+0x20>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	18d2      	adds	r2, r2, r3
 80025d0:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <HAL_IncTick+0x20>)
 80025d2:	601a      	str	r2, [r3, #0]
}
 80025d4:	46c0      	nop			@ (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	20000644 	.word	0x20000644

080025e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b02      	ldr	r3, [pc, #8]	@ (80025f4 <HAL_GetTick+0x10>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	20000644 	.word	0x20000644

080025f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff fff0 	bl	80025e4 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3301      	adds	r3, #1
 8002610:	d005      	beq.n	800261e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_Delay+0x44>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	001a      	movs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	189b      	adds	r3, r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	f7ff ffe0 	bl	80025e4 <HAL_GetTick>
 8002624:	0002      	movs	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	d8f7      	bhi.n	8002620 <HAL_Delay+0x28>
  {
  }
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b004      	add	sp, #16
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	2000000c 	.word	0x2000000c

08002640 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002648:	230f      	movs	r3, #15
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e125      	b.n	80028aa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2234      	movs	r2, #52	@ 0x34
 8002670:	2100      	movs	r1, #0
 8002672:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0018      	movs	r0, r3
 8002678:	f7ff fa88 	bl	8001b8c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	2210      	movs	r2, #16
 8002682:	4013      	ands	r3, r2
 8002684:	d000      	beq.n	8002688 <HAL_ADC_Init+0x48>
 8002686:	e103      	b.n	8002890 <HAL_ADC_Init+0x250>
 8002688:	230f      	movs	r3, #15
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d000      	beq.n	8002694 <HAL_ADC_Init+0x54>
 8002692:	e0fd      	b.n	8002890 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2204      	movs	r2, #4
 800269c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800269e:	d000      	beq.n	80026a2 <HAL_ADC_Init+0x62>
 80026a0:	e0f6      	b.n	8002890 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a6:	4a83      	ldr	r2, [pc, #524]	@ (80028b4 <HAL_ADC_Init+0x274>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	2202      	movs	r2, #2
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2203      	movs	r2, #3
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d112      	bne.n	80026e6 <HAL_ADC_Init+0xa6>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d009      	beq.n	80026e2 <HAL_ADC_Init+0xa2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	401a      	ands	r2, r3
 80026da:	2380      	movs	r3, #128	@ 0x80
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	429a      	cmp	r2, r3
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_Init+0xa6>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_ADC_Init+0xa8>
 80026e6:	2300      	movs	r3, #0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d116      	bne.n	800271a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2218      	movs	r2, #24
 80026f4:	4393      	bics	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	0899      	lsrs	r1, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4964      	ldr	r1, [pc, #400]	@ (80028b8 <HAL_ADC_Init+0x278>)
 8002726:	400a      	ands	r2, r1
 8002728:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7e1b      	ldrb	r3, [r3, #24]
 800272e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7e5b      	ldrb	r3, [r3, #25]
 8002734:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002736:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7e9b      	ldrb	r3, [r3, #26]
 800273c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800273e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	2b01      	cmp	r3, #1
 8002746:	d002      	beq.n	800274e <HAL_ADC_Init+0x10e>
 8002748:	2380      	movs	r3, #128	@ 0x80
 800274a:	015b      	lsls	r3, r3, #5
 800274c:	e000      	b.n	8002750 <HAL_ADC_Init+0x110>
 800274e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002750:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002756:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d101      	bne.n	8002764 <HAL_ADC_Init+0x124>
 8002760:	2304      	movs	r3, #4
 8002762:	e000      	b.n	8002766 <HAL_ADC_Init+0x126>
 8002764:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002766:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2124      	movs	r1, #36	@ 0x24
 800276c:	5c5b      	ldrb	r3, [r3, r1]
 800276e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002770:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	4313      	orrs	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7edb      	ldrb	r3, [r3, #27]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d115      	bne.n	80027ac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7e9b      	ldrb	r3, [r3, #26]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0252      	lsls	r2, r2, #9
 800278e:	4313      	orrs	r3, r2
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	e00b      	b.n	80027ac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002798:	2220      	movs	r2, #32
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a4:	2201      	movs	r2, #1
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	23c2      	movs	r3, #194	@ 0xc2
 80027b2:	33ff      	adds	r3, #255	@ 0xff
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d007      	beq.n	80027c8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68d9      	ldr	r1, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	055b      	lsls	r3, r3, #21
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d01b      	beq.n	800281c <HAL_ADC_Init+0x1dc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d017      	beq.n	800281c <HAL_ADC_Init+0x1dc>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d013      	beq.n	800281c <HAL_ADC_Init+0x1dc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d00f      	beq.n	800281c <HAL_ADC_Init+0x1dc>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	2b04      	cmp	r3, #4
 8002802:	d00b      	beq.n	800281c <HAL_ADC_Init+0x1dc>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	2b05      	cmp	r3, #5
 800280a:	d007      	beq.n	800281c <HAL_ADC_Init+0x1dc>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	2b06      	cmp	r3, #6
 8002812:	d003      	beq.n	800281c <HAL_ADC_Init+0x1dc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	2b07      	cmp	r3, #7
 800281a:	d112      	bne.n	8002842 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2107      	movs	r1, #7
 8002828:	438a      	bics	r2, r1
 800282a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6959      	ldr	r1, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002836:	2207      	movs	r2, #7
 8002838:	401a      	ands	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a1c      	ldr	r2, [pc, #112]	@ (80028bc <HAL_ADC_Init+0x27c>)
 800284a:	4013      	ands	r3, r2
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	d10b      	bne.n	800286a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285c:	2203      	movs	r2, #3
 800285e:	4393      	bics	r3, r2
 8002860:	2201      	movs	r2, #1
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002868:	e01c      	b.n	80028a4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286e:	2212      	movs	r2, #18
 8002870:	4393      	bics	r3, r2
 8002872:	2210      	movs	r2, #16
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287e:	2201      	movs	r2, #1
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002886:	230f      	movs	r3, #15
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800288e:	e009      	b.n	80028a4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002894:	2210      	movs	r2, #16
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800289c:	230f      	movs	r3, #15
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028a4:	230f      	movs	r3, #15
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	781b      	ldrb	r3, [r3, #0]
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	fffffefd 	.word	0xfffffefd
 80028b8:	fffe0219 	.word	0xfffe0219
 80028bc:	833fffe7 	.word	0x833fffe7

080028c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c8:	230f      	movs	r3, #15
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2204      	movs	r2, #4
 80028d8:	4013      	ands	r3, r2
 80028da:	d138      	bne.n	800294e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2234      	movs	r2, #52	@ 0x34
 80028e0:	5c9b      	ldrb	r3, [r3, r2]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Start+0x2a>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e038      	b.n	800295c <HAL_ADC_Start+0x9c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2234      	movs	r2, #52	@ 0x34
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	7e5b      	ldrb	r3, [r3, #25]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d007      	beq.n	800290a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80028fa:	230f      	movs	r3, #15
 80028fc:	18fc      	adds	r4, r7, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	0018      	movs	r0, r3
 8002902:	f000 f9e3 	bl	8002ccc <ADC_Enable>
 8002906:	0003      	movs	r3, r0
 8002908:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800290a:	230f      	movs	r3, #15
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d120      	bne.n	8002956 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	4a12      	ldr	r2, [pc, #72]	@ (8002964 <HAL_ADC_Start+0xa4>)
 800291a:	4013      	ands	r3, r2
 800291c:	2280      	movs	r2, #128	@ 0x80
 800291e:	0052      	lsls	r2, r2, #1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2234      	movs	r2, #52	@ 0x34
 8002930:	2100      	movs	r1, #0
 8002932:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	221c      	movs	r2, #28
 800293a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2104      	movs	r1, #4
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e003      	b.n	8002956 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800294e:	230f      	movs	r3, #15
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	2202      	movs	r2, #2
 8002954:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002956:	230f      	movs	r3, #15
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b005      	add	sp, #20
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	fffff0fe 	.word	0xfffff0fe

08002968 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d102      	bne.n	8002980 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800297a:	2308      	movs	r3, #8
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e014      	b.n	80029aa <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	4013      	ands	r3, r2
 800298a:	2b01      	cmp	r3, #1
 800298c:	d10b      	bne.n	80029a6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002992:	2220      	movs	r2, #32
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2234      	movs	r2, #52	@ 0x34
 800299e:	2100      	movs	r1, #0
 80029a0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e071      	b.n	8002a8a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80029a6:	230c      	movs	r3, #12
 80029a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80029aa:	f7ff fe1b 	bl	80025e4 <HAL_GetTick>
 80029ae:	0003      	movs	r3, r0
 80029b0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80029b2:	e01f      	b.n	80029f4 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	d01c      	beq.n	80029f4 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_ADC_PollForConversion+0x68>
 80029c0:	f7ff fe10 	bl	80025e4 <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d211      	bcs.n	80029f4 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	d10b      	bne.n	80029f4 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	2204      	movs	r2, #4
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2234      	movs	r2, #52	@ 0x34
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e04a      	b.n	8002a8a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	d0d9      	beq.n	80029b4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a04:	2280      	movs	r2, #128	@ 0x80
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	23c0      	movs	r3, #192	@ 0xc0
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d12d      	bne.n	8002a78 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d129      	bne.n	8002a78 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d122      	bne.n	8002a78 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2204      	movs	r2, #4
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d110      	bne.n	8002a60 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	210c      	movs	r1, #12
 8002a4a:	438a      	bics	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	4a10      	ldr	r2, [pc, #64]	@ (8002a94 <HAL_ADC_PollForConversion+0x12c>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	2201      	movs	r2, #1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a5e:	e00b      	b.n	8002a78 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a64:	2220      	movs	r2, #32
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	2201      	movs	r2, #1
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7e1b      	ldrb	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	220c      	movs	r2, #12
 8002a86:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	fffffefe 	.word	0xfffffefe

08002a98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aba:	230f      	movs	r3, #15
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	055b      	lsls	r3, r3, #21
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d011      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x46>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d00d      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x46>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d009      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x46>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d005      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x46>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d001      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x46>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2234      	movs	r2, #52	@ 0x34
 8002afa:	5c9b      	ldrb	r3, [r3, r2]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x54>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e0d0      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x1f6>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2234      	movs	r2, #52	@ 0x34
 8002b08:	2101      	movs	r1, #1
 8002b0a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2204      	movs	r2, #4
 8002b14:	4013      	ands	r3, r2
 8002b16:	d000      	beq.n	8002b1a <HAL_ADC_ConfigChannel+0x6a>
 8002b18:	e0b4      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a64      	ldr	r2, [pc, #400]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x200>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x76>
 8002b24:	e082      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	409a      	lsls	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b40:	2380      	movs	r3, #128	@ 0x80
 8002b42:	055b      	lsls	r3, r3, #21
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d037      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d033      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x108>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d02f      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x108>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d02b      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x108>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d027      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x108>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d023      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x108>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	d01f      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x108>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	2b07      	cmp	r3, #7
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	2107      	movs	r1, #7
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d012      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2107      	movs	r1, #7
 8002b9e:	438a      	bics	r2, r1
 8002ba0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6959      	ldr	r1, [r3, #20]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2207      	movs	r2, #7
 8002bae:	401a      	ands	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d007      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x120>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b11      	cmp	r3, #17
 8002bc6:	d003      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x120>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b12      	cmp	r3, #18
 8002bce:	d163      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002bd0:	4b38      	ldr	r3, [pc, #224]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x204>)
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d009      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0x140>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b11      	cmp	r3, #17
 8002be2:	d102      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x13a>
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	03db      	lsls	r3, r3, #15
 8002be8:	e004      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x144>
 8002bea:	2380      	movs	r3, #128	@ 0x80
 8002bec:	045b      	lsls	r3, r3, #17
 8002bee:	e001      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x144>
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	041b      	lsls	r3, r3, #16
 8002bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x204>)
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d14a      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c02:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x208>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	492d      	ldr	r1, [pc, #180]	@ (8002cbc <HAL_ADC_ConfigChannel+0x20c>)
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7fd fa87 	bl	800011c <__udivsi3>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	001a      	movs	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c1c:	e002      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f9      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x16e>
 8002c2a:	e035      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	4099      	lsls	r1, r3
 8002c3a:	000b      	movs	r3, r1
 8002c3c:	43d9      	mvns	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	400a      	ands	r2, r1
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d007      	beq.n	8002c5e <HAL_ADC_ConfigChannel+0x1ae>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b11      	cmp	r3, #17
 8002c54:	d003      	beq.n	8002c5e <HAL_ADC_ConfigChannel+0x1ae>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b12      	cmp	r3, #18
 8002c5c:	d11c      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x204>)
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d007      	beq.n	8002c7a <HAL_ADC_ConfigChannel+0x1ca>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b11      	cmp	r3, #17
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x1c6>
 8002c72:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x210>)
 8002c74:	e002      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x1cc>
 8002c76:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x214>)
 8002c78:	e000      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x1cc>
 8002c7a:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x218>)
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x204>)
 8002c7e:	400b      	ands	r3, r1
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e009      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	2220      	movs	r2, #32
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002c90:	230f      	movs	r3, #15
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2234      	movs	r2, #52	@ 0x34
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	781b      	ldrb	r3, [r3, #0]
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	00001001 	.word	0x00001001
 8002cb4:	40012708 	.word	0x40012708
 8002cb8:	20000004 	.word	0x20000004
 8002cbc:	000f4240 	.word	0x000f4240
 8002cc0:	ffbfffff 	.word	0xffbfffff
 8002cc4:	feffffff 	.word	0xfeffffff
 8002cc8:	ff7fffff 	.word	0xff7fffff

08002ccc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d112      	bne.n	8002d10 <ADC_Enable+0x44>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d009      	beq.n	8002d0c <ADC_Enable+0x40>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	2380      	movs	r3, #128	@ 0x80
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	401a      	ands	r2, r3
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d101      	bne.n	8002d10 <ADC_Enable+0x44>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <ADC_Enable+0x46>
 8002d10:	2300      	movs	r3, #0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d152      	bne.n	8002dbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc8 <ADC_Enable+0xfc>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	2210      	movs	r2, #16
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d32:	2201      	movs	r2, #1
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e03f      	b.n	8002dbe <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dcc <ADC_Enable+0x100>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	491f      	ldr	r1, [pc, #124]	@ (8002dd0 <ADC_Enable+0x104>)
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fd f9e1 	bl	800011c <__udivsi3>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d5e:	e002      	b.n	8002d66 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f9      	bne.n	8002d60 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d6c:	f7ff fc3a 	bl	80025e4 <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d74:	e01b      	b.n	8002dae <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d76:	f7ff fc35 	bl	80025e4 <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d914      	bls.n	8002dae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d00d      	beq.n	8002dae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	2210      	movs	r2, #16
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da2:	2201      	movs	r2, #1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e007      	b.n	8002dbe <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d1dc      	bne.n	8002d76 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	80000017 	.word	0x80000017
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	000f4240 	.word	0x000f4240

08002dd4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ddc:	2317      	movs	r3, #23
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2234      	movs	r2, #52	@ 0x34
 8002df0:	5c9b      	ldrb	r3, [r3, r2]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADCEx_Calibration_Start+0x26>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e08d      	b.n	8002f16 <HAL_ADCEx_Calibration_Start+0x142>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2234      	movs	r2, #52	@ 0x34
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d112      	bne.n	8002e36 <HAL_ADCEx_Calibration_Start+0x62>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d009      	beq.n	8002e32 <HAL_ADCEx_Calibration_Start+0x5e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	401a      	ands	r2, r3
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d101      	bne.n	8002e36 <HAL_ADCEx_Calibration_Start+0x62>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_ADCEx_Calibration_Start+0x64>
 8002e36:	2300      	movs	r3, #0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d15b      	bne.n	8002ef4 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e40:	4a37      	ldr	r2, [pc, #220]	@ (8002f20 <HAL_ADCEx_Calibration_Start+0x14c>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	2202      	movs	r2, #2
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2203      	movs	r2, #3
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2103      	movs	r1, #3
 8002e64:	438a      	bics	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2180      	movs	r1, #128	@ 0x80
 8002e74:	0609      	lsls	r1, r1, #24
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002e7a:	f7ff fbb3 	bl	80025e4 <HAL_GetTick>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002e82:	e01d      	b.n	8002ec0 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e84:	f7ff fbae 	bl	80025e4 <HAL_GetTick>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d916      	bls.n	8002ec0 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	0fdb      	lsrs	r3, r3, #31
 8002e9a:	07da      	lsls	r2, r3, #31
 8002e9c:	2380      	movs	r3, #128	@ 0x80
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea8:	2212      	movs	r2, #18
 8002eaa:	4393      	bics	r3, r2
 8002eac:	2210      	movs	r2, #16
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2234      	movs	r2, #52	@ 0x34
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e02a      	b.n	8002f16 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0fdb      	lsrs	r3, r3, #31
 8002ec8:	07da      	lsls	r2, r3, #31
 8002eca:	2380      	movs	r3, #128	@ 0x80
 8002ecc:	061b      	lsls	r3, r3, #24
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d0d8      	beq.n	8002e84 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68d9      	ldr	r1, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	4393      	bics	r3, r2
 8002eea:	2201      	movs	r2, #1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ef2:	e009      	b.n	8002f08 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef8:	2220      	movs	r2, #32
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002f00:	2317      	movs	r3, #23
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2234      	movs	r2, #52	@ 0x34
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002f10:	2317      	movs	r3, #23
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	781b      	ldrb	r3, [r3, #0]
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b006      	add	sp, #24
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	fffffefd 	.word	0xfffffefd

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	1dfb      	adds	r3, r7, #7
 8002f2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f36:	d809      	bhi.n	8002f4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f38:	1dfb      	adds	r3, r7, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	231f      	movs	r3, #31
 8002f40:	401a      	ands	r2, r3
 8002f42:	4b04      	ldr	r3, [pc, #16]	@ (8002f54 <__NVIC_EnableIRQ+0x30>)
 8002f44:	2101      	movs	r1, #1
 8002f46:	4091      	lsls	r1, r2
 8002f48:	000a      	movs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
  }
}
 8002f4c:	46c0      	nop			@ (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	0002      	movs	r2, r0
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	1dfb      	adds	r3, r7, #7
 8002f64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f6c:	d828      	bhi.n	8002fc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800302c <__NVIC_SetPriority+0xd4>)
 8002f70:	1dfb      	adds	r3, r7, #7
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	33c0      	adds	r3, #192	@ 0xc0
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	589b      	ldr	r3, [r3, r2]
 8002f7e:	1dfa      	adds	r2, r7, #7
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	0011      	movs	r1, r2
 8002f84:	2203      	movs	r2, #3
 8002f86:	400a      	ands	r2, r1
 8002f88:	00d2      	lsls	r2, r2, #3
 8002f8a:	21ff      	movs	r1, #255	@ 0xff
 8002f8c:	4091      	lsls	r1, r2
 8002f8e:	000a      	movs	r2, r1
 8002f90:	43d2      	mvns	r2, r2
 8002f92:	401a      	ands	r2, r3
 8002f94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	22ff      	movs	r2, #255	@ 0xff
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	1dfb      	adds	r3, r7, #7
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	4003      	ands	r3, r0
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fac:	481f      	ldr	r0, [pc, #124]	@ (800302c <__NVIC_SetPriority+0xd4>)
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b25b      	sxtb	r3, r3
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	33c0      	adds	r3, #192	@ 0xc0
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fbe:	e031      	b.n	8003024 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <__NVIC_SetPriority+0xd8>)
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	230f      	movs	r3, #15
 8002fca:	400b      	ands	r3, r1
 8002fcc:	3b08      	subs	r3, #8
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3306      	adds	r3, #6
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	18d3      	adds	r3, r2, r3
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	1dfa      	adds	r2, r7, #7
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	0011      	movs	r1, r2
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	00d2      	lsls	r2, r2, #3
 8002fe6:	21ff      	movs	r1, #255	@ 0xff
 8002fe8:	4091      	lsls	r1, r2
 8002fea:	000a      	movs	r2, r1
 8002fec:	43d2      	mvns	r2, r2
 8002fee:	401a      	ands	r2, r3
 8002ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	019b      	lsls	r3, r3, #6
 8002ff6:	22ff      	movs	r2, #255	@ 0xff
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	0018      	movs	r0, r3
 8003000:	2303      	movs	r3, #3
 8003002:	4003      	ands	r3, r0
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003008:	4809      	ldr	r0, [pc, #36]	@ (8003030 <__NVIC_SetPriority+0xd8>)
 800300a:	1dfb      	adds	r3, r7, #7
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	001c      	movs	r4, r3
 8003010:	230f      	movs	r3, #15
 8003012:	4023      	ands	r3, r4
 8003014:	3b08      	subs	r3, #8
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	430a      	orrs	r2, r1
 800301a:	3306      	adds	r3, #6
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	18c3      	adds	r3, r0, r3
 8003020:	3304      	adds	r3, #4
 8003022:	601a      	str	r2, [r3, #0]
}
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b003      	add	sp, #12
 800302a:	bd90      	pop	{r4, r7, pc}
 800302c:	e000e100 	.word	0xe000e100
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1e5a      	subs	r2, r3, #1
 8003040:	2380      	movs	r3, #128	@ 0x80
 8003042:	045b      	lsls	r3, r3, #17
 8003044:	429a      	cmp	r2, r3
 8003046:	d301      	bcc.n	800304c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003048:	2301      	movs	r3, #1
 800304a:	e010      	b.n	800306e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304c:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <SysTick_Config+0x44>)
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	3a01      	subs	r2, #1
 8003052:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003054:	2301      	movs	r3, #1
 8003056:	425b      	negs	r3, r3
 8003058:	2103      	movs	r1, #3
 800305a:	0018      	movs	r0, r3
 800305c:	f7ff ff7c 	bl	8002f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <SysTick_Config+0x44>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003066:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <SysTick_Config+0x44>)
 8003068:	2207      	movs	r2, #7
 800306a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800306c:	2300      	movs	r3, #0
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	b002      	add	sp, #8
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	e000e010 	.word	0xe000e010

0800307c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	210f      	movs	r1, #15
 8003088:	187b      	adds	r3, r7, r1
 800308a:	1c02      	adds	r2, r0, #0
 800308c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	187b      	adds	r3, r7, r1
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b25b      	sxtb	r3, r3
 8003096:	0011      	movs	r1, r2
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff ff5d 	bl	8002f58 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	0002      	movs	r2, r0
 80030ae:	1dfb      	adds	r3, r7, #7
 80030b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b2:	1dfb      	adds	r3, r7, #7
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b25b      	sxtb	r3, r3
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff ff33 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b002      	add	sp, #8
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff ffaf 	bl	8003034 <SysTick_Config>
 80030d6:	0003      	movs	r3, r0
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ee:	e149      	b.n	8003384 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2101      	movs	r1, #1
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4091      	lsls	r1, r2
 80030fa:	000a      	movs	r2, r1
 80030fc:	4013      	ands	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d100      	bne.n	8003108 <HAL_GPIO_Init+0x28>
 8003106:	e13a      	b.n	800337e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2203      	movs	r2, #3
 800310e:	4013      	ands	r3, r2
 8003110:	2b01      	cmp	r3, #1
 8003112:	d005      	beq.n	8003120 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2203      	movs	r2, #3
 800311a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800311c:	2b02      	cmp	r3, #2
 800311e:	d130      	bne.n	8003182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	409a      	lsls	r2, r3
 800312e:	0013      	movs	r3, r2
 8003130:	43da      	mvns	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	409a      	lsls	r2, r3
 8003142:	0013      	movs	r3, r2
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003156:	2201      	movs	r2, #1
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
 800315c:	0013      	movs	r3, r2
 800315e:	43da      	mvns	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	2201      	movs	r2, #1
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
 8003174:	0013      	movs	r3, r2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2203      	movs	r2, #3
 8003188:	4013      	ands	r3, r2
 800318a:	2b03      	cmp	r3, #3
 800318c:	d017      	beq.n	80031be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	409a      	lsls	r2, r3
 800319c:	0013      	movs	r3, r2
 800319e:	43da      	mvns	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	409a      	lsls	r2, r3
 80031b0:	0013      	movs	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2203      	movs	r2, #3
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d123      	bne.n	8003212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	08da      	lsrs	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3208      	adds	r2, #8
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	58d3      	ldr	r3, [r2, r3]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2207      	movs	r2, #7
 80031dc:	4013      	ands	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	220f      	movs	r2, #15
 80031e2:	409a      	lsls	r2, r3
 80031e4:	0013      	movs	r3, r2
 80031e6:	43da      	mvns	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2107      	movs	r1, #7
 80031f6:	400b      	ands	r3, r1
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	409a      	lsls	r2, r3
 80031fc:	0013      	movs	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	08da      	lsrs	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3208      	adds	r2, #8
 800320c:	0092      	lsls	r2, r2, #2
 800320e:	6939      	ldr	r1, [r7, #16]
 8003210:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	43da      	mvns	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2203      	movs	r2, #3
 8003230:	401a      	ands	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	409a      	lsls	r2, r3
 8003238:	0013      	movs	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	23c0      	movs	r3, #192	@ 0xc0
 800324c:	029b      	lsls	r3, r3, #10
 800324e:	4013      	ands	r3, r2
 8003250:	d100      	bne.n	8003254 <HAL_GPIO_Init+0x174>
 8003252:	e094      	b.n	800337e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003254:	4b51      	ldr	r3, [pc, #324]	@ (800339c <HAL_GPIO_Init+0x2bc>)
 8003256:	699a      	ldr	r2, [r3, #24]
 8003258:	4b50      	ldr	r3, [pc, #320]	@ (800339c <HAL_GPIO_Init+0x2bc>)
 800325a:	2101      	movs	r1, #1
 800325c:	430a      	orrs	r2, r1
 800325e:	619a      	str	r2, [r3, #24]
 8003260:	4b4e      	ldr	r3, [pc, #312]	@ (800339c <HAL_GPIO_Init+0x2bc>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2201      	movs	r2, #1
 8003266:	4013      	ands	r3, r2
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800326c:	4a4c      	ldr	r2, [pc, #304]	@ (80033a0 <HAL_GPIO_Init+0x2c0>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3302      	adds	r3, #2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	589b      	ldr	r3, [r3, r2]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2203      	movs	r2, #3
 800327e:	4013      	ands	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	409a      	lsls	r2, r3
 8003286:	0013      	movs	r3, r2
 8003288:	43da      	mvns	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	2390      	movs	r3, #144	@ 0x90
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	429a      	cmp	r2, r3
 8003298:	d00d      	beq.n	80032b6 <HAL_GPIO_Init+0x1d6>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a41      	ldr	r2, [pc, #260]	@ (80033a4 <HAL_GPIO_Init+0x2c4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <HAL_GPIO_Init+0x1d2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a40      	ldr	r2, [pc, #256]	@ (80033a8 <HAL_GPIO_Init+0x2c8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_GPIO_Init+0x1ce>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e004      	b.n	80032b8 <HAL_GPIO_Init+0x1d8>
 80032ae:	2305      	movs	r3, #5
 80032b0:	e002      	b.n	80032b8 <HAL_GPIO_Init+0x1d8>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_GPIO_Init+0x1d8>
 80032b6:	2300      	movs	r3, #0
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	2103      	movs	r1, #3
 80032bc:	400a      	ands	r2, r1
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	4093      	lsls	r3, r2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032c8:	4935      	ldr	r1, [pc, #212]	@ (80033a0 <HAL_GPIO_Init+0x2c0>)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d6:	4b35      	ldr	r3, [pc, #212]	@ (80033ac <HAL_GPIO_Init+0x2cc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43da      	mvns	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	035b      	lsls	r3, r3, #13
 80032ee:	4013      	ands	r3, r2
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032fa:	4b2c      	ldr	r3, [pc, #176]	@ (80033ac <HAL_GPIO_Init+0x2cc>)
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003300:	4b2a      	ldr	r3, [pc, #168]	@ (80033ac <HAL_GPIO_Init+0x2cc>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43da      	mvns	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	039b      	lsls	r3, r3, #14
 8003318:	4013      	ands	r3, r2
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003324:	4b21      	ldr	r3, [pc, #132]	@ (80033ac <HAL_GPIO_Init+0x2cc>)
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_GPIO_Init+0x2cc>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43da      	mvns	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	4013      	ands	r3, r2
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800334e:	4b17      	ldr	r3, [pc, #92]	@ (80033ac <HAL_GPIO_Init+0x2cc>)
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003354:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <HAL_GPIO_Init+0x2cc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43da      	mvns	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	2380      	movs	r3, #128	@ 0x80
 800336a:	025b      	lsls	r3, r3, #9
 800336c:	4013      	ands	r3, r2
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003378:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <HAL_GPIO_Init+0x2cc>)
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	3301      	adds	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	40da      	lsrs	r2, r3
 800338c:	1e13      	subs	r3, r2, #0
 800338e:	d000      	beq.n	8003392 <HAL_GPIO_Init+0x2b2>
 8003390:	e6ae      	b.n	80030f0 <HAL_GPIO_Init+0x10>
  } 
}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b006      	add	sp, #24
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	40010000 	.word	0x40010000
 80033a4:	48000400 	.word	0x48000400
 80033a8:	48000800 	.word	0x48000800
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80033be:	e0ab      	b.n	8003518 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80033c0:	2201      	movs	r2, #1
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	409a      	lsls	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d100      	bne.n	80033d4 <HAL_GPIO_DeInit+0x24>
 80033d2:	e09e      	b.n	8003512 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80033d4:	4a56      	ldr	r2, [pc, #344]	@ (8003530 <HAL_GPIO_DeInit+0x180>)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3302      	adds	r3, #2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	589b      	ldr	r3, [r3, r2]
 80033e0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2203      	movs	r2, #3
 80033e6:	4013      	ands	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	409a      	lsls	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4013      	ands	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	2390      	movs	r3, #144	@ 0x90
 80033f8:	05db      	lsls	r3, r3, #23
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d00d      	beq.n	800341a <HAL_GPIO_DeInit+0x6a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4c      	ldr	r2, [pc, #304]	@ (8003534 <HAL_GPIO_DeInit+0x184>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_DeInit+0x66>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4b      	ldr	r2, [pc, #300]	@ (8003538 <HAL_GPIO_DeInit+0x188>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_GPIO_DeInit+0x62>
 800340e:	2302      	movs	r3, #2
 8003410:	e004      	b.n	800341c <HAL_GPIO_DeInit+0x6c>
 8003412:	2305      	movs	r3, #5
 8003414:	e002      	b.n	800341c <HAL_GPIO_DeInit+0x6c>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_GPIO_DeInit+0x6c>
 800341a:	2300      	movs	r3, #0
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	2103      	movs	r1, #3
 8003420:	400a      	ands	r2, r1
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	4093      	lsls	r3, r2
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d132      	bne.n	8003492 <HAL_GPIO_DeInit+0xe2>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800342c:	4b43      	ldr	r3, [pc, #268]	@ (800353c <HAL_GPIO_DeInit+0x18c>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43d9      	mvns	r1, r3
 8003434:	4b41      	ldr	r3, [pc, #260]	@ (800353c <HAL_GPIO_DeInit+0x18c>)
 8003436:	400a      	ands	r2, r1
 8003438:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800343a:	4b40      	ldr	r3, [pc, #256]	@ (800353c <HAL_GPIO_DeInit+0x18c>)
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43d9      	mvns	r1, r3
 8003442:	4b3e      	ldr	r3, [pc, #248]	@ (800353c <HAL_GPIO_DeInit+0x18c>)
 8003444:	400a      	ands	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003448:	4b3c      	ldr	r3, [pc, #240]	@ (800353c <HAL_GPIO_DeInit+0x18c>)
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43d9      	mvns	r1, r3
 8003450:	4b3a      	ldr	r3, [pc, #232]	@ (800353c <HAL_GPIO_DeInit+0x18c>)
 8003452:	400a      	ands	r2, r1
 8003454:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003456:	4b39      	ldr	r3, [pc, #228]	@ (800353c <HAL_GPIO_DeInit+0x18c>)
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	43d9      	mvns	r1, r3
 800345e:	4b37      	ldr	r3, [pc, #220]	@ (800353c <HAL_GPIO_DeInit+0x18c>)
 8003460:	400a      	ands	r2, r1
 8003462:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2203      	movs	r2, #3
 8003468:	4013      	ands	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	409a      	lsls	r2, r3
 8003470:	0013      	movs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003474:	4a2e      	ldr	r2, [pc, #184]	@ (8003530 <HAL_GPIO_DeInit+0x180>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	589a      	ldr	r2, [r3, r2]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	43d9      	mvns	r1, r3
 8003484:	482a      	ldr	r0, [pc, #168]	@ (8003530 <HAL_GPIO_DeInit+0x180>)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	400a      	ands	r2, r1
 800348c:	3302      	adds	r3, #2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	0052      	lsls	r2, r2, #1
 800349a:	2103      	movs	r1, #3
 800349c:	4091      	lsls	r1, r2
 800349e:	000a      	movs	r2, r1
 80034a0:	43d2      	mvns	r2, r2
 80034a2:	401a      	ands	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	08da      	lsrs	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3208      	adds	r2, #8
 80034b0:	0092      	lsls	r2, r2, #2
 80034b2:	58d3      	ldr	r3, [r2, r3]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	2107      	movs	r1, #7
 80034b8:	400a      	ands	r2, r1
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	210f      	movs	r1, #15
 80034be:	4091      	lsls	r1, r2
 80034c0:	000a      	movs	r2, r1
 80034c2:	43d1      	mvns	r1, r2
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	08d2      	lsrs	r2, r2, #3
 80034c8:	4019      	ands	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	0092      	lsls	r2, r2, #2
 80034d0:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	0052      	lsls	r2, r2, #1
 80034da:	2103      	movs	r1, #3
 80034dc:	4091      	lsls	r1, r2
 80034de:	000a      	movs	r2, r1
 80034e0:	43d2      	mvns	r2, r2
 80034e2:	401a      	ands	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2101      	movs	r1, #1
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4091      	lsls	r1, r2
 80034f2:	000a      	movs	r2, r1
 80034f4:	43d2      	mvns	r2, r2
 80034f6:	401a      	ands	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	0052      	lsls	r2, r2, #1
 8003504:	2103      	movs	r1, #3
 8003506:	4091      	lsls	r1, r2
 8003508:	000a      	movs	r2, r1
 800350a:	43d2      	mvns	r2, r2
 800350c:	401a      	ands	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	609a      	str	r2, [r3, #8]

    }

    position++;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3301      	adds	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	40da      	lsrs	r2, r3
 800351e:	1e13      	subs	r3, r2, #0
 8003520:	d000      	beq.n	8003524 <HAL_GPIO_DeInit+0x174>
 8003522:	e74d      	b.n	80033c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b006      	add	sp, #24
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			@ (mov r8, r8)
 8003530:	40010000 	.word	0x40010000
 8003534:	48000400 	.word	0x48000400
 8003538:	48000800 	.word	0x48000800
 800353c:	40010400 	.word	0x40010400

08003540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	0008      	movs	r0, r1
 800354a:	0011      	movs	r1, r2
 800354c:	1cbb      	adds	r3, r7, #2
 800354e:	1c02      	adds	r2, r0, #0
 8003550:	801a      	strh	r2, [r3, #0]
 8003552:	1c7b      	adds	r3, r7, #1
 8003554:	1c0a      	adds	r2, r1, #0
 8003556:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003558:	1c7b      	adds	r3, r7, #1
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003560:	1cbb      	adds	r3, r7, #2
 8003562:	881a      	ldrh	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003568:	e003      	b.n	8003572 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800356a:	1cbb      	adds	r3, r7, #2
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	b002      	add	sp, #8
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	000a      	movs	r2, r1
 8003584:	1cbb      	adds	r3, r7, #2
 8003586:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800358e:	1cbb      	adds	r3, r7, #2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4013      	ands	r3, r2
 8003596:	041a      	lsls	r2, r3, #16
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	1cb9      	adds	r1, r7, #2
 800359e:	8809      	ldrh	r1, [r1, #0]
 80035a0:	400b      	ands	r3, r1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	619a      	str	r2, [r3, #24]
}
 80035a8:	46c0      	nop			@ (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b004      	add	sp, #16
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	0002      	movs	r2, r0
 80035b8:	1dbb      	adds	r3, r7, #6
 80035ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035bc:	4b09      	ldr	r3, [pc, #36]	@ (80035e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	1dba      	adds	r2, r7, #6
 80035c2:	8812      	ldrh	r2, [r2, #0]
 80035c4:	4013      	ands	r3, r2
 80035c6:	d008      	beq.n	80035da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80035ca:	1dba      	adds	r2, r7, #6
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d0:	1dbb      	adds	r3, r7, #6
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7fe fa91 	bl	8001afc <HAL_GPIO_EXTI_Callback>
  }
}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	46bd      	mov	sp, r7
 80035de:	b002      	add	sp, #8
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	40010400 	.word	0x40010400

080035e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e08f      	b.n	800371a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2241      	movs	r2, #65	@ 0x41
 80035fe:	5c9b      	ldrb	r3, [r3, r2]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d107      	bne.n	8003616 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2240      	movs	r2, #64	@ 0x40
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0018      	movs	r0, r3
 8003612:	f7fe fb01 	bl	8001c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2241      	movs	r2, #65	@ 0x41
 800361a:	2124      	movs	r1, #36	@ 0x24
 800361c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	438a      	bics	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	493b      	ldr	r1, [pc, #236]	@ (8003724 <HAL_I2C_Init+0x13c>)
 8003638:	400a      	ands	r2, r1
 800363a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4938      	ldr	r1, [pc, #224]	@ (8003728 <HAL_I2C_Init+0x140>)
 8003648:	400a      	ands	r2, r1
 800364a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d108      	bne.n	8003666 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2180      	movs	r1, #128	@ 0x80
 800365e:	0209      	lsls	r1, r1, #8
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e007      	b.n	8003676 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2184      	movs	r1, #132	@ 0x84
 8003670:	0209      	lsls	r1, r1, #8
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d109      	bne.n	8003692 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2180      	movs	r1, #128	@ 0x80
 800368a:	0109      	lsls	r1, r1, #4
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	e007      	b.n	80036a2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4923      	ldr	r1, [pc, #140]	@ (800372c <HAL_I2C_Init+0x144>)
 800369e:	400a      	ands	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4920      	ldr	r1, [pc, #128]	@ (8003730 <HAL_I2C_Init+0x148>)
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	491a      	ldr	r1, [pc, #104]	@ (8003728 <HAL_I2C_Init+0x140>)
 80036be:	400a      	ands	r2, r1
 80036c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69d9      	ldr	r1, [r3, #28]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1a      	ldr	r2, [r3, #32]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2101      	movs	r1, #1
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2241      	movs	r2, #65	@ 0x41
 8003706:	2120      	movs	r1, #32
 8003708:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2242      	movs	r2, #66	@ 0x42
 8003714:	2100      	movs	r1, #0
 8003716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b002      	add	sp, #8
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	f0ffffff 	.word	0xf0ffffff
 8003728:	ffff7fff 	.word	0xffff7fff
 800372c:	fffff7ff 	.word	0xfffff7ff
 8003730:	02008000 	.word	0x02008000

08003734 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e022      	b.n	800378c <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2241      	movs	r2, #65	@ 0x41
 800374a:	2124      	movs	r1, #36	@ 0x24
 800374c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	438a      	bics	r2, r1
 800375c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f7fe faa7 	bl	8001cb4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2241      	movs	r2, #65	@ 0x41
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2242      	movs	r2, #66	@ 0x42
 800377e:	2100      	movs	r1, #0
 8003780:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2240      	movs	r2, #64	@ 0x40
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b089      	sub	sp, #36	@ 0x24
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	0008      	movs	r0, r1
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	0019      	movs	r1, r3
 80037a2:	230a      	movs	r3, #10
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	1c02      	adds	r2, r0, #0
 80037a8:	801a      	strh	r2, [r3, #0]
 80037aa:	2308      	movs	r3, #8
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	1c0a      	adds	r2, r1, #0
 80037b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2241      	movs	r2, #65	@ 0x41
 80037b6:	5c9b      	ldrb	r3, [r3, r2]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d000      	beq.n	80037c0 <HAL_I2C_Master_Transmit+0x2c>
 80037be:	e10a      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	@ 0x40
 80037c4:	5c9b      	ldrb	r3, [r3, r2]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_I2C_Master_Transmit+0x3a>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e104      	b.n	80039d8 <HAL_I2C_Master_Transmit+0x244>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2240      	movs	r2, #64	@ 0x40
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037d6:	f7fe ff05 	bl	80025e4 <HAL_GetTick>
 80037da:	0003      	movs	r3, r0
 80037dc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	0219      	lsls	r1, r3, #8
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	2319      	movs	r3, #25
 80037ea:	2201      	movs	r2, #1
 80037ec:	f000 fcb4 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0ef      	b.n	80039d8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2241      	movs	r2, #65	@ 0x41
 80037fc:	2121      	movs	r1, #33	@ 0x21
 80037fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2242      	movs	r2, #66	@ 0x42
 8003804:	2110      	movs	r1, #16
 8003806:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2208      	movs	r2, #8
 8003818:	18ba      	adds	r2, r7, r2
 800381a:	8812      	ldrh	r2, [r2, #0]
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2bff      	cmp	r3, #255	@ 0xff
 800382c:	d906      	bls.n	800383c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	22ff      	movs	r2, #255	@ 0xff
 8003832:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	045b      	lsls	r3, r3, #17
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	e007      	b.n	800384c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	049b      	lsls	r3, r3, #18
 800384a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d027      	beq.n	80038a4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003888:	b2db      	uxtb	r3, r3
 800388a:	3301      	adds	r3, #1
 800388c:	b2da      	uxtb	r2, r3
 800388e:	697c      	ldr	r4, [r7, #20]
 8003890:	230a      	movs	r3, #10
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	8819      	ldrh	r1, [r3, #0]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	4b51      	ldr	r3, [pc, #324]	@ (80039e0 <HAL_I2C_Master_Transmit+0x24c>)
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	0023      	movs	r3, r4
 800389e:	f000 fed3 	bl	8004648 <I2C_TransferConfig>
 80038a2:	e06f      	b.n	8003984 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	697c      	ldr	r4, [r7, #20]
 80038ac:	230a      	movs	r3, #10
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	8819      	ldrh	r1, [r3, #0]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	4b4a      	ldr	r3, [pc, #296]	@ (80039e0 <HAL_I2C_Master_Transmit+0x24c>)
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	0023      	movs	r3, r4
 80038ba:	f000 fec5 	bl	8004648 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038be:	e061      	b.n	8003984 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	0018      	movs	r0, r3
 80038c8:	f000 fc9e 	bl	8004208 <I2C_WaitOnTXISFlagUntilTimeout>
 80038cc:	1e03      	subs	r3, r0, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e081      	b.n	80039d8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03a      	beq.n	8003984 <HAL_I2C_Master_Transmit+0x1f0>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003912:	2b00      	cmp	r3, #0
 8003914:	d136      	bne.n	8003984 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	0013      	movs	r3, r2
 8003920:	2200      	movs	r2, #0
 8003922:	2180      	movs	r1, #128	@ 0x80
 8003924:	f000 fc18 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003928:	1e03      	subs	r3, r0, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e053      	b.n	80039d8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2bff      	cmp	r3, #255	@ 0xff
 8003938:	d911      	bls.n	800395e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	22ff      	movs	r2, #255	@ 0xff
 800393e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003944:	b2da      	uxtb	r2, r3
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	045c      	lsls	r4, r3, #17
 800394a:	230a      	movs	r3, #10
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	8819      	ldrh	r1, [r3, #0]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	2300      	movs	r3, #0
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	0023      	movs	r3, r4
 8003958:	f000 fe76 	bl	8004648 <I2C_TransferConfig>
 800395c:	e012      	b.n	8003984 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396c:	b2da      	uxtb	r2, r3
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	049c      	lsls	r4, r3, #18
 8003972:	230a      	movs	r3, #10
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	8819      	ldrh	r1, [r3, #0]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	2300      	movs	r3, #0
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	0023      	movs	r3, r4
 8003980:	f000 fe62 	bl	8004648 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d198      	bne.n	80038c0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 fc7d 	bl	8004294 <I2C_WaitOnSTOPFlagUntilTimeout>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e01a      	b.n	80039d8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2220      	movs	r2, #32
 80039a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	490b      	ldr	r1, [pc, #44]	@ (80039e4 <HAL_I2C_Master_Transmit+0x250>)
 80039b6:	400a      	ands	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2241      	movs	r2, #65	@ 0x41
 80039be:	2120      	movs	r1, #32
 80039c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2242      	movs	r2, #66	@ 0x42
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2240      	movs	r2, #64	@ 0x40
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b007      	add	sp, #28
 80039de:	bd90      	pop	{r4, r7, pc}
 80039e0:	80002000 	.word	0x80002000
 80039e4:	fe00e800 	.word	0xfe00e800

080039e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	0008      	movs	r0, r1
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	0019      	movs	r1, r3
 80039f6:	230a      	movs	r3, #10
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	1c02      	adds	r2, r0, #0
 80039fc:	801a      	strh	r2, [r3, #0]
 80039fe:	2308      	movs	r3, #8
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	1c0a      	adds	r2, r1, #0
 8003a04:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2241      	movs	r2, #65	@ 0x41
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d000      	beq.n	8003a14 <HAL_I2C_Master_Receive+0x2c>
 8003a12:	e0e8      	b.n	8003be6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2240      	movs	r2, #64	@ 0x40
 8003a18:	5c9b      	ldrb	r3, [r3, r2]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_Master_Receive+0x3a>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0e2      	b.n	8003be8 <HAL_I2C_Master_Receive+0x200>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2240      	movs	r2, #64	@ 0x40
 8003a26:	2101      	movs	r1, #1
 8003a28:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a2a:	f7fe fddb 	bl	80025e4 <HAL_GetTick>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	0219      	lsls	r1, r3, #8
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2319      	movs	r3, #25
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f000 fb8a 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003a44:	1e03      	subs	r3, r0, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0cd      	b.n	8003be8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2241      	movs	r2, #65	@ 0x41
 8003a50:	2122      	movs	r1, #34	@ 0x22
 8003a52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2242      	movs	r2, #66	@ 0x42
 8003a58:	2110      	movs	r1, #16
 8003a5a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	18ba      	adds	r2, r7, r2
 8003a6e:	8812      	ldrh	r2, [r2, #0]
 8003a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2bff      	cmp	r3, #255	@ 0xff
 8003a80:	d911      	bls.n	8003aa6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	2380      	movs	r3, #128	@ 0x80
 8003a90:	045c      	lsls	r4, r3, #17
 8003a92:	230a      	movs	r3, #10
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	8819      	ldrh	r1, [r3, #0]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	4b55      	ldr	r3, [pc, #340]	@ (8003bf0 <HAL_I2C_Master_Receive+0x208>)
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	0023      	movs	r3, r4
 8003aa0:	f000 fdd2 	bl	8004648 <I2C_TransferConfig>
 8003aa4:	e076      	b.n	8003b94 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	2380      	movs	r3, #128	@ 0x80
 8003ab8:	049c      	lsls	r4, r3, #18
 8003aba:	230a      	movs	r3, #10
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	8819      	ldrh	r1, [r3, #0]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf0 <HAL_I2C_Master_Receive+0x208>)
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	0023      	movs	r3, r4
 8003ac8:	f000 fdbe 	bl	8004648 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003acc:	e062      	b.n	8003b94 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 fc21 	bl	800431c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ada:	1e03      	subs	r3, r0, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e082      	b.n	8003be8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d03a      	beq.n	8003b94 <HAL_I2C_Master_Receive+0x1ac>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d136      	bne.n	8003b94 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	0013      	movs	r3, r2
 8003b30:	2200      	movs	r2, #0
 8003b32:	2180      	movs	r1, #128	@ 0x80
 8003b34:	f000 fb10 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e053      	b.n	8003be8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2bff      	cmp	r3, #255	@ 0xff
 8003b48:	d911      	bls.n	8003b6e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	22ff      	movs	r2, #255	@ 0xff
 8003b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	2380      	movs	r3, #128	@ 0x80
 8003b58:	045c      	lsls	r4, r3, #17
 8003b5a:	230a      	movs	r3, #10
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	8819      	ldrh	r1, [r3, #0]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	0023      	movs	r3, r4
 8003b68:	f000 fd6e 	bl	8004648 <I2C_TransferConfig>
 8003b6c:	e012      	b.n	8003b94 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	2380      	movs	r3, #128	@ 0x80
 8003b80:	049c      	lsls	r4, r3, #18
 8003b82:	230a      	movs	r3, #10
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	8819      	ldrh	r1, [r3, #0]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	0023      	movs	r3, r4
 8003b90:	f000 fd5a 	bl	8004648 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d197      	bne.n	8003ace <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fb75 	bl	8004294 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e01a      	b.n	8003be8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	490b      	ldr	r1, [pc, #44]	@ (8003bf4 <HAL_I2C_Master_Receive+0x20c>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2241      	movs	r2, #65	@ 0x41
 8003bce:	2120      	movs	r1, #32
 8003bd0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2242      	movs	r2, #66	@ 0x42
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2240      	movs	r2, #64	@ 0x40
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
  }
}
 8003be8:	0018      	movs	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b007      	add	sp, #28
 8003bee:	bd90      	pop	{r4, r7, pc}
 8003bf0:	80002400 	.word	0x80002400
 8003bf4:	fe00e800 	.word	0xfe00e800

08003bf8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b089      	sub	sp, #36	@ 0x24
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	000c      	movs	r4, r1
 8003c02:	0010      	movs	r0, r2
 8003c04:	0019      	movs	r1, r3
 8003c06:	230a      	movs	r3, #10
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	1c22      	adds	r2, r4, #0
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	2308      	movs	r3, #8
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	1c02      	adds	r2, r0, #0
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	1dbb      	adds	r3, r7, #6
 8003c18:	1c0a      	adds	r2, r1, #0
 8003c1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2241      	movs	r2, #65	@ 0x41
 8003c20:	5c9b      	ldrb	r3, [r3, r2]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d000      	beq.n	8003c2a <HAL_I2C_Mem_Write+0x32>
 8003c28:	e10c      	b.n	8003e44 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_I2C_Mem_Write+0x42>
 8003c30:	232c      	movs	r3, #44	@ 0x2c
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d105      	bne.n	8003c46 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2280      	movs	r2, #128	@ 0x80
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0ff      	b.n	8003e46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2240      	movs	r2, #64	@ 0x40
 8003c4a:	5c9b      	ldrb	r3, [r3, r2]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2C_Mem_Write+0x5c>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0f8      	b.n	8003e46 <HAL_I2C_Mem_Write+0x24e>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2240      	movs	r2, #64	@ 0x40
 8003c58:	2101      	movs	r1, #1
 8003c5a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c5c:	f7fe fcc2 	bl	80025e4 <HAL_GetTick>
 8003c60:	0003      	movs	r3, r0
 8003c62:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	0219      	lsls	r1, r3, #8
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2319      	movs	r3, #25
 8003c70:	2201      	movs	r2, #1
 8003c72:	f000 fa71 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003c76:	1e03      	subs	r3, r0, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0e3      	b.n	8003e46 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2241      	movs	r2, #65	@ 0x41
 8003c82:	2121      	movs	r1, #33	@ 0x21
 8003c84:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2242      	movs	r2, #66	@ 0x42
 8003c8a:	2140      	movs	r1, #64	@ 0x40
 8003c8c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	222c      	movs	r2, #44	@ 0x2c
 8003c9e:	18ba      	adds	r2, r7, r2
 8003ca0:	8812      	ldrh	r2, [r2, #0]
 8003ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	881c      	ldrh	r4, [r3, #0]
 8003cae:	2308      	movs	r3, #8
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	881a      	ldrh	r2, [r3, #0]
 8003cb4:	230a      	movs	r3, #10
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	8819      	ldrh	r1, [r3, #0]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	0023      	movs	r3, r4
 8003cc6:	f000 f9c1 	bl	800404c <I2C_RequestMemoryWrite>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2240      	movs	r2, #64	@ 0x40
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0b5      	b.n	8003e46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2bff      	cmp	r3, #255	@ 0xff
 8003ce2:	d911      	bls.n	8003d08 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	22ff      	movs	r2, #255	@ 0xff
 8003ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	2380      	movs	r3, #128	@ 0x80
 8003cf2:	045c      	lsls	r4, r3, #17
 8003cf4:	230a      	movs	r3, #10
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	8819      	ldrh	r1, [r3, #0]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	0023      	movs	r3, r4
 8003d02:	f000 fca1 	bl	8004648 <I2C_TransferConfig>
 8003d06:	e012      	b.n	8003d2e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	2380      	movs	r3, #128	@ 0x80
 8003d1a:	049c      	lsls	r4, r3, #18
 8003d1c:	230a      	movs	r3, #10
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	8819      	ldrh	r1, [r3, #0]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	0023      	movs	r3, r4
 8003d2a:	f000 fc8d 	bl	8004648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 fa67 	bl	8004208 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d3a:	1e03      	subs	r3, r0, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e081      	b.n	8003e46 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	781a      	ldrb	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d03a      	beq.n	8003df2 <HAL_I2C_Mem_Write+0x1fa>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d136      	bne.n	8003df2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	0013      	movs	r3, r2
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2180      	movs	r1, #128	@ 0x80
 8003d92:	f000 f9e1 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003d96:	1e03      	subs	r3, r0, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e053      	b.n	8003e46 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2bff      	cmp	r3, #255	@ 0xff
 8003da6:	d911      	bls.n	8003dcc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	22ff      	movs	r2, #255	@ 0xff
 8003dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	045c      	lsls	r4, r3, #17
 8003db8:	230a      	movs	r3, #10
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	8819      	ldrh	r1, [r3, #0]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	0023      	movs	r3, r4
 8003dc6:	f000 fc3f 	bl	8004648 <I2C_TransferConfig>
 8003dca:	e012      	b.n	8003df2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	049c      	lsls	r4, r3, #18
 8003de0:	230a      	movs	r3, #10
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	8819      	ldrh	r1, [r3, #0]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	2300      	movs	r3, #0
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	0023      	movs	r3, r4
 8003dee:	f000 fc2b 	bl	8004648 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d198      	bne.n	8003d2e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 fa46 	bl	8004294 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e01a      	b.n	8003e46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2220      	movs	r2, #32
 8003e16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	490b      	ldr	r1, [pc, #44]	@ (8003e50 <HAL_I2C_Mem_Write+0x258>)
 8003e24:	400a      	ands	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2241      	movs	r2, #65	@ 0x41
 8003e2c:	2120      	movs	r1, #32
 8003e2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2242      	movs	r2, #66	@ 0x42
 8003e34:	2100      	movs	r1, #0
 8003e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2240      	movs	r2, #64	@ 0x40
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b007      	add	sp, #28
 8003e4c:	bd90      	pop	{r4, r7, pc}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	fe00e800 	.word	0xfe00e800

08003e54 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	@ 0x28
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	230a      	movs	r3, #10
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	1c0a      	adds	r2, r1, #0
 8003e66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2241      	movs	r2, #65	@ 0x41
 8003e70:	5c9b      	ldrb	r3, [r3, r2]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d000      	beq.n	8003e7a <HAL_I2C_IsDeviceReady+0x26>
 8003e78:	e0df      	b.n	800403a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699a      	ldr	r2, [r3, #24]
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	401a      	ands	r2, r3
 8003e86:	2380      	movs	r3, #128	@ 0x80
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0d4      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2240      	movs	r2, #64	@ 0x40
 8003e96:	5c9b      	ldrb	r3, [r3, r2]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_I2C_IsDeviceReady+0x4c>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e0cd      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1e8>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2240      	movs	r2, #64	@ 0x40
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2241      	movs	r2, #65	@ 0x41
 8003eac:	2124      	movs	r1, #36	@ 0x24
 8003eae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_I2C_IsDeviceReady+0x7a>
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	059b      	lsls	r3, r3, #22
 8003ec6:	0d9b      	lsrs	r3, r3, #22
 8003ec8:	4a5e      	ldr	r2, [pc, #376]	@ (8004044 <HAL_I2C_IsDeviceReady+0x1f0>)
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	e006      	b.n	8003edc <HAL_I2C_IsDeviceReady+0x88>
 8003ece:	230a      	movs	r3, #10
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	059b      	lsls	r3, r3, #22
 8003ed6:	0d9b      	lsrs	r3, r3, #22
 8003ed8:	4a5b      	ldr	r2, [pc, #364]	@ (8004048 <HAL_I2C_IsDeviceReady+0x1f4>)
 8003eda:	431a      	orrs	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fb7f 	bl	80025e4 <HAL_GetTick>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	3b20      	subs	r3, #32
 8003ef6:	425a      	negs	r2, r3
 8003ef8:	4153      	adcs	r3, r2
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	231f      	movs	r3, #31
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2210      	movs	r2, #16
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	3b10      	subs	r3, #16
 8003f0e:	425a      	negs	r2, r3
 8003f10:	4153      	adcs	r3, r2
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	231e      	movs	r3, #30
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f1a:	e035      	b.n	8003f88 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	d01a      	beq.n	8003f58 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fe fb5f 	bl	80025e4 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <HAL_I2C_IsDeviceReady+0xe4>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10f      	bne.n	8003f58 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2241      	movs	r2, #65	@ 0x41
 8003f3c:	2120      	movs	r1, #32
 8003f3e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f44:	2220      	movs	r2, #32
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2240      	movs	r2, #64	@ 0x40
 8003f50:	2100      	movs	r1, #0
 8003f52:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e071      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	4013      	ands	r3, r2
 8003f62:	3b20      	subs	r3, #32
 8003f64:	425a      	negs	r2, r3
 8003f66:	4153      	adcs	r3, r2
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	231f      	movs	r3, #31
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2210      	movs	r2, #16
 8003f78:	4013      	ands	r3, r2
 8003f7a:	3b10      	subs	r3, #16
 8003f7c:	425a      	negs	r2, r3
 8003f7e:	4153      	adcs	r3, r2
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	231e      	movs	r3, #30
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f88:	231f      	movs	r3, #31
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <HAL_I2C_IsDeviceReady+0x148>
 8003f92:	231e      	movs	r3, #30
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0bf      	beq.n	8003f1c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d01a      	beq.n	8003fe0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	0013      	movs	r3, r2
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2120      	movs	r1, #32
 8003fb8:	f000 f8ce 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e03b      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2241      	movs	r2, #65	@ 0x41
 8003fd0:	2120      	movs	r1, #32
 8003fd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2240      	movs	r2, #64	@ 0x40
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e02d      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	0013      	movs	r3, r2
 8003fea:	2200      	movs	r2, #0
 8003fec:	2120      	movs	r1, #32
 8003fee:	f000 f8b3 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	1e03      	subs	r3, r0, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e020      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2210      	movs	r2, #16
 8004000:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2220      	movs	r2, #32
 8004008:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3301      	adds	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d900      	bls.n	800401a <HAL_I2C_IsDeviceReady+0x1c6>
 8004018:	e74d      	b.n	8003eb6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2241      	movs	r2, #65	@ 0x41
 800401e:	2120      	movs	r1, #32
 8004020:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	2220      	movs	r2, #32
 8004028:	431a      	orrs	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2240      	movs	r2, #64	@ 0x40
 8004032:	2100      	movs	r1, #0
 8004034:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b008      	add	sp, #32
 8004042:	bd80      	pop	{r7, pc}
 8004044:	02002000 	.word	0x02002000
 8004048:	02002800 	.word	0x02002800

0800404c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800404c:	b5b0      	push	{r4, r5, r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	000c      	movs	r4, r1
 8004056:	0010      	movs	r0, r2
 8004058:	0019      	movs	r1, r3
 800405a:	250a      	movs	r5, #10
 800405c:	197b      	adds	r3, r7, r5
 800405e:	1c22      	adds	r2, r4, #0
 8004060:	801a      	strh	r2, [r3, #0]
 8004062:	2308      	movs	r3, #8
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	1c02      	adds	r2, r0, #0
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	1dbb      	adds	r3, r7, #6
 800406c:	1c0a      	adds	r2, r1, #0
 800406e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004070:	1dbb      	adds	r3, r7, #6
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	045c      	lsls	r4, r3, #17
 800407a:	197b      	adds	r3, r7, r5
 800407c:	8819      	ldrh	r1, [r3, #0]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	4b23      	ldr	r3, [pc, #140]	@ (8004110 <I2C_RequestMemoryWrite+0xc4>)
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	0023      	movs	r3, r4
 8004086:	f000 fadf 	bl	8004648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408c:	6a39      	ldr	r1, [r7, #32]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f8b9 	bl	8004208 <I2C_WaitOnTXISFlagUntilTimeout>
 8004096:	1e03      	subs	r3, r0, #0
 8004098:	d001      	beq.n	800409e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e033      	b.n	8004106 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800409e:	1dbb      	adds	r3, r7, #6
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d107      	bne.n	80040b6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040a6:	2308      	movs	r3, #8
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80040b4:	e019      	b.n	80040ea <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040b6:	2308      	movs	r3, #8
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	b29b      	uxth	r3, r3
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ca:	6a39      	ldr	r1, [r7, #32]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 f89a 	bl	8004208 <I2C_WaitOnTXISFlagUntilTimeout>
 80040d4:	1e03      	subs	r3, r0, #0
 80040d6:	d001      	beq.n	80040dc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e014      	b.n	8004106 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040dc:	2308      	movs	r3, #8
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040ea:	6a3a      	ldr	r2, [r7, #32]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	0013      	movs	r3, r2
 80040f4:	2200      	movs	r2, #0
 80040f6:	2180      	movs	r1, #128	@ 0x80
 80040f8:	f000 f82e 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 80040fc:	1e03      	subs	r3, r0, #0
 80040fe:	d001      	beq.n	8004104 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b004      	add	sp, #16
 800410c:	bdb0      	pop	{r4, r5, r7, pc}
 800410e:	46c0      	nop			@ (mov r8, r8)
 8004110:	80002000 	.word	0x80002000

08004114 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2202      	movs	r2, #2
 8004124:	4013      	ands	r3, r2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d103      	bne.n	8004132 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2201      	movs	r2, #1
 800413a:	4013      	ands	r3, r2
 800413c:	2b01      	cmp	r3, #1
 800413e:	d007      	beq.n	8004150 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2101      	movs	r1, #1
 800414c:	430a      	orrs	r2, r1
 800414e:	619a      	str	r2, [r3, #24]
  }
}
 8004150:	46c0      	nop			@ (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	1dfb      	adds	r3, r7, #7
 8004166:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004168:	e03a      	b.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	6839      	ldr	r1, [r7, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	0018      	movs	r0, r3
 8004172:	f000 f971 	bl	8004458 <I2C_IsErrorOccurred>
 8004176:	1e03      	subs	r3, r0, #0
 8004178:	d001      	beq.n	800417e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e040      	b.n	8004200 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	d02d      	beq.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004184:	f7fe fa2e 	bl	80025e4 <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d122      	bne.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	425a      	negs	r2, r3
 80041aa:	4153      	adcs	r3, r2
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	001a      	movs	r2, r3
 80041b0:	1dfb      	adds	r3, r7, #7
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d113      	bne.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041bc:	2220      	movs	r2, #32
 80041be:	431a      	orrs	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2241      	movs	r2, #65	@ 0x41
 80041c8:	2120      	movs	r1, #32
 80041ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2242      	movs	r2, #66	@ 0x42
 80041d0:	2100      	movs	r1, #0
 80041d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2240      	movs	r2, #64	@ 0x40
 80041d8:	2100      	movs	r1, #0
 80041da:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e00f      	b.n	8004200 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4013      	ands	r3, r2
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	425a      	negs	r2, r3
 80041f0:	4153      	adcs	r3, r2
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	001a      	movs	r2, r3
 80041f6:	1dfb      	adds	r3, r7, #7
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d0b5      	beq.n	800416a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bd80      	pop	{r7, pc}

08004208 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004214:	e032      	b.n	800427c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	0018      	movs	r0, r3
 800421e:	f000 f91b 	bl	8004458 <I2C_IsErrorOccurred>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d001      	beq.n	800422a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e030      	b.n	800428c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	3301      	adds	r3, #1
 800422e:	d025      	beq.n	800427c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004230:	f7fe f9d8 	bl	80025e4 <HAL_GetTick>
 8004234:	0002      	movs	r2, r0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d11a      	bne.n	800427c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2202      	movs	r2, #2
 800424e:	4013      	ands	r3, r2
 8004250:	2b02      	cmp	r3, #2
 8004252:	d013      	beq.n	800427c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004258:	2220      	movs	r2, #32
 800425a:	431a      	orrs	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2241      	movs	r2, #65	@ 0x41
 8004264:	2120      	movs	r1, #32
 8004266:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2242      	movs	r2, #66	@ 0x42
 800426c:	2100      	movs	r1, #0
 800426e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2240      	movs	r2, #64	@ 0x40
 8004274:	2100      	movs	r1, #0
 8004276:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e007      	b.n	800428c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2202      	movs	r2, #2
 8004284:	4013      	ands	r3, r2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d1c5      	bne.n	8004216 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b004      	add	sp, #16
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042a0:	e02f      	b.n	8004302 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 f8d5 	bl	8004458 <I2C_IsErrorOccurred>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e02d      	b.n	8004312 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b6:	f7fe f995 	bl	80025e4 <HAL_GetTick>
 80042ba:	0002      	movs	r2, r0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d11a      	bne.n	8004302 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2220      	movs	r2, #32
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d013      	beq.n	8004302 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	2220      	movs	r2, #32
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2241      	movs	r2, #65	@ 0x41
 80042ea:	2120      	movs	r1, #32
 80042ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2242      	movs	r2, #66	@ 0x42
 80042f2:	2100      	movs	r1, #0
 80042f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2240      	movs	r2, #64	@ 0x40
 80042fa:	2100      	movs	r1, #0
 80042fc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e007      	b.n	8004312 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2220      	movs	r2, #32
 800430a:	4013      	ands	r3, r2
 800430c:	2b20      	cmp	r3, #32
 800430e:	d1c8      	bne.n	80042a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b004      	add	sp, #16
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004328:	2317      	movs	r3, #23
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004330:	e07b      	b.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	0018      	movs	r0, r3
 800433a:	f000 f88d 	bl	8004458 <I2C_IsErrorOccurred>
 800433e:	1e03      	subs	r3, r0, #0
 8004340:	d003      	beq.n	800434a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004342:	2317      	movs	r3, #23
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2220      	movs	r2, #32
 8004352:	4013      	ands	r3, r2
 8004354:	2b20      	cmp	r3, #32
 8004356:	d140      	bne.n	80043da <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004358:	2117      	movs	r1, #23
 800435a:	187b      	adds	r3, r7, r1
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d13b      	bne.n	80043da <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2204      	movs	r2, #4
 800436a:	4013      	ands	r3, r2
 800436c:	2b04      	cmp	r3, #4
 800436e:	d106      	bne.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004378:	187b      	adds	r3, r7, r1
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2210      	movs	r2, #16
 8004386:	4013      	ands	r3, r2
 8004388:	2b10      	cmp	r3, #16
 800438a:	d123      	bne.n	80043d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2210      	movs	r2, #16
 8004392:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2204      	movs	r2, #4
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2220      	movs	r2, #32
 80043a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4929      	ldr	r1, [pc, #164]	@ (8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80043ae:	400a      	ands	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2241      	movs	r2, #65	@ 0x41
 80043b6:	2120      	movs	r1, #32
 80043b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2242      	movs	r2, #66	@ 0x42
 80043be:	2100      	movs	r1, #0
 80043c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2240      	movs	r2, #64	@ 0x40
 80043c6:	2100      	movs	r1, #0
 80043c8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80043ca:	2317      	movs	r3, #23
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e002      	b.n	80043da <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80043da:	f7fe f903 	bl	80025e4 <HAL_GetTick>
 80043de:	0002      	movs	r2, r0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d11c      	bne.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80043f0:	2017      	movs	r0, #23
 80043f2:	183b      	adds	r3, r7, r0
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d117      	bne.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2204      	movs	r2, #4
 8004402:	4013      	ands	r3, r2
 8004404:	2b04      	cmp	r3, #4
 8004406:	d010      	beq.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440c:	2220      	movs	r2, #32
 800440e:	431a      	orrs	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2241      	movs	r2, #65	@ 0x41
 8004418:	2120      	movs	r1, #32
 800441a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2240      	movs	r2, #64	@ 0x40
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004424:	183b      	adds	r3, r7, r0
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2204      	movs	r2, #4
 8004432:	4013      	ands	r3, r2
 8004434:	2b04      	cmp	r3, #4
 8004436:	d005      	beq.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004438:	2317      	movs	r3, #23
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d100      	bne.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004442:	e776      	b.n	8004332 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004444:	2317      	movs	r3, #23
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	781b      	ldrb	r3, [r3, #0]
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b006      	add	sp, #24
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	fe00e800 	.word	0xfe00e800

08004458 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	@ 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004464:	2327      	movs	r3, #39	@ 0x27
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2210      	movs	r2, #16
 8004480:	4013      	ands	r3, r2
 8004482:	d100      	bne.n	8004486 <I2C_IsErrorOccurred+0x2e>
 8004484:	e079      	b.n	800457a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2210      	movs	r2, #16
 800448c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800448e:	e057      	b.n	8004540 <I2C_IsErrorOccurred+0xe8>
 8004490:	2227      	movs	r2, #39	@ 0x27
 8004492:	18bb      	adds	r3, r7, r2
 8004494:	18ba      	adds	r2, r7, r2
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3301      	adds	r3, #1
 800449e:	d04f      	beq.n	8004540 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7fe f8a0 	bl	80025e4 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_IsErrorOccurred+0x5e>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d144      	bne.n	8004540 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	01db      	lsls	r3, r3, #7
 80044c0:	4013      	ands	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044c4:	2013      	movs	r0, #19
 80044c6:	183b      	adds	r3, r7, r0
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	2142      	movs	r1, #66	@ 0x42
 80044cc:	5c52      	ldrb	r2, [r2, r1]
 80044ce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	2380      	movs	r3, #128	@ 0x80
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	401a      	ands	r2, r3
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d126      	bne.n	8004532 <I2C_IsErrorOccurred+0xda>
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	2380      	movs	r3, #128	@ 0x80
 80044e8:	01db      	lsls	r3, r3, #7
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d021      	beq.n	8004532 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80044ee:	183b      	adds	r3, r7, r0
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d01d      	beq.n	8004532 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2180      	movs	r1, #128	@ 0x80
 8004502:	01c9      	lsls	r1, r1, #7
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004508:	f7fe f86c 	bl	80025e4 <HAL_GetTick>
 800450c:	0003      	movs	r3, r0
 800450e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004510:	e00f      	b.n	8004532 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004512:	f7fe f867 	bl	80025e4 <HAL_GetTick>
 8004516:	0002      	movs	r2, r0
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b19      	cmp	r3, #25
 800451e:	d908      	bls.n	8004532 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2220      	movs	r2, #32
 8004524:	4313      	orrs	r3, r2
 8004526:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004528:	2327      	movs	r3, #39	@ 0x27
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]

              break;
 8004530:	e006      	b.n	8004540 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2220      	movs	r2, #32
 800453a:	4013      	ands	r3, r2
 800453c:	2b20      	cmp	r3, #32
 800453e:	d1e8      	bne.n	8004512 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2220      	movs	r2, #32
 8004548:	4013      	ands	r3, r2
 800454a:	2b20      	cmp	r3, #32
 800454c:	d004      	beq.n	8004558 <I2C_IsErrorOccurred+0x100>
 800454e:	2327      	movs	r3, #39	@ 0x27
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d09b      	beq.n	8004490 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004558:	2327      	movs	r3, #39	@ 0x27
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2220      	movs	r2, #32
 8004568:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	2204      	movs	r2, #4
 800456e:	4313      	orrs	r3, r2
 8004570:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004572:	2327      	movs	r3, #39	@ 0x27
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	2380      	movs	r3, #128	@ 0x80
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4013      	ands	r3, r2
 800458a:	d00c      	beq.n	80045a6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	2201      	movs	r2, #1
 8004590:	4313      	orrs	r3, r2
 8004592:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2280      	movs	r2, #128	@ 0x80
 800459a:	0052      	lsls	r2, r2, #1
 800459c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800459e:	2327      	movs	r3, #39	@ 0x27
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4013      	ands	r3, r2
 80045ae:	d00c      	beq.n	80045ca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	2208      	movs	r2, #8
 80045b4:	4313      	orrs	r3, r2
 80045b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2280      	movs	r2, #128	@ 0x80
 80045be:	00d2      	lsls	r2, r2, #3
 80045c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c2:	2327      	movs	r3, #39	@ 0x27
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	2201      	movs	r2, #1
 80045c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	2380      	movs	r3, #128	@ 0x80
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4013      	ands	r3, r2
 80045d2:	d00c      	beq.n	80045ee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2202      	movs	r2, #2
 80045d8:	4313      	orrs	r3, r2
 80045da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2280      	movs	r2, #128	@ 0x80
 80045e2:	0092      	lsls	r2, r2, #2
 80045e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e6:	2327      	movs	r3, #39	@ 0x27
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80045ee:	2327      	movs	r3, #39	@ 0x27
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01d      	beq.n	8004634 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7ff fd8a 	bl	8004114 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	490e      	ldr	r1, [pc, #56]	@ (8004644 <I2C_IsErrorOccurred+0x1ec>)
 800460c:	400a      	ands	r2, r1
 800460e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	431a      	orrs	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2241      	movs	r2, #65	@ 0x41
 8004620:	2120      	movs	r1, #32
 8004622:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2242      	movs	r2, #66	@ 0x42
 8004628:	2100      	movs	r1, #0
 800462a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2240      	movs	r2, #64	@ 0x40
 8004630:	2100      	movs	r1, #0
 8004632:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004634:	2327      	movs	r3, #39	@ 0x27
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	781b      	ldrb	r3, [r3, #0]
}
 800463a:	0018      	movs	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	b00a      	add	sp, #40	@ 0x28
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	fe00e800 	.word	0xfe00e800

08004648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	0008      	movs	r0, r1
 8004652:	0011      	movs	r1, r2
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	240a      	movs	r4, #10
 8004658:	193b      	adds	r3, r7, r4
 800465a:	1c02      	adds	r2, r0, #0
 800465c:	801a      	strh	r2, [r3, #0]
 800465e:	2009      	movs	r0, #9
 8004660:	183b      	adds	r3, r7, r0
 8004662:	1c0a      	adds	r2, r1, #0
 8004664:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004666:	193b      	adds	r3, r7, r4
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	059b      	lsls	r3, r3, #22
 800466c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800466e:	183b      	adds	r3, r7, r0
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	0419      	lsls	r1, r3, #16
 8004674:	23ff      	movs	r3, #255	@ 0xff
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800467a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004682:	4313      	orrs	r3, r2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004692:	0d51      	lsrs	r1, r2, #21
 8004694:	2280      	movs	r2, #128	@ 0x80
 8004696:	00d2      	lsls	r2, r2, #3
 8004698:	400a      	ands	r2, r1
 800469a:	4907      	ldr	r1, [pc, #28]	@ (80046b8 <I2C_TransferConfig+0x70>)
 800469c:	430a      	orrs	r2, r1
 800469e:	43d2      	mvns	r2, r2
 80046a0:	401a      	ands	r2, r3
 80046a2:	0011      	movs	r1, r2
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b007      	add	sp, #28
 80046b4:	bd90      	pop	{r4, r7, pc}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	03ff63ff 	.word	0x03ff63ff

080046bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2241      	movs	r2, #65	@ 0x41
 80046ca:	5c9b      	ldrb	r3, [r3, r2]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d138      	bne.n	8004744 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2240      	movs	r2, #64	@ 0x40
 80046d6:	5c9b      	ldrb	r3, [r3, r2]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046dc:	2302      	movs	r3, #2
 80046de:	e032      	b.n	8004746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2240      	movs	r2, #64	@ 0x40
 80046e4:	2101      	movs	r1, #1
 80046e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2241      	movs	r2, #65	@ 0x41
 80046ec:	2124      	movs	r1, #36	@ 0x24
 80046ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	438a      	bics	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4911      	ldr	r1, [pc, #68]	@ (8004750 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800470c:	400a      	ands	r2, r1
 800470e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2101      	movs	r1, #1
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2241      	movs	r2, #65	@ 0x41
 8004734:	2120      	movs	r1, #32
 8004736:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2240      	movs	r2, #64	@ 0x40
 800473c:	2100      	movs	r1, #0
 800473e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
  }
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b002      	add	sp, #8
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	ffffefff 	.word	0xffffefff

08004754 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2241      	movs	r2, #65	@ 0x41
 8004762:	5c9b      	ldrb	r3, [r3, r2]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b20      	cmp	r3, #32
 8004768:	d139      	bne.n	80047de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2240      	movs	r2, #64	@ 0x40
 800476e:	5c9b      	ldrb	r3, [r3, r2]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004774:	2302      	movs	r3, #2
 8004776:	e033      	b.n	80047e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2240      	movs	r2, #64	@ 0x40
 800477c:	2101      	movs	r1, #1
 800477e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2241      	movs	r2, #65	@ 0x41
 8004784:	2124      	movs	r1, #36	@ 0x24
 8004786:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2101      	movs	r1, #1
 8004794:	438a      	bics	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a11      	ldr	r2, [pc, #68]	@ (80047e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2101      	movs	r1, #1
 80047c6:	430a      	orrs	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2241      	movs	r2, #65	@ 0x41
 80047ce:	2120      	movs	r1, #32
 80047d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2240      	movs	r2, #64	@ 0x40
 80047d6:	2100      	movs	r1, #0
 80047d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	0018      	movs	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b004      	add	sp, #16
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	fffff0ff 	.word	0xfffff0ff

080047ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f000 fb76 	bl	8004eec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2201      	movs	r2, #1
 8004806:	4013      	ands	r3, r2
 8004808:	d100      	bne.n	800480c <HAL_RCC_OscConfig+0x20>
 800480a:	e08e      	b.n	800492a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800480c:	4bc5      	ldr	r3, [pc, #788]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	220c      	movs	r2, #12
 8004812:	4013      	ands	r3, r2
 8004814:	2b04      	cmp	r3, #4
 8004816:	d00e      	beq.n	8004836 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004818:	4bc2      	ldr	r3, [pc, #776]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	220c      	movs	r2, #12
 800481e:	4013      	ands	r3, r2
 8004820:	2b08      	cmp	r3, #8
 8004822:	d117      	bne.n	8004854 <HAL_RCC_OscConfig+0x68>
 8004824:	4bbf      	ldr	r3, [pc, #764]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	23c0      	movs	r3, #192	@ 0xc0
 800482a:	025b      	lsls	r3, r3, #9
 800482c:	401a      	ands	r2, r3
 800482e:	2380      	movs	r3, #128	@ 0x80
 8004830:	025b      	lsls	r3, r3, #9
 8004832:	429a      	cmp	r2, r3
 8004834:	d10e      	bne.n	8004854 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004836:	4bbb      	ldr	r3, [pc, #748]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	2380      	movs	r3, #128	@ 0x80
 800483c:	029b      	lsls	r3, r3, #10
 800483e:	4013      	ands	r3, r2
 8004840:	d100      	bne.n	8004844 <HAL_RCC_OscConfig+0x58>
 8004842:	e071      	b.n	8004928 <HAL_RCC_OscConfig+0x13c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d000      	beq.n	800484e <HAL_RCC_OscConfig+0x62>
 800484c:	e06c      	b.n	8004928 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f000 fb4c 	bl	8004eec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x80>
 800485c:	4bb1      	ldr	r3, [pc, #708]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4bb0      	ldr	r3, [pc, #704]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004862:	2180      	movs	r1, #128	@ 0x80
 8004864:	0249      	lsls	r1, r1, #9
 8004866:	430a      	orrs	r2, r1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e02f      	b.n	80048cc <HAL_RCC_OscConfig+0xe0>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10c      	bne.n	800488e <HAL_RCC_OscConfig+0xa2>
 8004874:	4bab      	ldr	r3, [pc, #684]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4baa      	ldr	r3, [pc, #680]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 800487a:	49ab      	ldr	r1, [pc, #684]	@ (8004b28 <HAL_RCC_OscConfig+0x33c>)
 800487c:	400a      	ands	r2, r1
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	4ba8      	ldr	r3, [pc, #672]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4ba7      	ldr	r3, [pc, #668]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004886:	49a9      	ldr	r1, [pc, #676]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004888:	400a      	ands	r2, r1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e01e      	b.n	80048cc <HAL_RCC_OscConfig+0xe0>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b05      	cmp	r3, #5
 8004894:	d10e      	bne.n	80048b4 <HAL_RCC_OscConfig+0xc8>
 8004896:	4ba3      	ldr	r3, [pc, #652]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4ba2      	ldr	r3, [pc, #648]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 800489c:	2180      	movs	r1, #128	@ 0x80
 800489e:	02c9      	lsls	r1, r1, #11
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	4b9f      	ldr	r3, [pc, #636]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80048aa:	2180      	movs	r1, #128	@ 0x80
 80048ac:	0249      	lsls	r1, r1, #9
 80048ae:	430a      	orrs	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xe0>
 80048b4:	4b9b      	ldr	r3, [pc, #620]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b9a      	ldr	r3, [pc, #616]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80048ba:	499b      	ldr	r1, [pc, #620]	@ (8004b28 <HAL_RCC_OscConfig+0x33c>)
 80048bc:	400a      	ands	r2, r1
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	4b98      	ldr	r3, [pc, #608]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b97      	ldr	r3, [pc, #604]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80048c6:	4999      	ldr	r1, [pc, #612]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80048c8:	400a      	ands	r2, r1
 80048ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d014      	beq.n	80048fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fd fe86 	bl	80025e4 <HAL_GetTick>
 80048d8:	0003      	movs	r3, r0
 80048da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048de:	f7fd fe81 	bl	80025e4 <HAL_GetTick>
 80048e2:	0002      	movs	r2, r0
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b64      	cmp	r3, #100	@ 0x64
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e2fd      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f0:	4b8c      	ldr	r3, [pc, #560]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	2380      	movs	r3, #128	@ 0x80
 80048f6:	029b      	lsls	r3, r3, #10
 80048f8:	4013      	ands	r3, r2
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0xf2>
 80048fc:	e015      	b.n	800492a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fe:	f7fd fe71 	bl	80025e4 <HAL_GetTick>
 8004902:	0003      	movs	r3, r0
 8004904:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004908:	f7fd fe6c 	bl	80025e4 <HAL_GetTick>
 800490c:	0002      	movs	r2, r0
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	@ 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e2e8      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491a:	4b82      	ldr	r3, [pc, #520]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	2380      	movs	r3, #128	@ 0x80
 8004920:	029b      	lsls	r3, r3, #10
 8004922:	4013      	ands	r3, r2
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x11c>
 8004926:	e000      	b.n	800492a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004928:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2202      	movs	r2, #2
 8004930:	4013      	ands	r3, r2
 8004932:	d100      	bne.n	8004936 <HAL_RCC_OscConfig+0x14a>
 8004934:	e06c      	b.n	8004a10 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004936:	4b7b      	ldr	r3, [pc, #492]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	220c      	movs	r2, #12
 800493c:	4013      	ands	r3, r2
 800493e:	d00e      	beq.n	800495e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004940:	4b78      	ldr	r3, [pc, #480]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	220c      	movs	r2, #12
 8004946:	4013      	ands	r3, r2
 8004948:	2b08      	cmp	r3, #8
 800494a:	d11f      	bne.n	800498c <HAL_RCC_OscConfig+0x1a0>
 800494c:	4b75      	ldr	r3, [pc, #468]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	23c0      	movs	r3, #192	@ 0xc0
 8004952:	025b      	lsls	r3, r3, #9
 8004954:	401a      	ands	r2, r3
 8004956:	2380      	movs	r3, #128	@ 0x80
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	429a      	cmp	r2, r3
 800495c:	d116      	bne.n	800498c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495e:	4b71      	ldr	r3, [pc, #452]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2202      	movs	r2, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d005      	beq.n	8004974 <HAL_RCC_OscConfig+0x188>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e2bb      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004974:	4b6b      	ldr	r3, [pc, #428]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	22f8      	movs	r2, #248	@ 0xf8
 800497a:	4393      	bics	r3, r2
 800497c:	0019      	movs	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00da      	lsls	r2, r3, #3
 8004984:	4b67      	ldr	r3, [pc, #412]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498a:	e041      	b.n	8004a10 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d024      	beq.n	80049de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004994:	4b63      	ldr	r3, [pc, #396]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b62      	ldr	r3, [pc, #392]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 800499a:	2101      	movs	r1, #1
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fd fe20 	bl	80025e4 <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049aa:	f7fd fe1b 	bl	80025e4 <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e297      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049bc:	4b59      	ldr	r3, [pc, #356]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2202      	movs	r2, #2
 80049c2:	4013      	ands	r3, r2
 80049c4:	d0f1      	beq.n	80049aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c6:	4b57      	ldr	r3, [pc, #348]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	22f8      	movs	r2, #248	@ 0xf8
 80049cc:	4393      	bics	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	00da      	lsls	r2, r3, #3
 80049d6:	4b53      	ldr	r3, [pc, #332]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e018      	b.n	8004a10 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049de:	4b51      	ldr	r3, [pc, #324]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b50      	ldr	r3, [pc, #320]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 80049e4:	2101      	movs	r1, #1
 80049e6:	438a      	bics	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fd fdfb 	bl	80025e4 <HAL_GetTick>
 80049ee:	0003      	movs	r3, r0
 80049f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f4:	f7fd fdf6 	bl	80025e4 <HAL_GetTick>
 80049f8:	0002      	movs	r2, r0
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e272      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a06:	4b47      	ldr	r3, [pc, #284]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d1f1      	bne.n	80049f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2208      	movs	r2, #8
 8004a16:	4013      	ands	r3, r2
 8004a18:	d036      	beq.n	8004a88 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d019      	beq.n	8004a56 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a22:	4b40      	ldr	r3, [pc, #256]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a26:	4b3f      	ldr	r3, [pc, #252]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7fd fdd9 	bl	80025e4 <HAL_GetTick>
 8004a32:	0003      	movs	r3, r0
 8004a34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a38:	f7fd fdd4 	bl	80025e4 <HAL_GetTick>
 8004a3c:	0002      	movs	r2, r0
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e250      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4a:	4b36      	ldr	r3, [pc, #216]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	2202      	movs	r2, #2
 8004a50:	4013      	ands	r3, r2
 8004a52:	d0f1      	beq.n	8004a38 <HAL_RCC_OscConfig+0x24c>
 8004a54:	e018      	b.n	8004a88 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a56:	4b33      	ldr	r3, [pc, #204]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a5a:	4b32      	ldr	r3, [pc, #200]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	438a      	bics	r2, r1
 8004a60:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a62:	f7fd fdbf 	bl	80025e4 <HAL_GetTick>
 8004a66:	0003      	movs	r3, r0
 8004a68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6c:	f7fd fdba 	bl	80025e4 <HAL_GetTick>
 8004a70:	0002      	movs	r2, r0
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e236      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a7e:	4b29      	ldr	r3, [pc, #164]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	2202      	movs	r2, #2
 8004a84:	4013      	ands	r3, r2
 8004a86:	d1f1      	bne.n	8004a6c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d100      	bne.n	8004a94 <HAL_RCC_OscConfig+0x2a8>
 8004a92:	e0b5      	b.n	8004c00 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a94:	201f      	movs	r0, #31
 8004a96:	183b      	adds	r3, r7, r0
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a9c:	4b21      	ldr	r3, [pc, #132]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	055b      	lsls	r3, r3, #21
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d110      	bne.n	8004aca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	4b1d      	ldr	r3, [pc, #116]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004aae:	2180      	movs	r1, #128	@ 0x80
 8004ab0:	0549      	lsls	r1, r1, #21
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	61da      	str	r2, [r3, #28]
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	2380      	movs	r3, #128	@ 0x80
 8004abc:	055b      	lsls	r3, r3, #21
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ac4:	183b      	adds	r3, r7, r0
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aca:	4b19      	ldr	r3, [pc, #100]	@ (8004b30 <HAL_RCC_OscConfig+0x344>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	2380      	movs	r3, #128	@ 0x80
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d11a      	bne.n	8004b0c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ad6:	4b16      	ldr	r3, [pc, #88]	@ (8004b30 <HAL_RCC_OscConfig+0x344>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b15      	ldr	r3, [pc, #84]	@ (8004b30 <HAL_RCC_OscConfig+0x344>)
 8004adc:	2180      	movs	r1, #128	@ 0x80
 8004ade:	0049      	lsls	r1, r1, #1
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ae4:	f7fd fd7e 	bl	80025e4 <HAL_GetTick>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aee:	f7fd fd79 	bl	80025e4 <HAL_GetTick>
 8004af2:	0002      	movs	r2, r0
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b64      	cmp	r3, #100	@ 0x64
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e1f5      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <HAL_RCC_OscConfig+0x344>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2380      	movs	r3, #128	@ 0x80
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d10f      	bne.n	8004b34 <HAL_RCC_OscConfig+0x348>
 8004b14:	4b03      	ldr	r3, [pc, #12]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	4b02      	ldr	r3, [pc, #8]	@ (8004b24 <HAL_RCC_OscConfig+0x338>)
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	621a      	str	r2, [r3, #32]
 8004b20:	e036      	b.n	8004b90 <HAL_RCC_OscConfig+0x3a4>
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	40021000 	.word	0x40021000
 8004b28:	fffeffff 	.word	0xfffeffff
 8004b2c:	fffbffff 	.word	0xfffbffff
 8004b30:	40007000 	.word	0x40007000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10c      	bne.n	8004b56 <HAL_RCC_OscConfig+0x36a>
 8004b3c:	4bca      	ldr	r3, [pc, #808]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b3e:	6a1a      	ldr	r2, [r3, #32]
 8004b40:	4bc9      	ldr	r3, [pc, #804]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b42:	2101      	movs	r1, #1
 8004b44:	438a      	bics	r2, r1
 8004b46:	621a      	str	r2, [r3, #32]
 8004b48:	4bc7      	ldr	r3, [pc, #796]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	4bc6      	ldr	r3, [pc, #792]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b4e:	2104      	movs	r1, #4
 8004b50:	438a      	bics	r2, r1
 8004b52:	621a      	str	r2, [r3, #32]
 8004b54:	e01c      	b.n	8004b90 <HAL_RCC_OscConfig+0x3a4>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b05      	cmp	r3, #5
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x38c>
 8004b5e:	4bc2      	ldr	r3, [pc, #776]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	4bc1      	ldr	r3, [pc, #772]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b64:	2104      	movs	r1, #4
 8004b66:	430a      	orrs	r2, r1
 8004b68:	621a      	str	r2, [r3, #32]
 8004b6a:	4bbf      	ldr	r3, [pc, #764]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b6c:	6a1a      	ldr	r2, [r3, #32]
 8004b6e:	4bbe      	ldr	r3, [pc, #760]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b70:	2101      	movs	r1, #1
 8004b72:	430a      	orrs	r2, r1
 8004b74:	621a      	str	r2, [r3, #32]
 8004b76:	e00b      	b.n	8004b90 <HAL_RCC_OscConfig+0x3a4>
 8004b78:	4bbb      	ldr	r3, [pc, #748]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b7a:	6a1a      	ldr	r2, [r3, #32]
 8004b7c:	4bba      	ldr	r3, [pc, #744]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b7e:	2101      	movs	r1, #1
 8004b80:	438a      	bics	r2, r1
 8004b82:	621a      	str	r2, [r3, #32]
 8004b84:	4bb8      	ldr	r3, [pc, #736]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b86:	6a1a      	ldr	r2, [r3, #32]
 8004b88:	4bb7      	ldr	r3, [pc, #732]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004b8a:	2104      	movs	r1, #4
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d014      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b98:	f7fd fd24 	bl	80025e4 <HAL_GetTick>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba0:	e009      	b.n	8004bb6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fd fd1f 	bl	80025e4 <HAL_GetTick>
 8004ba6:	0002      	movs	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	4aaf      	ldr	r2, [pc, #700]	@ (8004e6c <HAL_RCC_OscConfig+0x680>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e19a      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb6:	4bac      	ldr	r3, [pc, #688]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x3b6>
 8004bc0:	e013      	b.n	8004bea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fd0f 	bl	80025e4 <HAL_GetTick>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bca:	e009      	b.n	8004be0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bcc:	f7fd fd0a 	bl	80025e4 <HAL_GetTick>
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	4aa5      	ldr	r2, [pc, #660]	@ (8004e6c <HAL_RCC_OscConfig+0x680>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e185      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be0:	4ba1      	ldr	r3, [pc, #644]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	2202      	movs	r2, #2
 8004be6:	4013      	ands	r3, r2
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bea:	231f      	movs	r3, #31
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf4:	4b9c      	ldr	r3, [pc, #624]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	4b9b      	ldr	r3, [pc, #620]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004bfa:	499d      	ldr	r1, [pc, #628]	@ (8004e70 <HAL_RCC_OscConfig+0x684>)
 8004bfc:	400a      	ands	r2, r1
 8004bfe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2210      	movs	r2, #16
 8004c06:	4013      	ands	r3, r2
 8004c08:	d063      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d12a      	bne.n	8004c68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c12:	4b95      	ldr	r3, [pc, #596]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c16:	4b94      	ldr	r3, [pc, #592]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c18:	2104      	movs	r1, #4
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004c1e:	4b92      	ldr	r3, [pc, #584]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c22:	4b91      	ldr	r3, [pc, #580]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c24:	2101      	movs	r1, #1
 8004c26:	430a      	orrs	r2, r1
 8004c28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd fcdb 	bl	80025e4 <HAL_GetTick>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c34:	f7fd fcd6 	bl	80025e4 <HAL_GetTick>
 8004c38:	0002      	movs	r2, r0
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e152      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c46:	4b88      	ldr	r3, [pc, #544]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d0f1      	beq.n	8004c34 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c50:	4b85      	ldr	r3, [pc, #532]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c54:	22f8      	movs	r2, #248	@ 0xf8
 8004c56:	4393      	bics	r3, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	00da      	lsls	r2, r3, #3
 8004c60:	4b81      	ldr	r3, [pc, #516]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c62:	430a      	orrs	r2, r1
 8004c64:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c66:	e034      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	3305      	adds	r3, #5
 8004c6e:	d111      	bne.n	8004c94 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004c70:	4b7d      	ldr	r3, [pc, #500]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c74:	4b7c      	ldr	r3, [pc, #496]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c76:	2104      	movs	r1, #4
 8004c78:	438a      	bics	r2, r1
 8004c7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c7c:	4b7a      	ldr	r3, [pc, #488]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c80:	22f8      	movs	r2, #248	@ 0xf8
 8004c82:	4393      	bics	r3, r2
 8004c84:	0019      	movs	r1, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	00da      	lsls	r2, r3, #3
 8004c8c:	4b76      	ldr	r3, [pc, #472]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c92:	e01e      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c94:	4b74      	ldr	r3, [pc, #464]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c98:	4b73      	ldr	r3, [pc, #460]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004c9a:	2104      	movs	r1, #4
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ca0:	4b71      	ldr	r3, [pc, #452]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca4:	4b70      	ldr	r3, [pc, #448]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	438a      	bics	r2, r1
 8004caa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cac:	f7fd fc9a 	bl	80025e4 <HAL_GetTick>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004cb6:	f7fd fc95 	bl	80025e4 <HAL_GetTick>
 8004cba:	0002      	movs	r2, r0
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e111      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004cc8:	4b67      	ldr	r3, [pc, #412]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ccc:	2202      	movs	r2, #2
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d1f1      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d05c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004cdc:	4b62      	ldr	r3, [pc, #392]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	220c      	movs	r2, #12
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d00e      	beq.n	8004d06 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	220c      	movs	r2, #12
 8004cee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d114      	bne.n	8004d1e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	23c0      	movs	r3, #192	@ 0xc0
 8004cfa:	025b      	lsls	r3, r3, #9
 8004cfc:	401a      	ands	r2, r3
 8004cfe:	23c0      	movs	r3, #192	@ 0xc0
 8004d00:	025b      	lsls	r3, r3, #9
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d10b      	bne.n	8004d1e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004d06:	4b58      	ldr	r3, [pc, #352]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0a:	2380      	movs	r3, #128	@ 0x80
 8004d0c:	029b      	lsls	r3, r3, #10
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d040      	beq.n	8004d94 <HAL_RCC_OscConfig+0x5a8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d03c      	beq.n	8004d94 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0e6      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01b      	beq.n	8004d5e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004d26:	4b50      	ldr	r3, [pc, #320]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004d28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004d2c:	2180      	movs	r1, #128	@ 0x80
 8004d2e:	0249      	lsls	r1, r1, #9
 8004d30:	430a      	orrs	r2, r1
 8004d32:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fd fc56 	bl	80025e4 <HAL_GetTick>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d3e:	f7fd fc51 	bl	80025e4 <HAL_GetTick>
 8004d42:	0002      	movs	r2, r0
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0cd      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d50:	4b45      	ldr	r3, [pc, #276]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	029b      	lsls	r3, r3, #10
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x552>
 8004d5c:	e01b      	b.n	8004d96 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004d5e:	4b42      	ldr	r3, [pc, #264]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d62:	4b41      	ldr	r3, [pc, #260]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004d64:	4943      	ldr	r1, [pc, #268]	@ (8004e74 <HAL_RCC_OscConfig+0x688>)
 8004d66:	400a      	ands	r2, r1
 8004d68:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6a:	f7fd fc3b 	bl	80025e4 <HAL_GetTick>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d74:	f7fd fc36 	bl	80025e4 <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0b2      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004d86:	4b38      	ldr	r3, [pc, #224]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d8a:	2380      	movs	r3, #128	@ 0x80
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x588>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004d94:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d100      	bne.n	8004da0 <HAL_RCC_OscConfig+0x5b4>
 8004d9e:	e0a4      	b.n	8004eea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004da0:	4b31      	ldr	r3, [pc, #196]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	220c      	movs	r2, #12
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d100      	bne.n	8004dae <HAL_RCC_OscConfig+0x5c2>
 8004dac:	e078      	b.n	8004ea0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d14c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b2b      	ldr	r3, [pc, #172]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004dbc:	492e      	ldr	r1, [pc, #184]	@ (8004e78 <HAL_RCC_OscConfig+0x68c>)
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7fd fc0f 	bl	80025e4 <HAL_GetTick>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dcc:	f7fd fc0a 	bl	80025e4 <HAL_GetTick>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e086      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dde:	4b22      	ldr	r3, [pc, #136]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	2380      	movs	r3, #128	@ 0x80
 8004de4:	049b      	lsls	r3, r3, #18
 8004de6:	4013      	ands	r3, r2
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dea:	4b1f      	ldr	r3, [pc, #124]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	220f      	movs	r2, #15
 8004df0:	4393      	bics	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004df8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <HAL_RCC_OscConfig+0x690>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	431a      	orrs	r2, r3
 8004e12:	4b15      	ldr	r3, [pc, #84]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b13      	ldr	r3, [pc, #76]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b12      	ldr	r3, [pc, #72]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004e1e:	2180      	movs	r1, #128	@ 0x80
 8004e20:	0449      	lsls	r1, r1, #17
 8004e22:	430a      	orrs	r2, r1
 8004e24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e26:	f7fd fbdd 	bl	80025e4 <HAL_GetTick>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fd fbd8 	bl	80025e4 <HAL_GetTick>
 8004e34:	0002      	movs	r2, r0
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e054      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e42:	4b09      	ldr	r3, [pc, #36]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	@ 0x80
 8004e48:	049b      	lsls	r3, r3, #18
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x644>
 8004e4e:	e04c      	b.n	8004eea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e50:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b04      	ldr	r3, [pc, #16]	@ (8004e68 <HAL_RCC_OscConfig+0x67c>)
 8004e56:	4908      	ldr	r1, [pc, #32]	@ (8004e78 <HAL_RCC_OscConfig+0x68c>)
 8004e58:	400a      	ands	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5c:	f7fd fbc2 	bl	80025e4 <HAL_GetTick>
 8004e60:	0003      	movs	r3, r0
 8004e62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e64:	e015      	b.n	8004e92 <HAL_RCC_OscConfig+0x6a6>
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	00001388 	.word	0x00001388
 8004e70:	efffffff 	.word	0xefffffff
 8004e74:	fffeffff 	.word	0xfffeffff
 8004e78:	feffffff 	.word	0xfeffffff
 8004e7c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e80:	f7fd fbb0 	bl	80025e4 <HAL_GetTick>
 8004e84:	0002      	movs	r2, r0
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e02c      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e92:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <HAL_RCC_OscConfig+0x708>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	2380      	movs	r3, #128	@ 0x80
 8004e98:	049b      	lsls	r3, r3, #18
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x694>
 8004e9e:	e024      	b.n	8004eea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e01f      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004eac:	4b11      	ldr	r3, [pc, #68]	@ (8004ef4 <HAL_RCC_OscConfig+0x708>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004eb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <HAL_RCC_OscConfig+0x708>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	23c0      	movs	r3, #192	@ 0xc0
 8004ebc:	025b      	lsls	r3, r3, #9
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d10e      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	220f      	movs	r2, #15
 8004ecc:	401a      	ands	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	23f0      	movs	r3, #240	@ 0xf0
 8004eda:	039b      	lsls	r3, r3, #14
 8004edc:	401a      	ands	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	0018      	movs	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b008      	add	sp, #32
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000

08004ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0bf      	b.n	800508c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b61      	ldr	r3, [pc, #388]	@ (8005094 <HAL_RCC_ClockConfig+0x19c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	4013      	ands	r3, r2
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d911      	bls.n	8004f3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b5e      	ldr	r3, [pc, #376]	@ (8005094 <HAL_RCC_ClockConfig+0x19c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4393      	bics	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	4b5b      	ldr	r3, [pc, #364]	@ (8005094 <HAL_RCC_ClockConfig+0x19c>)
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2c:	4b59      	ldr	r3, [pc, #356]	@ (8005094 <HAL_RCC_ClockConfig+0x19c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	4013      	ands	r3, r2
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0a6      	b.n	800508c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2202      	movs	r2, #2
 8004f44:	4013      	ands	r3, r2
 8004f46:	d015      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d006      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f52:	4b51      	ldr	r3, [pc, #324]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	4b50      	ldr	r3, [pc, #320]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004f58:	21e0      	movs	r1, #224	@ 0xe0
 8004f5a:	00c9      	lsls	r1, r1, #3
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f60:	4b4d      	ldr	r3, [pc, #308]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	22f0      	movs	r2, #240	@ 0xf0
 8004f66:	4393      	bics	r3, r2
 8004f68:	0019      	movs	r1, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d04c      	beq.n	8005018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d107      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f86:	4b44      	ldr	r3, [pc, #272]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	2380      	movs	r3, #128	@ 0x80
 8004f8c:	029b      	lsls	r3, r3, #10
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d120      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e07a      	b.n	800508c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	2380      	movs	r3, #128	@ 0x80
 8004fa4:	049b      	lsls	r3, r3, #18
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d114      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e06e      	b.n	800508c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d107      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004fb6:	4b38      	ldr	r3, [pc, #224]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fba:	2380      	movs	r3, #128	@ 0x80
 8004fbc:	029b      	lsls	r3, r3, #10
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d108      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e062      	b.n	800508c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc6:	4b34      	ldr	r3, [pc, #208]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e05b      	b.n	800508c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd4:	4b30      	ldr	r3, [pc, #192]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	4393      	bics	r3, r2
 8004fdc:	0019      	movs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe8:	f7fd fafc 	bl	80025e4 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff0:	e009      	b.n	8005006 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff2:	f7fd faf7 	bl	80025e4 <HAL_GetTick>
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	4a27      	ldr	r2, [pc, #156]	@ (800509c <HAL_RCC_ClockConfig+0x1a4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e042      	b.n	800508c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005006:	4b24      	ldr	r3, [pc, #144]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	220c      	movs	r2, #12
 800500c:	401a      	ands	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	429a      	cmp	r2, r3
 8005016:	d1ec      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005018:	4b1e      	ldr	r3, [pc, #120]	@ (8005094 <HAL_RCC_ClockConfig+0x19c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2201      	movs	r2, #1
 800501e:	4013      	ands	r3, r2
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d211      	bcs.n	800504a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005026:	4b1b      	ldr	r3, [pc, #108]	@ (8005094 <HAL_RCC_ClockConfig+0x19c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2201      	movs	r2, #1
 800502c:	4393      	bics	r3, r2
 800502e:	0019      	movs	r1, r3
 8005030:	4b18      	ldr	r3, [pc, #96]	@ (8005094 <HAL_RCC_ClockConfig+0x19c>)
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005038:	4b16      	ldr	r3, [pc, #88]	@ (8005094 <HAL_RCC_ClockConfig+0x19c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2201      	movs	r2, #1
 800503e:	4013      	ands	r3, r2
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d001      	beq.n	800504a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e020      	b.n	800508c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2204      	movs	r2, #4
 8005050:	4013      	ands	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005054:	4b10      	ldr	r3, [pc, #64]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a11      	ldr	r2, [pc, #68]	@ (80050a0 <HAL_RCC_ClockConfig+0x1a8>)
 800505a:	4013      	ands	r3, r2
 800505c:	0019      	movs	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005068:	f000 f820 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 800506c:	0001      	movs	r1, r0
 800506e:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <HAL_RCC_ClockConfig+0x1a0>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	220f      	movs	r2, #15
 8005076:	4013      	ands	r3, r2
 8005078:	4a0a      	ldr	r2, [pc, #40]	@ (80050a4 <HAL_RCC_ClockConfig+0x1ac>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	000a      	movs	r2, r1
 800507e:	40da      	lsrs	r2, r3
 8005080:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b0>)
 8005082:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005084:	2000      	movs	r0, #0
 8005086:	f7fd fa67 	bl	8002558 <HAL_InitTick>
  
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	0018      	movs	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	b004      	add	sp, #16
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40022000 	.word	0x40022000
 8005098:	40021000 	.word	0x40021000
 800509c:	00001388 	.word	0x00001388
 80050a0:	fffff8ff 	.word	0xfffff8ff
 80050a4:	080072f4 	.word	0x080072f4
 80050a8:	20000004 	.word	0x20000004

080050ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80050c6:	4b2d      	ldr	r3, [pc, #180]	@ (800517c <HAL_RCC_GetSysClockFreq+0xd0>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	220c      	movs	r2, #12
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d046      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0xb8>
 80050d6:	d848      	bhi.n	800516a <HAL_RCC_GetSysClockFreq+0xbe>
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d002      	beq.n	80050e2 <HAL_RCC_GetSysClockFreq+0x36>
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d003      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0x3c>
 80050e0:	e043      	b.n	800516a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050e2:	4b27      	ldr	r3, [pc, #156]	@ (8005180 <HAL_RCC_GetSysClockFreq+0xd4>)
 80050e4:	613b      	str	r3, [r7, #16]
      break;
 80050e6:	e043      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	0c9b      	lsrs	r3, r3, #18
 80050ec:	220f      	movs	r2, #15
 80050ee:	4013      	ands	r3, r2
 80050f0:	4a24      	ldr	r2, [pc, #144]	@ (8005184 <HAL_RCC_GetSysClockFreq+0xd8>)
 80050f2:	5cd3      	ldrb	r3, [r2, r3]
 80050f4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80050f6:	4b21      	ldr	r3, [pc, #132]	@ (800517c <HAL_RCC_GetSysClockFreq+0xd0>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	220f      	movs	r2, #15
 80050fc:	4013      	ands	r3, r2
 80050fe:	4a22      	ldr	r2, [pc, #136]	@ (8005188 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005100:	5cd3      	ldrb	r3, [r2, r3]
 8005102:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	23c0      	movs	r3, #192	@ 0xc0
 8005108:	025b      	lsls	r3, r3, #9
 800510a:	401a      	ands	r2, r3
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	025b      	lsls	r3, r3, #9
 8005110:	429a      	cmp	r2, r3
 8005112:	d109      	bne.n	8005128 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	481a      	ldr	r0, [pc, #104]	@ (8005180 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005118:	f7fb f800 	bl	800011c <__udivsi3>
 800511c:	0003      	movs	r3, r0
 800511e:	001a      	movs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4353      	muls	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e01a      	b.n	800515e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	23c0      	movs	r3, #192	@ 0xc0
 800512c:	025b      	lsls	r3, r3, #9
 800512e:	401a      	ands	r2, r3
 8005130:	23c0      	movs	r3, #192	@ 0xc0
 8005132:	025b      	lsls	r3, r3, #9
 8005134:	429a      	cmp	r2, r3
 8005136:	d109      	bne.n	800514c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	4814      	ldr	r0, [pc, #80]	@ (800518c <HAL_RCC_GetSysClockFreq+0xe0>)
 800513c:	f7fa ffee 	bl	800011c <__udivsi3>
 8005140:	0003      	movs	r3, r0
 8005142:	001a      	movs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4353      	muls	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e008      	b.n	800515e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	480c      	ldr	r0, [pc, #48]	@ (8005180 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005150:	f7fa ffe4 	bl	800011c <__udivsi3>
 8005154:	0003      	movs	r3, r0
 8005156:	001a      	movs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4353      	muls	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	613b      	str	r3, [r7, #16]
      break;
 8005162:	e005      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005164:	4b09      	ldr	r3, [pc, #36]	@ (800518c <HAL_RCC_GetSysClockFreq+0xe0>)
 8005166:	613b      	str	r3, [r7, #16]
      break;
 8005168:	e002      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800516a:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <HAL_RCC_GetSysClockFreq+0xd4>)
 800516c:	613b      	str	r3, [r7, #16]
      break;
 800516e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005170:	693b      	ldr	r3, [r7, #16]
}
 8005172:	0018      	movs	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	b006      	add	sp, #24
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	40021000 	.word	0x40021000
 8005180:	007a1200 	.word	0x007a1200
 8005184:	08007a84 	.word	0x08007a84
 8005188:	08007a94 	.word	0x08007a94
 800518c:	02dc6c00 	.word	0x02dc6c00

08005190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005194:	4b02      	ldr	r3, [pc, #8]	@ (80051a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	0018      	movs	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	46c0      	nop			@ (mov r8, r8)
 80051a0:	20000004 	.word	0x20000004

080051a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80051a8:	f7ff fff2 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051ac:	0001      	movs	r1, r0
 80051ae:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	2207      	movs	r2, #7
 80051b6:	4013      	ands	r3, r2
 80051b8:	4a04      	ldr	r2, [pc, #16]	@ (80051cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ba:	5cd3      	ldrb	r3, [r2, r3]
 80051bc:	40d9      	lsrs	r1, r3
 80051be:	000b      	movs	r3, r1
}    
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	40021000 	.word	0x40021000
 80051cc:	08007304 	.word	0x08007304

080051d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2380      	movs	r3, #128	@ 0x80
 80051e6:	025b      	lsls	r3, r3, #9
 80051e8:	4013      	ands	r3, r2
 80051ea:	d100      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80051ec:	e08e      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80051ee:	2017      	movs	r0, #23
 80051f0:	183b      	adds	r3, r7, r0
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f6:	4b67      	ldr	r3, [pc, #412]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	2380      	movs	r3, #128	@ 0x80
 80051fc:	055b      	lsls	r3, r3, #21
 80051fe:	4013      	ands	r3, r2
 8005200:	d110      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005202:	4b64      	ldr	r3, [pc, #400]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005204:	69da      	ldr	r2, [r3, #28]
 8005206:	4b63      	ldr	r3, [pc, #396]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005208:	2180      	movs	r1, #128	@ 0x80
 800520a:	0549      	lsls	r1, r1, #21
 800520c:	430a      	orrs	r2, r1
 800520e:	61da      	str	r2, [r3, #28]
 8005210:	4b60      	ldr	r3, [pc, #384]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	2380      	movs	r3, #128	@ 0x80
 8005216:	055b      	lsls	r3, r3, #21
 8005218:	4013      	ands	r3, r2
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521e:	183b      	adds	r3, r7, r0
 8005220:	2201      	movs	r2, #1
 8005222:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005224:	4b5c      	ldr	r3, [pc, #368]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	2380      	movs	r3, #128	@ 0x80
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4013      	ands	r3, r2
 800522e:	d11a      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005230:	4b59      	ldr	r3, [pc, #356]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b58      	ldr	r3, [pc, #352]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005236:	2180      	movs	r1, #128	@ 0x80
 8005238:	0049      	lsls	r1, r1, #1
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523e:	f7fd f9d1 	bl	80025e4 <HAL_GetTick>
 8005242:	0003      	movs	r3, r0
 8005244:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005246:	e008      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005248:	f7fd f9cc 	bl	80025e4 <HAL_GetTick>
 800524c:	0002      	movs	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b64      	cmp	r3, #100	@ 0x64
 8005254:	d901      	bls.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e097      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b4f      	ldr	r3, [pc, #316]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	2380      	movs	r3, #128	@ 0x80
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4013      	ands	r3, r2
 8005264:	d0f0      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005266:	4b4b      	ldr	r3, [pc, #300]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005268:	6a1a      	ldr	r2, [r3, #32]
 800526a:	23c0      	movs	r3, #192	@ 0xc0
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4013      	ands	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d034      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	23c0      	movs	r3, #192	@ 0xc0
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4013      	ands	r3, r2
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	429a      	cmp	r2, r3
 8005286:	d02c      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005288:	4b42      	ldr	r3, [pc, #264]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	4a43      	ldr	r2, [pc, #268]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005292:	4b40      	ldr	r3, [pc, #256]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005294:	6a1a      	ldr	r2, [r3, #32]
 8005296:	4b3f      	ldr	r3, [pc, #252]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005298:	2180      	movs	r1, #128	@ 0x80
 800529a:	0249      	lsls	r1, r1, #9
 800529c:	430a      	orrs	r2, r1
 800529e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052a0:	4b3c      	ldr	r3, [pc, #240]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052a2:	6a1a      	ldr	r2, [r3, #32]
 80052a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052a6:	493e      	ldr	r1, [pc, #248]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a8:	400a      	ands	r2, r1
 80052aa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052ac:	4b39      	ldr	r3, [pc, #228]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	4013      	ands	r3, r2
 80052b8:	d013      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fd f993 	bl	80025e4 <HAL_GetTick>
 80052be:	0003      	movs	r3, r0
 80052c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c2:	e009      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c4:	f7fd f98e 	bl	80025e4 <HAL_GetTick>
 80052c8:	0002      	movs	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	4a35      	ldr	r2, [pc, #212]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e058      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	2202      	movs	r2, #2
 80052de:	4013      	ands	r3, r2
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4a2d      	ldr	r2, [pc, #180]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	0019      	movs	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	4b28      	ldr	r3, [pc, #160]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052f2:	430a      	orrs	r2, r1
 80052f4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052f6:	2317      	movs	r3, #23
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d105      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005300:	4b24      	ldr	r3, [pc, #144]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	4b23      	ldr	r3, [pc, #140]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005306:	4928      	ldr	r1, [pc, #160]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005308:	400a      	ands	r2, r1
 800530a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2201      	movs	r2, #1
 8005312:	4013      	ands	r3, r2
 8005314:	d009      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005316:	4b1f      	ldr	r3, [pc, #124]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531a:	2203      	movs	r2, #3
 800531c:	4393      	bics	r3, r2
 800531e:	0019      	movs	r1, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	4b1b      	ldr	r3, [pc, #108]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005326:	430a      	orrs	r2, r1
 8005328:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2220      	movs	r2, #32
 8005330:	4013      	ands	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005334:	4b17      	ldr	r3, [pc, #92]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	2210      	movs	r2, #16
 800533a:	4393      	bics	r3, r2
 800533c:	0019      	movs	r1, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	4b14      	ldr	r3, [pc, #80]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005344:	430a      	orrs	r2, r1
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	2380      	movs	r3, #128	@ 0x80
 800534e:	029b      	lsls	r3, r3, #10
 8005350:	4013      	ands	r3, r2
 8005352:	d009      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005354:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005358:	2280      	movs	r2, #128	@ 0x80
 800535a:	4393      	bics	r3, r2
 800535c:	0019      	movs	r1, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005364:	430a      	orrs	r2, r1
 8005366:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	2380      	movs	r3, #128	@ 0x80
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4013      	ands	r3, r2
 8005372:	d009      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005374:	4b07      	ldr	r3, [pc, #28]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	2240      	movs	r2, #64	@ 0x40
 800537a:	4393      	bics	r3, r2
 800537c:	0019      	movs	r1, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	4b04      	ldr	r3, [pc, #16]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005384:	430a      	orrs	r2, r1
 8005386:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	0018      	movs	r0, r3
 800538c:	46bd      	mov	sp, r7
 800538e:	b006      	add	sp, #24
 8005390:	bd80      	pop	{r7, pc}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	40021000 	.word	0x40021000
 8005398:	40007000 	.word	0x40007000
 800539c:	fffffcff 	.word	0xfffffcff
 80053a0:	fffeffff 	.word	0xfffeffff
 80053a4:	00001388 	.word	0x00001388
 80053a8:	efffffff 	.word	0xefffffff

080053ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e042      	b.n	8005444 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	223d      	movs	r2, #61	@ 0x3d
 80053c2:	5c9b      	ldrb	r3, [r3, r2]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	223c      	movs	r2, #60	@ 0x3c
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7fc fcb5 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	223d      	movs	r2, #61	@ 0x3d
 80053de:	2102      	movs	r1, #2
 80053e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	0019      	movs	r1, r3
 80053ec:	0010      	movs	r0, r2
 80053ee:	f000 fbbf 	bl	8005b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2246      	movs	r2, #70	@ 0x46
 80053f6:	2101      	movs	r1, #1
 80053f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	223e      	movs	r2, #62	@ 0x3e
 80053fe:	2101      	movs	r1, #1
 8005400:	5499      	strb	r1, [r3, r2]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	223f      	movs	r2, #63	@ 0x3f
 8005406:	2101      	movs	r1, #1
 8005408:	5499      	strb	r1, [r3, r2]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2240      	movs	r2, #64	@ 0x40
 800540e:	2101      	movs	r1, #1
 8005410:	5499      	strb	r1, [r3, r2]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2241      	movs	r2, #65	@ 0x41
 8005416:	2101      	movs	r1, #1
 8005418:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2242      	movs	r2, #66	@ 0x42
 800541e:	2101      	movs	r1, #1
 8005420:	5499      	strb	r1, [r3, r2]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2243      	movs	r2, #67	@ 0x43
 8005426:	2101      	movs	r1, #1
 8005428:	5499      	strb	r1, [r3, r2]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2244      	movs	r2, #68	@ 0x44
 800542e:	2101      	movs	r1, #1
 8005430:	5499      	strb	r1, [r3, r2]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2245      	movs	r2, #69	@ 0x45
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	223d      	movs	r2, #61	@ 0x3d
 800543e:	2101      	movs	r1, #1
 8005440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	0018      	movs	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	b002      	add	sp, #8
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	223d      	movs	r2, #61	@ 0x3d
 8005458:	5c9b      	ldrb	r3, [r3, r2]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d001      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e036      	b.n	80054d2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	223d      	movs	r2, #61	@ 0x3d
 8005468:	2102      	movs	r1, #2
 800546a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2101      	movs	r1, #1
 8005478:	430a      	orrs	r2, r1
 800547a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a16      	ldr	r2, [pc, #88]	@ (80054dc <HAL_TIM_Base_Start_IT+0x90>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00a      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x50>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	05db      	lsls	r3, r3, #23
 800548e:	429a      	cmp	r2, r3
 8005490:	d004      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x50>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a12      	ldr	r2, [pc, #72]	@ (80054e0 <HAL_TIM_Base_Start_IT+0x94>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d111      	bne.n	80054c0 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2207      	movs	r2, #7
 80054a4:	4013      	ands	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d010      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2101      	movs	r1, #1
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054be:	e007      	b.n	80054d0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2101      	movs	r1, #1
 80054cc:	430a      	orrs	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b004      	add	sp, #16
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	46c0      	nop			@ (mov r8, r8)
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40000400 	.word	0x40000400

080054e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e042      	b.n	800557c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	223d      	movs	r2, #61	@ 0x3d
 80054fa:	5c9b      	ldrb	r3, [r3, r2]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	223c      	movs	r2, #60	@ 0x3c
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	0018      	movs	r0, r3
 800550e:	f7fc fbfb 	bl	8001d08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	223d      	movs	r2, #61	@ 0x3d
 8005516:	2102      	movs	r1, #2
 8005518:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3304      	adds	r3, #4
 8005522:	0019      	movs	r1, r3
 8005524:	0010      	movs	r0, r2
 8005526:	f000 fb23 	bl	8005b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2246      	movs	r2, #70	@ 0x46
 800552e:	2101      	movs	r1, #1
 8005530:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	223e      	movs	r2, #62	@ 0x3e
 8005536:	2101      	movs	r1, #1
 8005538:	5499      	strb	r1, [r3, r2]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	223f      	movs	r2, #63	@ 0x3f
 800553e:	2101      	movs	r1, #1
 8005540:	5499      	strb	r1, [r3, r2]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2240      	movs	r2, #64	@ 0x40
 8005546:	2101      	movs	r1, #1
 8005548:	5499      	strb	r1, [r3, r2]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2241      	movs	r2, #65	@ 0x41
 800554e:	2101      	movs	r1, #1
 8005550:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2242      	movs	r2, #66	@ 0x42
 8005556:	2101      	movs	r1, #1
 8005558:	5499      	strb	r1, [r3, r2]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2243      	movs	r2, #67	@ 0x43
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2244      	movs	r2, #68	@ 0x44
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2245      	movs	r2, #69	@ 0x45
 800556e:	2101      	movs	r1, #1
 8005570:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	223d      	movs	r2, #61	@ 0x3d
 8005576:	2101      	movs	r1, #1
 8005578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b002      	add	sp, #8
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d108      	bne.n	80055a6 <HAL_TIM_PWM_Start+0x22>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	223e      	movs	r2, #62	@ 0x3e
 8005598:	5c9b      	ldrb	r3, [r3, r2]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	1e5a      	subs	r2, r3, #1
 80055a0:	4193      	sbcs	r3, r2
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	e01f      	b.n	80055e6 <HAL_TIM_PWM_Start+0x62>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d108      	bne.n	80055be <HAL_TIM_PWM_Start+0x3a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	223f      	movs	r2, #63	@ 0x3f
 80055b0:	5c9b      	ldrb	r3, [r3, r2]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	1e5a      	subs	r2, r3, #1
 80055b8:	4193      	sbcs	r3, r2
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e013      	b.n	80055e6 <HAL_TIM_PWM_Start+0x62>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d108      	bne.n	80055d6 <HAL_TIM_PWM_Start+0x52>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2240      	movs	r2, #64	@ 0x40
 80055c8:	5c9b      	ldrb	r3, [r3, r2]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	1e5a      	subs	r2, r3, #1
 80055d0:	4193      	sbcs	r3, r2
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e007      	b.n	80055e6 <HAL_TIM_PWM_Start+0x62>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2241      	movs	r2, #65	@ 0x41
 80055da:	5c9b      	ldrb	r3, [r3, r2]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	1e5a      	subs	r2, r3, #1
 80055e2:	4193      	sbcs	r3, r2
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e06a      	b.n	80056c4 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_PWM_Start+0x7a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	223e      	movs	r2, #62	@ 0x3e
 80055f8:	2102      	movs	r1, #2
 80055fa:	5499      	strb	r1, [r3, r2]
 80055fc:	e013      	b.n	8005626 <HAL_TIM_PWM_Start+0xa2>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start+0x8a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	223f      	movs	r2, #63	@ 0x3f
 8005608:	2102      	movs	r1, #2
 800560a:	5499      	strb	r1, [r3, r2]
 800560c:	e00b      	b.n	8005626 <HAL_TIM_PWM_Start+0xa2>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d104      	bne.n	800561e <HAL_TIM_PWM_Start+0x9a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2240      	movs	r2, #64	@ 0x40
 8005618:	2102      	movs	r1, #2
 800561a:	5499      	strb	r1, [r3, r2]
 800561c:	e003      	b.n	8005626 <HAL_TIM_PWM_Start+0xa2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2241      	movs	r2, #65	@ 0x41
 8005622:	2102      	movs	r1, #2
 8005624:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	0018      	movs	r0, r3
 8005630:	f000 fd02 	bl	8006038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a24      	ldr	r2, [pc, #144]	@ (80056cc <HAL_TIM_PWM_Start+0x148>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_TIM_PWM_Start+0xce>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a23      	ldr	r2, [pc, #140]	@ (80056d0 <HAL_TIM_PWM_Start+0x14c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_TIM_PWM_Start+0xce>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a21      	ldr	r2, [pc, #132]	@ (80056d4 <HAL_TIM_PWM_Start+0x150>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_TIM_PWM_Start+0xd2>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <HAL_TIM_PWM_Start+0xd4>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2180      	movs	r1, #128	@ 0x80
 8005668:	0209      	lsls	r1, r1, #8
 800566a:	430a      	orrs	r2, r1
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a16      	ldr	r2, [pc, #88]	@ (80056cc <HAL_TIM_PWM_Start+0x148>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00a      	beq.n	800568e <HAL_TIM_PWM_Start+0x10a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	2380      	movs	r3, #128	@ 0x80
 800567e:	05db      	lsls	r3, r3, #23
 8005680:	429a      	cmp	r2, r3
 8005682:	d004      	beq.n	800568e <HAL_TIM_PWM_Start+0x10a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a13      	ldr	r2, [pc, #76]	@ (80056d8 <HAL_TIM_PWM_Start+0x154>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d111      	bne.n	80056b2 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2207      	movs	r2, #7
 8005696:	4013      	ands	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b06      	cmp	r3, #6
 800569e:	d010      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2101      	movs	r1, #1
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b0:	e007      	b.n	80056c2 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2101      	movs	r1, #1
 80056be:	430a      	orrs	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	0018      	movs	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b004      	add	sp, #16
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40014400 	.word	0x40014400
 80056d4:	40014800 	.word	0x40014800
 80056d8:	40000400 	.word	0x40000400

080056dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6839      	ldr	r1, [r7, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	0018      	movs	r0, r3
 80056f0:	f000 fca2 	bl	8006038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2d      	ldr	r2, [pc, #180]	@ (80057b0 <HAL_TIM_PWM_Stop+0xd4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_TIM_PWM_Stop+0x36>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2c      	ldr	r2, [pc, #176]	@ (80057b4 <HAL_TIM_PWM_Stop+0xd8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIM_PWM_Stop+0x36>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a2a      	ldr	r2, [pc, #168]	@ (80057b8 <HAL_TIM_PWM_Stop+0xdc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <HAL_TIM_PWM_Stop+0x3a>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <HAL_TIM_PWM_Stop+0x3c>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d013      	beq.n	8005744 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	4a26      	ldr	r2, [pc, #152]	@ (80057bc <HAL_TIM_PWM_Stop+0xe0>)
 8005724:	4013      	ands	r3, r2
 8005726:	d10d      	bne.n	8005744 <HAL_TIM_PWM_Stop+0x68>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	4a24      	ldr	r2, [pc, #144]	@ (80057c0 <HAL_TIM_PWM_Stop+0xe4>)
 8005730:	4013      	ands	r3, r2
 8005732:	d107      	bne.n	8005744 <HAL_TIM_PWM_Stop+0x68>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4921      	ldr	r1, [pc, #132]	@ (80057c4 <HAL_TIM_PWM_Stop+0xe8>)
 8005740:	400a      	ands	r2, r1
 8005742:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	4a1c      	ldr	r2, [pc, #112]	@ (80057bc <HAL_TIM_PWM_Stop+0xe0>)
 800574c:	4013      	ands	r3, r2
 800574e:	d10d      	bne.n	800576c <HAL_TIM_PWM_Stop+0x90>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	4a1a      	ldr	r2, [pc, #104]	@ (80057c0 <HAL_TIM_PWM_Stop+0xe4>)
 8005758:	4013      	ands	r3, r2
 800575a:	d107      	bne.n	800576c <HAL_TIM_PWM_Stop+0x90>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2101      	movs	r1, #1
 8005768:	438a      	bics	r2, r1
 800576a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d104      	bne.n	800577c <HAL_TIM_PWM_Stop+0xa0>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	223e      	movs	r2, #62	@ 0x3e
 8005776:	2101      	movs	r1, #1
 8005778:	5499      	strb	r1, [r3, r2]
 800577a:	e013      	b.n	80057a4 <HAL_TIM_PWM_Stop+0xc8>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b04      	cmp	r3, #4
 8005780:	d104      	bne.n	800578c <HAL_TIM_PWM_Stop+0xb0>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	223f      	movs	r2, #63	@ 0x3f
 8005786:	2101      	movs	r1, #1
 8005788:	5499      	strb	r1, [r3, r2]
 800578a:	e00b      	b.n	80057a4 <HAL_TIM_PWM_Stop+0xc8>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b08      	cmp	r3, #8
 8005790:	d104      	bne.n	800579c <HAL_TIM_PWM_Stop+0xc0>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2240      	movs	r2, #64	@ 0x40
 8005796:	2101      	movs	r1, #1
 8005798:	5499      	strb	r1, [r3, r2]
 800579a:	e003      	b.n	80057a4 <HAL_TIM_PWM_Stop+0xc8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2241      	movs	r2, #65	@ 0x41
 80057a0:	2101      	movs	r1, #1
 80057a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	0018      	movs	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b002      	add	sp, #8
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800
 80057bc:	00001111 	.word	0x00001111
 80057c0:	00000444 	.word	0x00000444
 80057c4:	ffff7fff 	.word	0xffff7fff

080057c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2202      	movs	r2, #2
 80057e4:	4013      	ands	r3, r2
 80057e6:	d021      	beq.n	800582c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2202      	movs	r2, #2
 80057ec:	4013      	ands	r3, r2
 80057ee:	d01d      	beq.n	800582c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2203      	movs	r2, #3
 80057f6:	4252      	negs	r2, r2
 80057f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2203      	movs	r2, #3
 8005808:	4013      	ands	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	0018      	movs	r0, r3
 8005810:	f000 f996 	bl	8005b40 <HAL_TIM_IC_CaptureCallback>
 8005814:	e007      	b.n	8005826 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0018      	movs	r0, r3
 800581a:	f000 f989 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	0018      	movs	r0, r3
 8005822:	f000 f995 	bl	8005b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2204      	movs	r2, #4
 8005830:	4013      	ands	r3, r2
 8005832:	d022      	beq.n	800587a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2204      	movs	r2, #4
 8005838:	4013      	ands	r3, r2
 800583a:	d01e      	beq.n	800587a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2205      	movs	r2, #5
 8005842:	4252      	negs	r2, r2
 8005844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	23c0      	movs	r3, #192	@ 0xc0
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4013      	ands	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	0018      	movs	r0, r3
 800585e:	f000 f96f 	bl	8005b40 <HAL_TIM_IC_CaptureCallback>
 8005862:	e007      	b.n	8005874 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	0018      	movs	r0, r3
 8005868:	f000 f962 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 f96e 	bl	8005b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2208      	movs	r2, #8
 800587e:	4013      	ands	r3, r2
 8005880:	d021      	beq.n	80058c6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2208      	movs	r2, #8
 8005886:	4013      	ands	r3, r2
 8005888:	d01d      	beq.n	80058c6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2209      	movs	r2, #9
 8005890:	4252      	negs	r2, r2
 8005892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2204      	movs	r2, #4
 8005898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	2203      	movs	r2, #3
 80058a2:	4013      	ands	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 f949 	bl	8005b40 <HAL_TIM_IC_CaptureCallback>
 80058ae:	e007      	b.n	80058c0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f000 f93c 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f000 f948 	bl	8005b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2210      	movs	r2, #16
 80058ca:	4013      	ands	r3, r2
 80058cc:	d022      	beq.n	8005914 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2210      	movs	r2, #16
 80058d2:	4013      	ands	r3, r2
 80058d4:	d01e      	beq.n	8005914 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2211      	movs	r2, #17
 80058dc:	4252      	negs	r2, r2
 80058de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2208      	movs	r2, #8
 80058e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	23c0      	movs	r3, #192	@ 0xc0
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4013      	ands	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	0018      	movs	r0, r3
 80058f8:	f000 f922 	bl	8005b40 <HAL_TIM_IC_CaptureCallback>
 80058fc:	e007      	b.n	800590e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f000 f915 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	0018      	movs	r0, r3
 800590a:	f000 f921 	bl	8005b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2201      	movs	r2, #1
 8005918:	4013      	ands	r3, r2
 800591a:	d00c      	beq.n	8005936 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	4013      	ands	r3, r2
 8005922:	d008      	beq.n	8005936 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2202      	movs	r2, #2
 800592a:	4252      	negs	r2, r2
 800592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	0018      	movs	r0, r3
 8005932:	f7fc f8c9 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2280      	movs	r2, #128	@ 0x80
 800593a:	4013      	ands	r3, r2
 800593c:	d00c      	beq.n	8005958 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2280      	movs	r2, #128	@ 0x80
 8005942:	4013      	ands	r3, r2
 8005944:	d008      	beq.n	8005958 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2281      	movs	r2, #129	@ 0x81
 800594c:	4252      	negs	r2, r2
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 fbf4 	bl	8006140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2240      	movs	r2, #64	@ 0x40
 800595c:	4013      	ands	r3, r2
 800595e:	d00c      	beq.n	800597a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2240      	movs	r2, #64	@ 0x40
 8005964:	4013      	ands	r3, r2
 8005966:	d008      	beq.n	800597a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2241      	movs	r2, #65	@ 0x41
 800596e:	4252      	negs	r2, r2
 8005970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	0018      	movs	r0, r3
 8005976:	f000 f8f3 	bl	8005b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2220      	movs	r2, #32
 800597e:	4013      	ands	r3, r2
 8005980:	d00c      	beq.n	800599c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	4013      	ands	r3, r2
 8005988:	d008      	beq.n	800599c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2221      	movs	r2, #33	@ 0x21
 8005990:	4252      	negs	r2, r2
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	0018      	movs	r0, r3
 8005998:	f000 fbca 	bl	8006130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599c:	46c0      	nop			@ (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b004      	add	sp, #16
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b0:	2317      	movs	r3, #23
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	223c      	movs	r2, #60	@ 0x3c
 80059bc:	5c9b      	ldrb	r3, [r3, r2]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0ad      	b.n	8005b22 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	223c      	movs	r2, #60	@ 0x3c
 80059ca:	2101      	movs	r1, #1
 80059cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	d100      	bne.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80059d4:	e076      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b0c      	cmp	r3, #12
 80059da:	d900      	bls.n	80059de <HAL_TIM_PWM_ConfigChannel+0x3a>
 80059dc:	e095      	b.n	8005b0a <HAL_TIM_PWM_ConfigChannel+0x166>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d04e      	beq.n	8005a82 <HAL_TIM_PWM_ConfigChannel+0xde>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d900      	bls.n	80059ec <HAL_TIM_PWM_ConfigChannel+0x48>
 80059ea:	e08e      	b.n	8005b0a <HAL_TIM_PWM_ConfigChannel+0x166>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x56>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d021      	beq.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x98>
 80059f8:	e087      	b.n	8005b0a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0011      	movs	r1, r2
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 f938 	bl	8005c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2108      	movs	r1, #8
 8005a14:	430a      	orrs	r2, r1
 8005a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2104      	movs	r1, #4
 8005a24:	438a      	bics	r2, r1
 8005a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6999      	ldr	r1, [r3, #24]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	619a      	str	r2, [r3, #24]
      break;
 8005a3a:	e06b      	b.n	8005b14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f000 f995 	bl	8005d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2180      	movs	r1, #128	@ 0x80
 8005a56:	0109      	lsls	r1, r1, #4
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4931      	ldr	r1, [pc, #196]	@ (8005b2c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005a68:	400a      	ands	r2, r1
 8005a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6999      	ldr	r1, [r3, #24]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	021a      	lsls	r2, r3, #8
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	619a      	str	r2, [r3, #24]
      break;
 8005a80:	e048      	b.n	8005b14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	0011      	movs	r1, r2
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 f9f0 	bl	8005e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2108      	movs	r1, #8
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69da      	ldr	r2, [r3, #28]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2104      	movs	r1, #4
 8005aac:	438a      	bics	r2, r1
 8005aae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69d9      	ldr	r1, [r3, #28]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	61da      	str	r2, [r3, #28]
      break;
 8005ac2:	e027      	b.n	8005b14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	0011      	movs	r1, r2
 8005acc:	0018      	movs	r0, r3
 8005ace:	f000 fa4f 	bl	8005f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2180      	movs	r1, #128	@ 0x80
 8005ade:	0109      	lsls	r1, r1, #4
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69da      	ldr	r2, [r3, #28]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	490f      	ldr	r1, [pc, #60]	@ (8005b2c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005af0:	400a      	ands	r2, r1
 8005af2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69d9      	ldr	r1, [r3, #28]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	021a      	lsls	r2, r3, #8
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	61da      	str	r2, [r3, #28]
      break;
 8005b08:	e004      	b.n	8005b14 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005b0a:	2317      	movs	r3, #23
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
      break;
 8005b12:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	223c      	movs	r2, #60	@ 0x3c
 8005b18:	2100      	movs	r1, #0
 8005b1a:	5499      	strb	r1, [r3, r2]

  return status;
 8005b1c:	2317      	movs	r3, #23
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	781b      	ldrb	r3, [r3, #0]
}
 8005b22:	0018      	movs	r0, r3
 8005b24:	46bd      	mov	sp, r7
 8005b26:	b006      	add	sp, #24
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	46c0      	nop			@ (mov r8, r8)
 8005b2c:	fffffbff 	.word	0xfffffbff

08005b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b38:	46c0      	nop			@ (mov r8, r8)
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b002      	add	sp, #8
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b48:	46c0      	nop			@ (mov r8, r8)
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	b002      	add	sp, #8
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b58:	46c0      	nop			@ (mov r8, r8)
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b002      	add	sp, #8
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b68:	46c0      	nop			@ (mov r8, r8)
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a37      	ldr	r2, [pc, #220]	@ (8005c60 <TIM_Base_SetConfig+0xf0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d008      	beq.n	8005b9a <TIM_Base_SetConfig+0x2a>
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	2380      	movs	r3, #128	@ 0x80
 8005b8c:	05db      	lsls	r3, r3, #23
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d003      	beq.n	8005b9a <TIM_Base_SetConfig+0x2a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a33      	ldr	r2, [pc, #204]	@ (8005c64 <TIM_Base_SetConfig+0xf4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d108      	bne.n	8005bac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2270      	movs	r2, #112	@ 0x70
 8005b9e:	4393      	bics	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <TIM_Base_SetConfig+0xf0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d014      	beq.n	8005bde <TIM_Base_SetConfig+0x6e>
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	2380      	movs	r3, #128	@ 0x80
 8005bb8:	05db      	lsls	r3, r3, #23
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d00f      	beq.n	8005bde <TIM_Base_SetConfig+0x6e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a28      	ldr	r2, [pc, #160]	@ (8005c64 <TIM_Base_SetConfig+0xf4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <TIM_Base_SetConfig+0x6e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a27      	ldr	r2, [pc, #156]	@ (8005c68 <TIM_Base_SetConfig+0xf8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <TIM_Base_SetConfig+0x6e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a26      	ldr	r2, [pc, #152]	@ (8005c6c <TIM_Base_SetConfig+0xfc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_Base_SetConfig+0x6e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a25      	ldr	r2, [pc, #148]	@ (8005c70 <TIM_Base_SetConfig+0x100>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d108      	bne.n	8005bf0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a24      	ldr	r2, [pc, #144]	@ (8005c74 <TIM_Base_SetConfig+0x104>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2280      	movs	r2, #128	@ 0x80
 8005bf4:	4393      	bics	r3, r2
 8005bf6:	001a      	movs	r2, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a11      	ldr	r2, [pc, #68]	@ (8005c60 <TIM_Base_SetConfig+0xf0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d007      	beq.n	8005c2e <TIM_Base_SetConfig+0xbe>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a12      	ldr	r2, [pc, #72]	@ (8005c6c <TIM_Base_SetConfig+0xfc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_Base_SetConfig+0xbe>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a11      	ldr	r2, [pc, #68]	@ (8005c70 <TIM_Base_SetConfig+0x100>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d103      	bne.n	8005c36 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2201      	movs	r2, #1
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d106      	bne.n	8005c56 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	4393      	bics	r3, r2
 8005c50:	001a      	movs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	611a      	str	r2, [r3, #16]
  }
}
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	b004      	add	sp, #16
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	46c0      	nop			@ (mov r8, r8)
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40002000 	.word	0x40002000
 8005c6c:	40014400 	.word	0x40014400
 8005c70:	40014800 	.word	0x40014800
 8005c74:	fffffcff 	.word	0xfffffcff

08005c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	4393      	bics	r3, r2
 8005c90:	001a      	movs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2270      	movs	r2, #112	@ 0x70
 8005ca6:	4393      	bics	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2203      	movs	r2, #3
 8005cae:	4393      	bics	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	4393      	bics	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a23      	ldr	r2, [pc, #140]	@ (8005d60 <TIM_OC1_SetConfig+0xe8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <TIM_OC1_SetConfig+0x6e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a22      	ldr	r2, [pc, #136]	@ (8005d64 <TIM_OC1_SetConfig+0xec>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_OC1_SetConfig+0x6e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a21      	ldr	r2, [pc, #132]	@ (8005d68 <TIM_OC1_SetConfig+0xf0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d10c      	bne.n	8005d00 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2208      	movs	r2, #8
 8005cea:	4393      	bics	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	4393      	bics	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a17      	ldr	r2, [pc, #92]	@ (8005d60 <TIM_OC1_SetConfig+0xe8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d007      	beq.n	8005d18 <TIM_OC1_SetConfig+0xa0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a16      	ldr	r2, [pc, #88]	@ (8005d64 <TIM_OC1_SetConfig+0xec>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_OC1_SetConfig+0xa0>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a15      	ldr	r2, [pc, #84]	@ (8005d68 <TIM_OC1_SetConfig+0xf0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d111      	bne.n	8005d3c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4a14      	ldr	r2, [pc, #80]	@ (8005d6c <TIM_OC1_SetConfig+0xf4>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4a13      	ldr	r2, [pc, #76]	@ (8005d70 <TIM_OC1_SetConfig+0xf8>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	46c0      	nop			@ (mov r8, r8)
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b006      	add	sp, #24
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	46c0      	nop			@ (mov r8, r8)
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40014400 	.word	0x40014400
 8005d68:	40014800 	.word	0x40014800
 8005d6c:	fffffeff 	.word	0xfffffeff
 8005d70:	fffffdff 	.word	0xfffffdff

08005d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	2210      	movs	r2, #16
 8005d8a:	4393      	bics	r3, r2
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a2c      	ldr	r2, [pc, #176]	@ (8005e54 <TIM_OC2_SetConfig+0xe0>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a2b      	ldr	r2, [pc, #172]	@ (8005e58 <TIM_OC2_SetConfig+0xe4>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	4393      	bics	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a22      	ldr	r2, [pc, #136]	@ (8005e5c <TIM_OC2_SetConfig+0xe8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10d      	bne.n	8005df2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2280      	movs	r2, #128	@ 0x80
 8005dda:	4393      	bics	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2240      	movs	r2, #64	@ 0x40
 8005dee:	4393      	bics	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a19      	ldr	r2, [pc, #100]	@ (8005e5c <TIM_OC2_SetConfig+0xe8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <TIM_OC2_SetConfig+0x96>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <TIM_OC2_SetConfig+0xec>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_OC2_SetConfig+0x96>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a17      	ldr	r2, [pc, #92]	@ (8005e64 <TIM_OC2_SetConfig+0xf0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d113      	bne.n	8005e32 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4a16      	ldr	r2, [pc, #88]	@ (8005e68 <TIM_OC2_SetConfig+0xf4>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4a15      	ldr	r2, [pc, #84]	@ (8005e6c <TIM_OC2_SetConfig+0xf8>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	621a      	str	r2, [r3, #32]
}
 8005e4c:	46c0      	nop			@ (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b006      	add	sp, #24
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	ffff8fff 	.word	0xffff8fff
 8005e58:	fffffcff 	.word	0xfffffcff
 8005e5c:	40012c00 	.word	0x40012c00
 8005e60:	40014400 	.word	0x40014400
 8005e64:	40014800 	.word	0x40014800
 8005e68:	fffffbff 	.word	0xfffffbff
 8005e6c:	fffff7ff 	.word	0xfffff7ff

08005e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	4a31      	ldr	r2, [pc, #196]	@ (8005f4c <TIM_OC3_SetConfig+0xdc>)
 8005e86:	401a      	ands	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2270      	movs	r2, #112	@ 0x70
 8005e9c:	4393      	bics	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	4393      	bics	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	4a26      	ldr	r2, [pc, #152]	@ (8005f50 <TIM_OC3_SetConfig+0xe0>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a22      	ldr	r2, [pc, #136]	@ (8005f54 <TIM_OC3_SetConfig+0xe4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10d      	bne.n	8005eea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	4a21      	ldr	r2, [pc, #132]	@ (8005f58 <TIM_OC3_SetConfig+0xe8>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f5c <TIM_OC3_SetConfig+0xec>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a19      	ldr	r2, [pc, #100]	@ (8005f54 <TIM_OC3_SetConfig+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d007      	beq.n	8005f02 <TIM_OC3_SetConfig+0x92>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8005f60 <TIM_OC3_SetConfig+0xf0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d003      	beq.n	8005f02 <TIM_OC3_SetConfig+0x92>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a19      	ldr	r2, [pc, #100]	@ (8005f64 <TIM_OC3_SetConfig+0xf4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d113      	bne.n	8005f2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4a18      	ldr	r2, [pc, #96]	@ (8005f68 <TIM_OC3_SetConfig+0xf8>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4a17      	ldr	r2, [pc, #92]	@ (8005f6c <TIM_OC3_SetConfig+0xfc>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	46c0      	nop			@ (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b006      	add	sp, #24
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	fffffeff 	.word	0xfffffeff
 8005f50:	fffffdff 	.word	0xfffffdff
 8005f54:	40012c00 	.word	0x40012c00
 8005f58:	fffff7ff 	.word	0xfffff7ff
 8005f5c:	fffffbff 	.word	0xfffffbff
 8005f60:	40014400 	.word	0x40014400
 8005f64:	40014800 	.word	0x40014800
 8005f68:	ffffefff 	.word	0xffffefff
 8005f6c:	ffffdfff 	.word	0xffffdfff

08005f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	4a24      	ldr	r2, [pc, #144]	@ (8006018 <TIM_OC4_SetConfig+0xa8>)
 8005f86:	401a      	ands	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a20      	ldr	r2, [pc, #128]	@ (800601c <TIM_OC4_SetConfig+0xac>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <TIM_OC4_SetConfig+0xb0>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	021b      	lsls	r3, r3, #8
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006024 <TIM_OC4_SetConfig+0xb4>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	031b      	lsls	r3, r3, #12
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a17      	ldr	r2, [pc, #92]	@ (8006028 <TIM_OC4_SetConfig+0xb8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_OC4_SetConfig+0x70>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a16      	ldr	r2, [pc, #88]	@ (800602c <TIM_OC4_SetConfig+0xbc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC4_SetConfig+0x70>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <TIM_OC4_SetConfig+0xc0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d109      	bne.n	8005ff4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	4a14      	ldr	r2, [pc, #80]	@ (8006034 <TIM_OC4_SetConfig+0xc4>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	019b      	lsls	r3, r3, #6
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	46c0      	nop			@ (mov r8, r8)
 8006010:	46bd      	mov	sp, r7
 8006012:	b006      	add	sp, #24
 8006014:	bd80      	pop	{r7, pc}
 8006016:	46c0      	nop			@ (mov r8, r8)
 8006018:	ffffefff 	.word	0xffffefff
 800601c:	ffff8fff 	.word	0xffff8fff
 8006020:	fffffcff 	.word	0xfffffcff
 8006024:	ffffdfff 	.word	0xffffdfff
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800
 8006034:	ffffbfff 	.word	0xffffbfff

08006038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	221f      	movs	r2, #31
 8006048:	4013      	ands	r3, r2
 800604a:	2201      	movs	r2, #1
 800604c:	409a      	lsls	r2, r3
 800604e:	0013      	movs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	43d2      	mvns	r2, r2
 800605a:	401a      	ands	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a1a      	ldr	r2, [r3, #32]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	211f      	movs	r1, #31
 8006068:	400b      	ands	r3, r1
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4099      	lsls	r1, r3
 800606e:	000b      	movs	r3, r1
 8006070:	431a      	orrs	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	46c0      	nop			@ (mov r8, r8)
 8006078:	46bd      	mov	sp, r7
 800607a:	b006      	add	sp, #24
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	223c      	movs	r2, #60	@ 0x3c
 800608e:	5c9b      	ldrb	r3, [r3, r2]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006094:	2302      	movs	r3, #2
 8006096:	e042      	b.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	223c      	movs	r2, #60	@ 0x3c
 800609c:	2101      	movs	r1, #1
 800609e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	223d      	movs	r2, #61	@ 0x3d
 80060a4:	2102      	movs	r1, #2
 80060a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2270      	movs	r2, #112	@ 0x70
 80060bc:	4393      	bics	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a14      	ldr	r2, [pc, #80]	@ (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00a      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	2380      	movs	r3, #128	@ 0x80
 80060e2:	05db      	lsls	r3, r3, #23
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d004      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a0f      	ldr	r2, [pc, #60]	@ (800612c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d10c      	bne.n	800610c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2280      	movs	r2, #128	@ 0x80
 80060f6:	4393      	bics	r3, r2
 80060f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4313      	orrs	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	223d      	movs	r2, #61	@ 0x3d
 8006110:	2101      	movs	r1, #1
 8006112:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	223c      	movs	r2, #60	@ 0x3c
 8006118:	2100      	movs	r1, #0
 800611a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b004      	add	sp, #16
 8006124:	bd80      	pop	{r7, pc}
 8006126:	46c0      	nop			@ (mov r8, r8)
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40000400 	.word	0x40000400

08006130 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006138:	46c0      	nop			@ (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	b002      	add	sp, #8
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006148:	46c0      	nop			@ (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	b002      	add	sp, #8
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e044      	b.n	80061ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d107      	bne.n	800617a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2278      	movs	r2, #120	@ 0x78
 800616e:	2100      	movs	r1, #0
 8006170:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	0018      	movs	r0, r3
 8006176:	f7fb fe4d 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2224      	movs	r2, #36	@ 0x24
 800617e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2101      	movs	r1, #1
 800618c:	438a      	bics	r2, r1
 800618e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0018      	movs	r0, r3
 800619c:	f000 f96c 	bl	8006478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	0018      	movs	r0, r3
 80061a4:	f000 f828 	bl	80061f8 <UART_SetConfig>
 80061a8:	0003      	movs	r3, r0
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e01c      	b.n	80061ec <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	490d      	ldr	r1, [pc, #52]	@ (80061f4 <HAL_UART_Init+0xa4>)
 80061be:	400a      	ands	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	212a      	movs	r1, #42	@ 0x2a
 80061ce:	438a      	bics	r2, r1
 80061d0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2101      	movs	r1, #1
 80061de:	430a      	orrs	r2, r1
 80061e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	0018      	movs	r0, r3
 80061e6:	f000 f9fb 	bl	80065e0 <UART_CheckIdleState>
 80061ea:	0003      	movs	r3, r0
}
 80061ec:	0018      	movs	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b002      	add	sp, #8
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	ffffb7ff 	.word	0xffffb7ff

080061f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006200:	231e      	movs	r3, #30
 8006202:	18fb      	adds	r3, r7, r3
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a8d      	ldr	r2, [pc, #564]	@ (800645c <UART_SetConfig+0x264>)
 8006228:	4013      	ands	r3, r2
 800622a:	0019      	movs	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	430a      	orrs	r2, r1
 8006234:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	4a88      	ldr	r2, [pc, #544]	@ (8006460 <UART_SetConfig+0x268>)
 800623e:	4013      	ands	r3, r2
 8006240:	0019      	movs	r1, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4a7f      	ldr	r2, [pc, #508]	@ (8006464 <UART_SetConfig+0x26c>)
 8006266:	4013      	ands	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	430a      	orrs	r2, r1
 8006272:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a7b      	ldr	r2, [pc, #492]	@ (8006468 <UART_SetConfig+0x270>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d127      	bne.n	80062ce <UART_SetConfig+0xd6>
 800627e:	4b7b      	ldr	r3, [pc, #492]	@ (800646c <UART_SetConfig+0x274>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	2203      	movs	r2, #3
 8006284:	4013      	ands	r3, r2
 8006286:	2b03      	cmp	r3, #3
 8006288:	d00d      	beq.n	80062a6 <UART_SetConfig+0xae>
 800628a:	d81b      	bhi.n	80062c4 <UART_SetConfig+0xcc>
 800628c:	2b02      	cmp	r3, #2
 800628e:	d014      	beq.n	80062ba <UART_SetConfig+0xc2>
 8006290:	d818      	bhi.n	80062c4 <UART_SetConfig+0xcc>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <UART_SetConfig+0xa4>
 8006296:	2b01      	cmp	r3, #1
 8006298:	d00a      	beq.n	80062b0 <UART_SetConfig+0xb8>
 800629a:	e013      	b.n	80062c4 <UART_SetConfig+0xcc>
 800629c:	231f      	movs	r3, #31
 800629e:	18fb      	adds	r3, r7, r3
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	e021      	b.n	80062ea <UART_SetConfig+0xf2>
 80062a6:	231f      	movs	r3, #31
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e01c      	b.n	80062ea <UART_SetConfig+0xf2>
 80062b0:	231f      	movs	r3, #31
 80062b2:	18fb      	adds	r3, r7, r3
 80062b4:	2204      	movs	r2, #4
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	e017      	b.n	80062ea <UART_SetConfig+0xf2>
 80062ba:	231f      	movs	r3, #31
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	2208      	movs	r2, #8
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	e012      	b.n	80062ea <UART_SetConfig+0xf2>
 80062c4:	231f      	movs	r3, #31
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	2210      	movs	r2, #16
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e00d      	b.n	80062ea <UART_SetConfig+0xf2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a67      	ldr	r2, [pc, #412]	@ (8006470 <UART_SetConfig+0x278>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d104      	bne.n	80062e2 <UART_SetConfig+0xea>
 80062d8:	231f      	movs	r3, #31
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e003      	b.n	80062ea <UART_SetConfig+0xf2>
 80062e2:	231f      	movs	r3, #31
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	2210      	movs	r2, #16
 80062e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69da      	ldr	r2, [r3, #28]
 80062ee:	2380      	movs	r3, #128	@ 0x80
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d15c      	bne.n	80063b0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80062f6:	231f      	movs	r3, #31
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d015      	beq.n	800632c <UART_SetConfig+0x134>
 8006300:	dc18      	bgt.n	8006334 <UART_SetConfig+0x13c>
 8006302:	2b04      	cmp	r3, #4
 8006304:	d00d      	beq.n	8006322 <UART_SetConfig+0x12a>
 8006306:	dc15      	bgt.n	8006334 <UART_SetConfig+0x13c>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <UART_SetConfig+0x11a>
 800630c:	2b02      	cmp	r3, #2
 800630e:	d005      	beq.n	800631c <UART_SetConfig+0x124>
 8006310:	e010      	b.n	8006334 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006312:	f7fe ff47 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8006316:	0003      	movs	r3, r0
 8006318:	61bb      	str	r3, [r7, #24]
        break;
 800631a:	e012      	b.n	8006342 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800631c:	4b55      	ldr	r3, [pc, #340]	@ (8006474 <UART_SetConfig+0x27c>)
 800631e:	61bb      	str	r3, [r7, #24]
        break;
 8006320:	e00f      	b.n	8006342 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006322:	f7fe fec3 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8006326:	0003      	movs	r3, r0
 8006328:	61bb      	str	r3, [r7, #24]
        break;
 800632a:	e00a      	b.n	8006342 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632c:	2380      	movs	r3, #128	@ 0x80
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	61bb      	str	r3, [r7, #24]
        break;
 8006332:	e006      	b.n	8006342 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006338:	231e      	movs	r3, #30
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
        break;
 8006340:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d100      	bne.n	800634a <UART_SetConfig+0x152>
 8006348:	e07a      	b.n	8006440 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	005a      	lsls	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	18d2      	adds	r2, r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	0019      	movs	r1, r3
 800635c:	0010      	movs	r0, r2
 800635e:	f7f9 fedd 	bl	800011c <__udivsi3>
 8006362:	0003      	movs	r3, r0
 8006364:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b0f      	cmp	r3, #15
 800636a:	d91c      	bls.n	80063a6 <UART_SetConfig+0x1ae>
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	2380      	movs	r3, #128	@ 0x80
 8006370:	025b      	lsls	r3, r3, #9
 8006372:	429a      	cmp	r2, r3
 8006374:	d217      	bcs.n	80063a6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	b29a      	uxth	r2, r3
 800637a:	200e      	movs	r0, #14
 800637c:	183b      	adds	r3, r7, r0
 800637e:	210f      	movs	r1, #15
 8006380:	438a      	bics	r2, r1
 8006382:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	b29b      	uxth	r3, r3
 800638a:	2207      	movs	r2, #7
 800638c:	4013      	ands	r3, r2
 800638e:	b299      	uxth	r1, r3
 8006390:	183b      	adds	r3, r7, r0
 8006392:	183a      	adds	r2, r7, r0
 8006394:	8812      	ldrh	r2, [r2, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	183a      	adds	r2, r7, r0
 80063a0:	8812      	ldrh	r2, [r2, #0]
 80063a2:	60da      	str	r2, [r3, #12]
 80063a4:	e04c      	b.n	8006440 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80063a6:	231e      	movs	r3, #30
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e047      	b.n	8006440 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063b0:	231f      	movs	r3, #31
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d015      	beq.n	80063e6 <UART_SetConfig+0x1ee>
 80063ba:	dc18      	bgt.n	80063ee <UART_SetConfig+0x1f6>
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d00d      	beq.n	80063dc <UART_SetConfig+0x1e4>
 80063c0:	dc15      	bgt.n	80063ee <UART_SetConfig+0x1f6>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <UART_SetConfig+0x1d4>
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d005      	beq.n	80063d6 <UART_SetConfig+0x1de>
 80063ca:	e010      	b.n	80063ee <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063cc:	f7fe feea 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 80063d0:	0003      	movs	r3, r0
 80063d2:	61bb      	str	r3, [r7, #24]
        break;
 80063d4:	e012      	b.n	80063fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d6:	4b27      	ldr	r3, [pc, #156]	@ (8006474 <UART_SetConfig+0x27c>)
 80063d8:	61bb      	str	r3, [r7, #24]
        break;
 80063da:	e00f      	b.n	80063fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063dc:	f7fe fe66 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 80063e0:	0003      	movs	r3, r0
 80063e2:	61bb      	str	r3, [r7, #24]
        break;
 80063e4:	e00a      	b.n	80063fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e6:	2380      	movs	r3, #128	@ 0x80
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	61bb      	str	r3, [r7, #24]
        break;
 80063ec:	e006      	b.n	80063fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063f2:	231e      	movs	r3, #30
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	2201      	movs	r2, #1
 80063f8:	701a      	strb	r2, [r3, #0]
        break;
 80063fa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01e      	beq.n	8006440 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	085a      	lsrs	r2, r3, #1
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	18d2      	adds	r2, r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	0019      	movs	r1, r3
 8006412:	0010      	movs	r0, r2
 8006414:	f7f9 fe82 	bl	800011c <__udivsi3>
 8006418:	0003      	movs	r3, r0
 800641a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b0f      	cmp	r3, #15
 8006420:	d90a      	bls.n	8006438 <UART_SetConfig+0x240>
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	2380      	movs	r3, #128	@ 0x80
 8006426:	025b      	lsls	r3, r3, #9
 8006428:	429a      	cmp	r2, r3
 800642a:	d205      	bcs.n	8006438 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	b29a      	uxth	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	e003      	b.n	8006440 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8006438:	231e      	movs	r3, #30
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	2201      	movs	r2, #1
 800643e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800644c:	231e      	movs	r3, #30
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	781b      	ldrb	r3, [r3, #0]
}
 8006452:	0018      	movs	r0, r3
 8006454:	46bd      	mov	sp, r7
 8006456:	b008      	add	sp, #32
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			@ (mov r8, r8)
 800645c:	efff69f3 	.word	0xefff69f3
 8006460:	ffffcfff 	.word	0xffffcfff
 8006464:	fffff4ff 	.word	0xfffff4ff
 8006468:	40013800 	.word	0x40013800
 800646c:	40021000 	.word	0x40021000
 8006470:	40004400 	.word	0x40004400
 8006474:	007a1200 	.word	0x007a1200

08006478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006484:	2208      	movs	r2, #8
 8006486:	4013      	ands	r3, r2
 8006488:	d00b      	beq.n	80064a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	4a4a      	ldr	r2, [pc, #296]	@ (80065bc <UART_AdvFeatureConfig+0x144>)
 8006492:	4013      	ands	r3, r2
 8006494:	0019      	movs	r1, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	2201      	movs	r2, #1
 80064a8:	4013      	ands	r3, r2
 80064aa:	d00b      	beq.n	80064c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	4a43      	ldr	r2, [pc, #268]	@ (80065c0 <UART_AdvFeatureConfig+0x148>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	0019      	movs	r1, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	2202      	movs	r2, #2
 80064ca:	4013      	ands	r3, r2
 80064cc:	d00b      	beq.n	80064e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4a3b      	ldr	r2, [pc, #236]	@ (80065c4 <UART_AdvFeatureConfig+0x14c>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	0019      	movs	r1, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ea:	2204      	movs	r2, #4
 80064ec:	4013      	ands	r3, r2
 80064ee:	d00b      	beq.n	8006508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	4a34      	ldr	r2, [pc, #208]	@ (80065c8 <UART_AdvFeatureConfig+0x150>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	0019      	movs	r1, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	2210      	movs	r2, #16
 800650e:	4013      	ands	r3, r2
 8006510:	d00b      	beq.n	800652a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4a2c      	ldr	r2, [pc, #176]	@ (80065cc <UART_AdvFeatureConfig+0x154>)
 800651a:	4013      	ands	r3, r2
 800651c:	0019      	movs	r1, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652e:	2220      	movs	r2, #32
 8006530:	4013      	ands	r3, r2
 8006532:	d00b      	beq.n	800654c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	4a25      	ldr	r2, [pc, #148]	@ (80065d0 <UART_AdvFeatureConfig+0x158>)
 800653c:	4013      	ands	r3, r2
 800653e:	0019      	movs	r1, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	2240      	movs	r2, #64	@ 0x40
 8006552:	4013      	ands	r3, r2
 8006554:	d01d      	beq.n	8006592 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4a1d      	ldr	r2, [pc, #116]	@ (80065d4 <UART_AdvFeatureConfig+0x15c>)
 800655e:	4013      	ands	r3, r2
 8006560:	0019      	movs	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	035b      	lsls	r3, r3, #13
 8006576:	429a      	cmp	r2, r3
 8006578:	d10b      	bne.n	8006592 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a15      	ldr	r2, [pc, #84]	@ (80065d8 <UART_AdvFeatureConfig+0x160>)
 8006582:	4013      	ands	r3, r2
 8006584:	0019      	movs	r1, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006596:	2280      	movs	r2, #128	@ 0x80
 8006598:	4013      	ands	r3, r2
 800659a:	d00b      	beq.n	80065b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	4a0e      	ldr	r2, [pc, #56]	@ (80065dc <UART_AdvFeatureConfig+0x164>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	0019      	movs	r1, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	605a      	str	r2, [r3, #4]
  }
}
 80065b4:	46c0      	nop			@ (mov r8, r8)
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b002      	add	sp, #8
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	ffff7fff 	.word	0xffff7fff
 80065c0:	fffdffff 	.word	0xfffdffff
 80065c4:	fffeffff 	.word	0xfffeffff
 80065c8:	fffbffff 	.word	0xfffbffff
 80065cc:	ffffefff 	.word	0xffffefff
 80065d0:	ffffdfff 	.word	0xffffdfff
 80065d4:	ffefffff 	.word	0xffefffff
 80065d8:	ff9fffff 	.word	0xff9fffff
 80065dc:	fff7ffff 	.word	0xfff7ffff

080065e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b092      	sub	sp, #72	@ 0x48
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2284      	movs	r2, #132	@ 0x84
 80065ec:	2100      	movs	r1, #0
 80065ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f0:	f7fb fff8 	bl	80025e4 <HAL_GetTick>
 80065f4:	0003      	movs	r3, r0
 80065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2208      	movs	r2, #8
 8006600:	4013      	ands	r3, r2
 8006602:	2b08      	cmp	r3, #8
 8006604:	d12c      	bne.n	8006660 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006608:	2280      	movs	r2, #128	@ 0x80
 800660a:	0391      	lsls	r1, r2, #14
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	4a46      	ldr	r2, [pc, #280]	@ (8006728 <UART_CheckIdleState+0x148>)
 8006610:	9200      	str	r2, [sp, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	f000 f88c 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8006618:	1e03      	subs	r3, r0, #0
 800661a:	d021      	beq.n	8006660 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800661c:	f3ef 8310 	mrs	r3, PRIMASK
 8006620:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006624:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006626:	2301      	movs	r3, #1
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	f383 8810 	msr	PRIMASK, r3
}
 8006630:	46c0      	nop			@ (mov r8, r8)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2180      	movs	r1, #128	@ 0x80
 800663e:	438a      	bics	r2, r1
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	f383 8810 	msr	PRIMASK, r3
}
 800664c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2278      	movs	r2, #120	@ 0x78
 8006658:	2100      	movs	r1, #0
 800665a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e05f      	b.n	8006720 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2204      	movs	r2, #4
 8006668:	4013      	ands	r3, r2
 800666a:	2b04      	cmp	r3, #4
 800666c:	d146      	bne.n	80066fc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006670:	2280      	movs	r2, #128	@ 0x80
 8006672:	03d1      	lsls	r1, r2, #15
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4a2c      	ldr	r2, [pc, #176]	@ (8006728 <UART_CheckIdleState+0x148>)
 8006678:	9200      	str	r2, [sp, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	f000 f858 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8006680:	1e03      	subs	r3, r0, #0
 8006682:	d03b      	beq.n	80066fc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006684:	f3ef 8310 	mrs	r3, PRIMASK
 8006688:	60fb      	str	r3, [r7, #12]
  return(result);
 800668a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34
 800668e:	2301      	movs	r3, #1
 8006690:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f383 8810 	msr	PRIMASK, r3
}
 8006698:	46c0      	nop			@ (mov r8, r8)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4921      	ldr	r1, [pc, #132]	@ (800672c <UART_CheckIdleState+0x14c>)
 80066a6:	400a      	ands	r2, r1
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f383 8810 	msr	PRIMASK, r3
}
 80066b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066b6:	f3ef 8310 	mrs	r3, PRIMASK
 80066ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80066bc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066be:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c0:	2301      	movs	r3, #1
 80066c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	f383 8810 	msr	PRIMASK, r3
}
 80066ca:	46c0      	nop			@ (mov r8, r8)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2101      	movs	r1, #1
 80066d8:	438a      	bics	r2, r1
 80066da:	609a      	str	r2, [r3, #8]
 80066dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	f383 8810 	msr	PRIMASK, r3
}
 80066e6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2280      	movs	r2, #128	@ 0x80
 80066ec:	2120      	movs	r1, #32
 80066ee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2278      	movs	r2, #120	@ 0x78
 80066f4:	2100      	movs	r1, #0
 80066f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e011      	b.n	8006720 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2280      	movs	r2, #128	@ 0x80
 8006706:	2120      	movs	r1, #32
 8006708:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2278      	movs	r2, #120	@ 0x78
 800671a:	2100      	movs	r1, #0
 800671c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	0018      	movs	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	b010      	add	sp, #64	@ 0x40
 8006726:	bd80      	pop	{r7, pc}
 8006728:	01ffffff 	.word	0x01ffffff
 800672c:	fffffedf 	.word	0xfffffedf

08006730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	1dfb      	adds	r3, r7, #7
 800673e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006740:	e051      	b.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	3301      	adds	r3, #1
 8006746:	d04e      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006748:	f7fb ff4c 	bl	80025e4 <HAL_GetTick>
 800674c:	0002      	movs	r2, r0
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e051      	b.n	8006806 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2204      	movs	r2, #4
 800676a:	4013      	ands	r3, r2
 800676c:	d03b      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b80      	cmp	r3, #128	@ 0x80
 8006772:	d038      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	d035      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	2208      	movs	r2, #8
 8006782:	4013      	ands	r3, r2
 8006784:	2b08      	cmp	r3, #8
 8006786:	d111      	bne.n	80067ac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	0018      	movs	r0, r3
 8006794:	f000 f83c 	bl	8006810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2284      	movs	r2, #132	@ 0x84
 800679c:	2108      	movs	r1, #8
 800679e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2278      	movs	r2, #120	@ 0x78
 80067a4:	2100      	movs	r1, #0
 80067a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e02c      	b.n	8006806 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	69da      	ldr	r2, [r3, #28]
 80067b2:	2380      	movs	r3, #128	@ 0x80
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	401a      	ands	r2, r3
 80067b8:	2380      	movs	r3, #128	@ 0x80
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	429a      	cmp	r2, r3
 80067be:	d112      	bne.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2280      	movs	r2, #128	@ 0x80
 80067c6:	0112      	lsls	r2, r2, #4
 80067c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	0018      	movs	r0, r3
 80067ce:	f000 f81f 	bl	8006810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2284      	movs	r2, #132	@ 0x84
 80067d6:	2120      	movs	r1, #32
 80067d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2278      	movs	r2, #120	@ 0x78
 80067de:	2100      	movs	r1, #0
 80067e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e00f      	b.n	8006806 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	4013      	ands	r3, r2
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	425a      	negs	r2, r3
 80067f6:	4153      	adcs	r3, r2
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	001a      	movs	r2, r3
 80067fc:	1dfb      	adds	r3, r7, #7
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d09e      	beq.n	8006742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	0018      	movs	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	b004      	add	sp, #16
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08e      	sub	sp, #56	@ 0x38
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006818:	f3ef 8310 	mrs	r3, PRIMASK
 800681c:	617b      	str	r3, [r7, #20]
  return(result);
 800681e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
 8006822:	2301      	movs	r3, #1
 8006824:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f383 8810 	msr	PRIMASK, r3
}
 800682c:	46c0      	nop			@ (mov r8, r8)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4926      	ldr	r1, [pc, #152]	@ (80068d4 <UART_EndRxTransfer+0xc4>)
 800683a:	400a      	ands	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f383 8810 	msr	PRIMASK, r3
}
 8006848:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800684a:	f3ef 8310 	mrs	r3, PRIMASK
 800684e:	623b      	str	r3, [r7, #32]
  return(result);
 8006850:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	633b      	str	r3, [r7, #48]	@ 0x30
 8006854:	2301      	movs	r3, #1
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	f383 8810 	msr	PRIMASK, r3
}
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2101      	movs	r1, #1
 800686c:	438a      	bics	r2, r1
 800686e:	609a      	str	r2, [r3, #8]
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	f383 8810 	msr	PRIMASK, r3
}
 800687a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006880:	2b01      	cmp	r3, #1
 8006882:	d118      	bne.n	80068b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006884:	f3ef 8310 	mrs	r3, PRIMASK
 8006888:	60bb      	str	r3, [r7, #8]
  return(result);
 800688a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800688e:	2301      	movs	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f383 8810 	msr	PRIMASK, r3
}
 8006898:	46c0      	nop			@ (mov r8, r8)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2110      	movs	r1, #16
 80068a6:	438a      	bics	r2, r1
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f383 8810 	msr	PRIMASK, r3
}
 80068b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2280      	movs	r2, #128	@ 0x80
 80068ba:	2120      	movs	r1, #32
 80068bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068ca:	46c0      	nop			@ (mov r8, r8)
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b00e      	add	sp, #56	@ 0x38
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	fffffedf 	.word	0xfffffedf

080068d8 <siprintf>:
 80068d8:	b40e      	push	{r1, r2, r3}
 80068da:	b510      	push	{r4, lr}
 80068dc:	2400      	movs	r4, #0
 80068de:	490c      	ldr	r1, [pc, #48]	@ (8006910 <siprintf+0x38>)
 80068e0:	b09d      	sub	sp, #116	@ 0x74
 80068e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80068e4:	9002      	str	r0, [sp, #8]
 80068e6:	9006      	str	r0, [sp, #24]
 80068e8:	9107      	str	r1, [sp, #28]
 80068ea:	9104      	str	r1, [sp, #16]
 80068ec:	4809      	ldr	r0, [pc, #36]	@ (8006914 <siprintf+0x3c>)
 80068ee:	490a      	ldr	r1, [pc, #40]	@ (8006918 <siprintf+0x40>)
 80068f0:	cb04      	ldmia	r3!, {r2}
 80068f2:	9105      	str	r1, [sp, #20]
 80068f4:	6800      	ldr	r0, [r0, #0]
 80068f6:	a902      	add	r1, sp, #8
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80068fc:	f000 f9ba 	bl	8006c74 <_svfiprintf_r>
 8006900:	9b02      	ldr	r3, [sp, #8]
 8006902:	701c      	strb	r4, [r3, #0]
 8006904:	b01d      	add	sp, #116	@ 0x74
 8006906:	bc10      	pop	{r4}
 8006908:	bc08      	pop	{r3}
 800690a:	b003      	add	sp, #12
 800690c:	4718      	bx	r3
 800690e:	46c0      	nop			@ (mov r8, r8)
 8006910:	7fffffff 	.word	0x7fffffff
 8006914:	20000010 	.word	0x20000010
 8006918:	ffff0208 	.word	0xffff0208

0800691c <memmove>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4288      	cmp	r0, r1
 8006920:	d902      	bls.n	8006928 <memmove+0xc>
 8006922:	188b      	adds	r3, r1, r2
 8006924:	4298      	cmp	r0, r3
 8006926:	d308      	bcc.n	800693a <memmove+0x1e>
 8006928:	2300      	movs	r3, #0
 800692a:	429a      	cmp	r2, r3
 800692c:	d007      	beq.n	800693e <memmove+0x22>
 800692e:	5ccc      	ldrb	r4, [r1, r3]
 8006930:	54c4      	strb	r4, [r0, r3]
 8006932:	3301      	adds	r3, #1
 8006934:	e7f9      	b.n	800692a <memmove+0xe>
 8006936:	5c8b      	ldrb	r3, [r1, r2]
 8006938:	5483      	strb	r3, [r0, r2]
 800693a:	3a01      	subs	r2, #1
 800693c:	d2fb      	bcs.n	8006936 <memmove+0x1a>
 800693e:	bd10      	pop	{r4, pc}

08006940 <memset>:
 8006940:	0003      	movs	r3, r0
 8006942:	1882      	adds	r2, r0, r2
 8006944:	4293      	cmp	r3, r2
 8006946:	d100      	bne.n	800694a <memset+0xa>
 8006948:	4770      	bx	lr
 800694a:	7019      	strb	r1, [r3, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	e7f9      	b.n	8006944 <memset+0x4>

08006950 <__errno>:
 8006950:	4b01      	ldr	r3, [pc, #4]	@ (8006958 <__errno+0x8>)
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	4770      	bx	lr
 8006956:	46c0      	nop			@ (mov r8, r8)
 8006958:	20000010 	.word	0x20000010

0800695c <__libc_init_array>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	2600      	movs	r6, #0
 8006960:	4c0c      	ldr	r4, [pc, #48]	@ (8006994 <__libc_init_array+0x38>)
 8006962:	4d0d      	ldr	r5, [pc, #52]	@ (8006998 <__libc_init_array+0x3c>)
 8006964:	1b64      	subs	r4, r4, r5
 8006966:	10a4      	asrs	r4, r4, #2
 8006968:	42a6      	cmp	r6, r4
 800696a:	d109      	bne.n	8006980 <__libc_init_array+0x24>
 800696c:	2600      	movs	r6, #0
 800696e:	f000 fc51 	bl	8007214 <_init>
 8006972:	4c0a      	ldr	r4, [pc, #40]	@ (800699c <__libc_init_array+0x40>)
 8006974:	4d0a      	ldr	r5, [pc, #40]	@ (80069a0 <__libc_init_array+0x44>)
 8006976:	1b64      	subs	r4, r4, r5
 8006978:	10a4      	asrs	r4, r4, #2
 800697a:	42a6      	cmp	r6, r4
 800697c:	d105      	bne.n	800698a <__libc_init_array+0x2e>
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	00b3      	lsls	r3, r6, #2
 8006982:	58eb      	ldr	r3, [r5, r3]
 8006984:	4798      	blx	r3
 8006986:	3601      	adds	r6, #1
 8006988:	e7ee      	b.n	8006968 <__libc_init_array+0xc>
 800698a:	00b3      	lsls	r3, r6, #2
 800698c:	58eb      	ldr	r3, [r5, r3]
 800698e:	4798      	blx	r3
 8006990:	3601      	adds	r6, #1
 8006992:	e7f2      	b.n	800697a <__libc_init_array+0x1e>
 8006994:	08007ad8 	.word	0x08007ad8
 8006998:	08007ad8 	.word	0x08007ad8
 800699c:	08007adc 	.word	0x08007adc
 80069a0:	08007ad8 	.word	0x08007ad8

080069a4 <__retarget_lock_acquire_recursive>:
 80069a4:	4770      	bx	lr

080069a6 <__retarget_lock_release_recursive>:
 80069a6:	4770      	bx	lr

080069a8 <memcpy>:
 80069a8:	2300      	movs	r3, #0
 80069aa:	b510      	push	{r4, lr}
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d100      	bne.n	80069b2 <memcpy+0xa>
 80069b0:	bd10      	pop	{r4, pc}
 80069b2:	5ccc      	ldrb	r4, [r1, r3]
 80069b4:	54c4      	strb	r4, [r0, r3]
 80069b6:	3301      	adds	r3, #1
 80069b8:	e7f8      	b.n	80069ac <memcpy+0x4>
	...

080069bc <_free_r>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	0005      	movs	r5, r0
 80069c0:	1e0c      	subs	r4, r1, #0
 80069c2:	d010      	beq.n	80069e6 <_free_r+0x2a>
 80069c4:	3c04      	subs	r4, #4
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da00      	bge.n	80069ce <_free_r+0x12>
 80069cc:	18e4      	adds	r4, r4, r3
 80069ce:	0028      	movs	r0, r5
 80069d0:	f000 f8e0 	bl	8006b94 <__malloc_lock>
 80069d4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a4c <_free_r+0x90>)
 80069d6:	6813      	ldr	r3, [r2, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d105      	bne.n	80069e8 <_free_r+0x2c>
 80069dc:	6063      	str	r3, [r4, #4]
 80069de:	6014      	str	r4, [r2, #0]
 80069e0:	0028      	movs	r0, r5
 80069e2:	f000 f8df 	bl	8006ba4 <__malloc_unlock>
 80069e6:	bd70      	pop	{r4, r5, r6, pc}
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	d908      	bls.n	80069fe <_free_r+0x42>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	1821      	adds	r1, r4, r0
 80069f0:	428b      	cmp	r3, r1
 80069f2:	d1f3      	bne.n	80069dc <_free_r+0x20>
 80069f4:	6819      	ldr	r1, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	1809      	adds	r1, r1, r0
 80069fa:	6021      	str	r1, [r4, #0]
 80069fc:	e7ee      	b.n	80069dc <_free_r+0x20>
 80069fe:	001a      	movs	r2, r3
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <_free_r+0x4e>
 8006a06:	42a3      	cmp	r3, r4
 8006a08:	d9f9      	bls.n	80069fe <_free_r+0x42>
 8006a0a:	6811      	ldr	r1, [r2, #0]
 8006a0c:	1850      	adds	r0, r2, r1
 8006a0e:	42a0      	cmp	r0, r4
 8006a10:	d10b      	bne.n	8006a2a <_free_r+0x6e>
 8006a12:	6820      	ldr	r0, [r4, #0]
 8006a14:	1809      	adds	r1, r1, r0
 8006a16:	1850      	adds	r0, r2, r1
 8006a18:	6011      	str	r1, [r2, #0]
 8006a1a:	4283      	cmp	r3, r0
 8006a1c:	d1e0      	bne.n	80069e0 <_free_r+0x24>
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	1841      	adds	r1, r0, r1
 8006a24:	6011      	str	r1, [r2, #0]
 8006a26:	6053      	str	r3, [r2, #4]
 8006a28:	e7da      	b.n	80069e0 <_free_r+0x24>
 8006a2a:	42a0      	cmp	r0, r4
 8006a2c:	d902      	bls.n	8006a34 <_free_r+0x78>
 8006a2e:	230c      	movs	r3, #12
 8006a30:	602b      	str	r3, [r5, #0]
 8006a32:	e7d5      	b.n	80069e0 <_free_r+0x24>
 8006a34:	6820      	ldr	r0, [r4, #0]
 8006a36:	1821      	adds	r1, r4, r0
 8006a38:	428b      	cmp	r3, r1
 8006a3a:	d103      	bne.n	8006a44 <_free_r+0x88>
 8006a3c:	6819      	ldr	r1, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	1809      	adds	r1, r1, r0
 8006a42:	6021      	str	r1, [r4, #0]
 8006a44:	6063      	str	r3, [r4, #4]
 8006a46:	6054      	str	r4, [r2, #4]
 8006a48:	e7ca      	b.n	80069e0 <_free_r+0x24>
 8006a4a:	46c0      	nop			@ (mov r8, r8)
 8006a4c:	2000078c 	.word	0x2000078c

08006a50 <sbrk_aligned>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	4e0f      	ldr	r6, [pc, #60]	@ (8006a90 <sbrk_aligned+0x40>)
 8006a54:	000d      	movs	r5, r1
 8006a56:	6831      	ldr	r1, [r6, #0]
 8006a58:	0004      	movs	r4, r0
 8006a5a:	2900      	cmp	r1, #0
 8006a5c:	d102      	bne.n	8006a64 <sbrk_aligned+0x14>
 8006a5e:	f000 fb83 	bl	8007168 <_sbrk_r>
 8006a62:	6030      	str	r0, [r6, #0]
 8006a64:	0029      	movs	r1, r5
 8006a66:	0020      	movs	r0, r4
 8006a68:	f000 fb7e 	bl	8007168 <_sbrk_r>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d103      	bne.n	8006a78 <sbrk_aligned+0x28>
 8006a70:	2501      	movs	r5, #1
 8006a72:	426d      	negs	r5, r5
 8006a74:	0028      	movs	r0, r5
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	2303      	movs	r3, #3
 8006a7a:	1cc5      	adds	r5, r0, #3
 8006a7c:	439d      	bics	r5, r3
 8006a7e:	42a8      	cmp	r0, r5
 8006a80:	d0f8      	beq.n	8006a74 <sbrk_aligned+0x24>
 8006a82:	1a29      	subs	r1, r5, r0
 8006a84:	0020      	movs	r0, r4
 8006a86:	f000 fb6f 	bl	8007168 <_sbrk_r>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d1f2      	bne.n	8006a74 <sbrk_aligned+0x24>
 8006a8e:	e7ef      	b.n	8006a70 <sbrk_aligned+0x20>
 8006a90:	20000788 	.word	0x20000788

08006a94 <_malloc_r>:
 8006a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a96:	2203      	movs	r2, #3
 8006a98:	1ccb      	adds	r3, r1, #3
 8006a9a:	4393      	bics	r3, r2
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	0005      	movs	r5, r0
 8006aa0:	001f      	movs	r7, r3
 8006aa2:	2b0c      	cmp	r3, #12
 8006aa4:	d234      	bcs.n	8006b10 <_malloc_r+0x7c>
 8006aa6:	270c      	movs	r7, #12
 8006aa8:	42b9      	cmp	r1, r7
 8006aaa:	d833      	bhi.n	8006b14 <_malloc_r+0x80>
 8006aac:	0028      	movs	r0, r5
 8006aae:	f000 f871 	bl	8006b94 <__malloc_lock>
 8006ab2:	4e37      	ldr	r6, [pc, #220]	@ (8006b90 <_malloc_r+0xfc>)
 8006ab4:	6833      	ldr	r3, [r6, #0]
 8006ab6:	001c      	movs	r4, r3
 8006ab8:	2c00      	cmp	r4, #0
 8006aba:	d12f      	bne.n	8006b1c <_malloc_r+0x88>
 8006abc:	0039      	movs	r1, r7
 8006abe:	0028      	movs	r0, r5
 8006ac0:	f7ff ffc6 	bl	8006a50 <sbrk_aligned>
 8006ac4:	0004      	movs	r4, r0
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	d15f      	bne.n	8006b8a <_malloc_r+0xf6>
 8006aca:	6834      	ldr	r4, [r6, #0]
 8006acc:	9400      	str	r4, [sp, #0]
 8006ace:	9b00      	ldr	r3, [sp, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d14a      	bne.n	8006b6a <_malloc_r+0xd6>
 8006ad4:	2c00      	cmp	r4, #0
 8006ad6:	d052      	beq.n	8006b7e <_malloc_r+0xea>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	0028      	movs	r0, r5
 8006adc:	18e3      	adds	r3, r4, r3
 8006ade:	9900      	ldr	r1, [sp, #0]
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	f000 fb41 	bl	8007168 <_sbrk_r>
 8006ae6:	9b01      	ldr	r3, [sp, #4]
 8006ae8:	4283      	cmp	r3, r0
 8006aea:	d148      	bne.n	8006b7e <_malloc_r+0xea>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	0028      	movs	r0, r5
 8006af0:	1aff      	subs	r7, r7, r3
 8006af2:	0039      	movs	r1, r7
 8006af4:	f7ff ffac 	bl	8006a50 <sbrk_aligned>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d040      	beq.n	8006b7e <_malloc_r+0xea>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	19db      	adds	r3, r3, r7
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	6833      	ldr	r3, [r6, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	d133      	bne.n	8006b72 <_malloc_r+0xde>
 8006b0a:	9b00      	ldr	r3, [sp, #0]
 8006b0c:	6033      	str	r3, [r6, #0]
 8006b0e:	e019      	b.n	8006b44 <_malloc_r+0xb0>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dac9      	bge.n	8006aa8 <_malloc_r+0x14>
 8006b14:	230c      	movs	r3, #12
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	2000      	movs	r0, #0
 8006b1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b1c:	6821      	ldr	r1, [r4, #0]
 8006b1e:	1bc9      	subs	r1, r1, r7
 8006b20:	d420      	bmi.n	8006b64 <_malloc_r+0xd0>
 8006b22:	290b      	cmp	r1, #11
 8006b24:	d90a      	bls.n	8006b3c <_malloc_r+0xa8>
 8006b26:	19e2      	adds	r2, r4, r7
 8006b28:	6027      	str	r7, [r4, #0]
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	d104      	bne.n	8006b38 <_malloc_r+0xa4>
 8006b2e:	6032      	str	r2, [r6, #0]
 8006b30:	6863      	ldr	r3, [r4, #4]
 8006b32:	6011      	str	r1, [r2, #0]
 8006b34:	6053      	str	r3, [r2, #4]
 8006b36:	e005      	b.n	8006b44 <_malloc_r+0xb0>
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	e7f9      	b.n	8006b30 <_malloc_r+0x9c>
 8006b3c:	6862      	ldr	r2, [r4, #4]
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	d10e      	bne.n	8006b60 <_malloc_r+0xcc>
 8006b42:	6032      	str	r2, [r6, #0]
 8006b44:	0028      	movs	r0, r5
 8006b46:	f000 f82d 	bl	8006ba4 <__malloc_unlock>
 8006b4a:	0020      	movs	r0, r4
 8006b4c:	2207      	movs	r2, #7
 8006b4e:	300b      	adds	r0, #11
 8006b50:	1d23      	adds	r3, r4, #4
 8006b52:	4390      	bics	r0, r2
 8006b54:	1ac2      	subs	r2, r0, r3
 8006b56:	4298      	cmp	r0, r3
 8006b58:	d0df      	beq.n	8006b1a <_malloc_r+0x86>
 8006b5a:	1a1b      	subs	r3, r3, r0
 8006b5c:	50a3      	str	r3, [r4, r2]
 8006b5e:	e7dc      	b.n	8006b1a <_malloc_r+0x86>
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	e7ef      	b.n	8006b44 <_malloc_r+0xb0>
 8006b64:	0023      	movs	r3, r4
 8006b66:	6864      	ldr	r4, [r4, #4]
 8006b68:	e7a6      	b.n	8006ab8 <_malloc_r+0x24>
 8006b6a:	9c00      	ldr	r4, [sp, #0]
 8006b6c:	6863      	ldr	r3, [r4, #4]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	e7ad      	b.n	8006ace <_malloc_r+0x3a>
 8006b72:	001a      	movs	r2, r3
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	d1fb      	bne.n	8006b72 <_malloc_r+0xde>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	e7da      	b.n	8006b34 <_malloc_r+0xa0>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	0028      	movs	r0, r5
 8006b82:	602b      	str	r3, [r5, #0]
 8006b84:	f000 f80e 	bl	8006ba4 <__malloc_unlock>
 8006b88:	e7c6      	b.n	8006b18 <_malloc_r+0x84>
 8006b8a:	6007      	str	r7, [r0, #0]
 8006b8c:	e7da      	b.n	8006b44 <_malloc_r+0xb0>
 8006b8e:	46c0      	nop			@ (mov r8, r8)
 8006b90:	2000078c 	.word	0x2000078c

08006b94 <__malloc_lock>:
 8006b94:	b510      	push	{r4, lr}
 8006b96:	4802      	ldr	r0, [pc, #8]	@ (8006ba0 <__malloc_lock+0xc>)
 8006b98:	f7ff ff04 	bl	80069a4 <__retarget_lock_acquire_recursive>
 8006b9c:	bd10      	pop	{r4, pc}
 8006b9e:	46c0      	nop			@ (mov r8, r8)
 8006ba0:	20000784 	.word	0x20000784

08006ba4 <__malloc_unlock>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	4802      	ldr	r0, [pc, #8]	@ (8006bb0 <__malloc_unlock+0xc>)
 8006ba8:	f7ff fefd 	bl	80069a6 <__retarget_lock_release_recursive>
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	46c0      	nop			@ (mov r8, r8)
 8006bb0:	20000784 	.word	0x20000784

08006bb4 <__ssputs_r>:
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb6:	688e      	ldr	r6, [r1, #8]
 8006bb8:	b085      	sub	sp, #20
 8006bba:	001f      	movs	r7, r3
 8006bbc:	000c      	movs	r4, r1
 8006bbe:	680b      	ldr	r3, [r1, #0]
 8006bc0:	9002      	str	r0, [sp, #8]
 8006bc2:	9203      	str	r2, [sp, #12]
 8006bc4:	42be      	cmp	r6, r7
 8006bc6:	d830      	bhi.n	8006c2a <__ssputs_r+0x76>
 8006bc8:	210c      	movs	r1, #12
 8006bca:	5e62      	ldrsh	r2, [r4, r1]
 8006bcc:	2190      	movs	r1, #144	@ 0x90
 8006bce:	00c9      	lsls	r1, r1, #3
 8006bd0:	420a      	tst	r2, r1
 8006bd2:	d028      	beq.n	8006c26 <__ssputs_r+0x72>
 8006bd4:	2003      	movs	r0, #3
 8006bd6:	6921      	ldr	r1, [r4, #16]
 8006bd8:	1a5b      	subs	r3, r3, r1
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	6963      	ldr	r3, [r4, #20]
 8006bde:	4343      	muls	r3, r0
 8006be0:	9801      	ldr	r0, [sp, #4]
 8006be2:	0fdd      	lsrs	r5, r3, #31
 8006be4:	18ed      	adds	r5, r5, r3
 8006be6:	1c7b      	adds	r3, r7, #1
 8006be8:	181b      	adds	r3, r3, r0
 8006bea:	106d      	asrs	r5, r5, #1
 8006bec:	42ab      	cmp	r3, r5
 8006bee:	d900      	bls.n	8006bf2 <__ssputs_r+0x3e>
 8006bf0:	001d      	movs	r5, r3
 8006bf2:	0552      	lsls	r2, r2, #21
 8006bf4:	d528      	bpl.n	8006c48 <__ssputs_r+0x94>
 8006bf6:	0029      	movs	r1, r5
 8006bf8:	9802      	ldr	r0, [sp, #8]
 8006bfa:	f7ff ff4b 	bl	8006a94 <_malloc_r>
 8006bfe:	1e06      	subs	r6, r0, #0
 8006c00:	d02c      	beq.n	8006c5c <__ssputs_r+0xa8>
 8006c02:	9a01      	ldr	r2, [sp, #4]
 8006c04:	6921      	ldr	r1, [r4, #16]
 8006c06:	f7ff fecf 	bl	80069a8 <memcpy>
 8006c0a:	89a2      	ldrh	r2, [r4, #12]
 8006c0c:	4b18      	ldr	r3, [pc, #96]	@ (8006c70 <__ssputs_r+0xbc>)
 8006c0e:	401a      	ands	r2, r3
 8006c10:	2380      	movs	r3, #128	@ 0x80
 8006c12:	4313      	orrs	r3, r2
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	9b01      	ldr	r3, [sp, #4]
 8006c18:	6126      	str	r6, [r4, #16]
 8006c1a:	18f6      	adds	r6, r6, r3
 8006c1c:	6026      	str	r6, [r4, #0]
 8006c1e:	003e      	movs	r6, r7
 8006c20:	6165      	str	r5, [r4, #20]
 8006c22:	1aed      	subs	r5, r5, r3
 8006c24:	60a5      	str	r5, [r4, #8]
 8006c26:	42be      	cmp	r6, r7
 8006c28:	d900      	bls.n	8006c2c <__ssputs_r+0x78>
 8006c2a:	003e      	movs	r6, r7
 8006c2c:	0032      	movs	r2, r6
 8006c2e:	9903      	ldr	r1, [sp, #12]
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	f7ff fe73 	bl	800691c <memmove>
 8006c36:	2000      	movs	r0, #0
 8006c38:	68a3      	ldr	r3, [r4, #8]
 8006c3a:	1b9b      	subs	r3, r3, r6
 8006c3c:	60a3      	str	r3, [r4, #8]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	199b      	adds	r3, r3, r6
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	b005      	add	sp, #20
 8006c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c48:	002a      	movs	r2, r5
 8006c4a:	9802      	ldr	r0, [sp, #8]
 8006c4c:	f000 faa9 	bl	80071a2 <_realloc_r>
 8006c50:	1e06      	subs	r6, r0, #0
 8006c52:	d1e0      	bne.n	8006c16 <__ssputs_r+0x62>
 8006c54:	6921      	ldr	r1, [r4, #16]
 8006c56:	9802      	ldr	r0, [sp, #8]
 8006c58:	f7ff feb0 	bl	80069bc <_free_r>
 8006c5c:	230c      	movs	r3, #12
 8006c5e:	2001      	movs	r0, #1
 8006c60:	9a02      	ldr	r2, [sp, #8]
 8006c62:	4240      	negs	r0, r0
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	89a2      	ldrh	r2, [r4, #12]
 8006c68:	3334      	adds	r3, #52	@ 0x34
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	e7e9      	b.n	8006c44 <__ssputs_r+0x90>
 8006c70:	fffffb7f 	.word	0xfffffb7f

08006c74 <_svfiprintf_r>:
 8006c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c76:	b0a1      	sub	sp, #132	@ 0x84
 8006c78:	9003      	str	r0, [sp, #12]
 8006c7a:	001d      	movs	r5, r3
 8006c7c:	898b      	ldrh	r3, [r1, #12]
 8006c7e:	000f      	movs	r7, r1
 8006c80:	0016      	movs	r6, r2
 8006c82:	061b      	lsls	r3, r3, #24
 8006c84:	d511      	bpl.n	8006caa <_svfiprintf_r+0x36>
 8006c86:	690b      	ldr	r3, [r1, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10e      	bne.n	8006caa <_svfiprintf_r+0x36>
 8006c8c:	2140      	movs	r1, #64	@ 0x40
 8006c8e:	f7ff ff01 	bl	8006a94 <_malloc_r>
 8006c92:	6038      	str	r0, [r7, #0]
 8006c94:	6138      	str	r0, [r7, #16]
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d105      	bne.n	8006ca6 <_svfiprintf_r+0x32>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	9a03      	ldr	r2, [sp, #12]
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	4240      	negs	r0, r0
 8006ca4:	e0cf      	b.n	8006e46 <_svfiprintf_r+0x1d2>
 8006ca6:	2340      	movs	r3, #64	@ 0x40
 8006ca8:	617b      	str	r3, [r7, #20]
 8006caa:	2300      	movs	r3, #0
 8006cac:	ac08      	add	r4, sp, #32
 8006cae:	6163      	str	r3, [r4, #20]
 8006cb0:	3320      	adds	r3, #32
 8006cb2:	7663      	strb	r3, [r4, #25]
 8006cb4:	3310      	adds	r3, #16
 8006cb6:	76a3      	strb	r3, [r4, #26]
 8006cb8:	9507      	str	r5, [sp, #28]
 8006cba:	0035      	movs	r5, r6
 8006cbc:	782b      	ldrb	r3, [r5, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <_svfiprintf_r+0x52>
 8006cc2:	2b25      	cmp	r3, #37	@ 0x25
 8006cc4:	d148      	bne.n	8006d58 <_svfiprintf_r+0xe4>
 8006cc6:	1bab      	subs	r3, r5, r6
 8006cc8:	9305      	str	r3, [sp, #20]
 8006cca:	42b5      	cmp	r5, r6
 8006ccc:	d00b      	beq.n	8006ce6 <_svfiprintf_r+0x72>
 8006cce:	0032      	movs	r2, r6
 8006cd0:	0039      	movs	r1, r7
 8006cd2:	9803      	ldr	r0, [sp, #12]
 8006cd4:	f7ff ff6e 	bl	8006bb4 <__ssputs_r>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d100      	bne.n	8006cde <_svfiprintf_r+0x6a>
 8006cdc:	e0ae      	b.n	8006e3c <_svfiprintf_r+0x1c8>
 8006cde:	6963      	ldr	r3, [r4, #20]
 8006ce0:	9a05      	ldr	r2, [sp, #20]
 8006ce2:	189b      	adds	r3, r3, r2
 8006ce4:	6163      	str	r3, [r4, #20]
 8006ce6:	782b      	ldrb	r3, [r5, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d100      	bne.n	8006cee <_svfiprintf_r+0x7a>
 8006cec:	e0a6      	b.n	8006e3c <_svfiprintf_r+0x1c8>
 8006cee:	2201      	movs	r2, #1
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4252      	negs	r2, r2
 8006cf4:	6062      	str	r2, [r4, #4]
 8006cf6:	a904      	add	r1, sp, #16
 8006cf8:	3254      	adds	r2, #84	@ 0x54
 8006cfa:	1852      	adds	r2, r2, r1
 8006cfc:	1c6e      	adds	r6, r5, #1
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	60e3      	str	r3, [r4, #12]
 8006d02:	60a3      	str	r3, [r4, #8]
 8006d04:	7013      	strb	r3, [r2, #0]
 8006d06:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006d08:	4b54      	ldr	r3, [pc, #336]	@ (8006e5c <_svfiprintf_r+0x1e8>)
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	7831      	ldrb	r1, [r6, #0]
 8006d10:	9305      	str	r3, [sp, #20]
 8006d12:	f000 fa3b 	bl	800718c <memchr>
 8006d16:	1c75      	adds	r5, r6, #1
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d11f      	bne.n	8006d5c <_svfiprintf_r+0xe8>
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	06d3      	lsls	r3, r2, #27
 8006d20:	d504      	bpl.n	8006d2c <_svfiprintf_r+0xb8>
 8006d22:	2353      	movs	r3, #83	@ 0x53
 8006d24:	a904      	add	r1, sp, #16
 8006d26:	185b      	adds	r3, r3, r1
 8006d28:	2120      	movs	r1, #32
 8006d2a:	7019      	strb	r1, [r3, #0]
 8006d2c:	0713      	lsls	r3, r2, #28
 8006d2e:	d504      	bpl.n	8006d3a <_svfiprintf_r+0xc6>
 8006d30:	2353      	movs	r3, #83	@ 0x53
 8006d32:	a904      	add	r1, sp, #16
 8006d34:	185b      	adds	r3, r3, r1
 8006d36:	212b      	movs	r1, #43	@ 0x2b
 8006d38:	7019      	strb	r1, [r3, #0]
 8006d3a:	7833      	ldrb	r3, [r6, #0]
 8006d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d3e:	d016      	beq.n	8006d6e <_svfiprintf_r+0xfa>
 8006d40:	0035      	movs	r5, r6
 8006d42:	2100      	movs	r1, #0
 8006d44:	200a      	movs	r0, #10
 8006d46:	68e3      	ldr	r3, [r4, #12]
 8006d48:	782a      	ldrb	r2, [r5, #0]
 8006d4a:	1c6e      	adds	r6, r5, #1
 8006d4c:	3a30      	subs	r2, #48	@ 0x30
 8006d4e:	2a09      	cmp	r2, #9
 8006d50:	d950      	bls.n	8006df4 <_svfiprintf_r+0x180>
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d111      	bne.n	8006d7a <_svfiprintf_r+0x106>
 8006d56:	e017      	b.n	8006d88 <_svfiprintf_r+0x114>
 8006d58:	3501      	adds	r5, #1
 8006d5a:	e7af      	b.n	8006cbc <_svfiprintf_r+0x48>
 8006d5c:	9b05      	ldr	r3, [sp, #20]
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	1ac0      	subs	r0, r0, r3
 8006d62:	2301      	movs	r3, #1
 8006d64:	4083      	lsls	r3, r0
 8006d66:	4313      	orrs	r3, r2
 8006d68:	002e      	movs	r6, r5
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	e7cc      	b.n	8006d08 <_svfiprintf_r+0x94>
 8006d6e:	9b07      	ldr	r3, [sp, #28]
 8006d70:	1d19      	adds	r1, r3, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	9107      	str	r1, [sp, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	db01      	blt.n	8006d7e <_svfiprintf_r+0x10a>
 8006d7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d7c:	e004      	b.n	8006d88 <_svfiprintf_r+0x114>
 8006d7e:	425b      	negs	r3, r3
 8006d80:	60e3      	str	r3, [r4, #12]
 8006d82:	2302      	movs	r3, #2
 8006d84:	4313      	orrs	r3, r2
 8006d86:	6023      	str	r3, [r4, #0]
 8006d88:	782b      	ldrb	r3, [r5, #0]
 8006d8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d8c:	d10c      	bne.n	8006da8 <_svfiprintf_r+0x134>
 8006d8e:	786b      	ldrb	r3, [r5, #1]
 8006d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d92:	d134      	bne.n	8006dfe <_svfiprintf_r+0x18a>
 8006d94:	9b07      	ldr	r3, [sp, #28]
 8006d96:	3502      	adds	r5, #2
 8006d98:	1d1a      	adds	r2, r3, #4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	9207      	str	r2, [sp, #28]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da01      	bge.n	8006da6 <_svfiprintf_r+0x132>
 8006da2:	2301      	movs	r3, #1
 8006da4:	425b      	negs	r3, r3
 8006da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006da8:	4e2d      	ldr	r6, [pc, #180]	@ (8006e60 <_svfiprintf_r+0x1ec>)
 8006daa:	2203      	movs	r2, #3
 8006dac:	0030      	movs	r0, r6
 8006dae:	7829      	ldrb	r1, [r5, #0]
 8006db0:	f000 f9ec 	bl	800718c <memchr>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d006      	beq.n	8006dc6 <_svfiprintf_r+0x152>
 8006db8:	2340      	movs	r3, #64	@ 0x40
 8006dba:	1b80      	subs	r0, r0, r6
 8006dbc:	4083      	lsls	r3, r0
 8006dbe:	6822      	ldr	r2, [r4, #0]
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	7829      	ldrb	r1, [r5, #0]
 8006dc8:	2206      	movs	r2, #6
 8006dca:	4826      	ldr	r0, [pc, #152]	@ (8006e64 <_svfiprintf_r+0x1f0>)
 8006dcc:	1c6e      	adds	r6, r5, #1
 8006dce:	7621      	strb	r1, [r4, #24]
 8006dd0:	f000 f9dc 	bl	800718c <memchr>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d038      	beq.n	8006e4a <_svfiprintf_r+0x1d6>
 8006dd8:	4b23      	ldr	r3, [pc, #140]	@ (8006e68 <_svfiprintf_r+0x1f4>)
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d122      	bne.n	8006e24 <_svfiprintf_r+0x1b0>
 8006dde:	2207      	movs	r2, #7
 8006de0:	9b07      	ldr	r3, [sp, #28]
 8006de2:	3307      	adds	r3, #7
 8006de4:	4393      	bics	r3, r2
 8006de6:	3308      	adds	r3, #8
 8006de8:	9307      	str	r3, [sp, #28]
 8006dea:	6963      	ldr	r3, [r4, #20]
 8006dec:	9a04      	ldr	r2, [sp, #16]
 8006dee:	189b      	adds	r3, r3, r2
 8006df0:	6163      	str	r3, [r4, #20]
 8006df2:	e762      	b.n	8006cba <_svfiprintf_r+0x46>
 8006df4:	4343      	muls	r3, r0
 8006df6:	0035      	movs	r5, r6
 8006df8:	2101      	movs	r1, #1
 8006dfa:	189b      	adds	r3, r3, r2
 8006dfc:	e7a4      	b.n	8006d48 <_svfiprintf_r+0xd4>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	200a      	movs	r0, #10
 8006e02:	0019      	movs	r1, r3
 8006e04:	3501      	adds	r5, #1
 8006e06:	6063      	str	r3, [r4, #4]
 8006e08:	782a      	ldrb	r2, [r5, #0]
 8006e0a:	1c6e      	adds	r6, r5, #1
 8006e0c:	3a30      	subs	r2, #48	@ 0x30
 8006e0e:	2a09      	cmp	r2, #9
 8006e10:	d903      	bls.n	8006e1a <_svfiprintf_r+0x1a6>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0c8      	beq.n	8006da8 <_svfiprintf_r+0x134>
 8006e16:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e18:	e7c6      	b.n	8006da8 <_svfiprintf_r+0x134>
 8006e1a:	4341      	muls	r1, r0
 8006e1c:	0035      	movs	r5, r6
 8006e1e:	2301      	movs	r3, #1
 8006e20:	1889      	adds	r1, r1, r2
 8006e22:	e7f1      	b.n	8006e08 <_svfiprintf_r+0x194>
 8006e24:	aa07      	add	r2, sp, #28
 8006e26:	9200      	str	r2, [sp, #0]
 8006e28:	0021      	movs	r1, r4
 8006e2a:	003a      	movs	r2, r7
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e6c <_svfiprintf_r+0x1f8>)
 8006e2e:	9803      	ldr	r0, [sp, #12]
 8006e30:	e000      	b.n	8006e34 <_svfiprintf_r+0x1c0>
 8006e32:	bf00      	nop
 8006e34:	9004      	str	r0, [sp, #16]
 8006e36:	9b04      	ldr	r3, [sp, #16]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	d1d6      	bne.n	8006dea <_svfiprintf_r+0x176>
 8006e3c:	89bb      	ldrh	r3, [r7, #12]
 8006e3e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006e40:	065b      	lsls	r3, r3, #25
 8006e42:	d500      	bpl.n	8006e46 <_svfiprintf_r+0x1d2>
 8006e44:	e72c      	b.n	8006ca0 <_svfiprintf_r+0x2c>
 8006e46:	b021      	add	sp, #132	@ 0x84
 8006e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e4a:	aa07      	add	r2, sp, #28
 8006e4c:	9200      	str	r2, [sp, #0]
 8006e4e:	0021      	movs	r1, r4
 8006e50:	003a      	movs	r2, r7
 8006e52:	4b06      	ldr	r3, [pc, #24]	@ (8006e6c <_svfiprintf_r+0x1f8>)
 8006e54:	9803      	ldr	r0, [sp, #12]
 8006e56:	f000 f87b 	bl	8006f50 <_printf_i>
 8006e5a:	e7eb      	b.n	8006e34 <_svfiprintf_r+0x1c0>
 8006e5c:	08007aa4 	.word	0x08007aa4
 8006e60:	08007aaa 	.word	0x08007aaa
 8006e64:	08007aae 	.word	0x08007aae
 8006e68:	00000000 	.word	0x00000000
 8006e6c:	08006bb5 	.word	0x08006bb5

08006e70 <_printf_common>:
 8006e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e72:	0016      	movs	r6, r2
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	688a      	ldr	r2, [r1, #8]
 8006e78:	690b      	ldr	r3, [r1, #16]
 8006e7a:	000c      	movs	r4, r1
 8006e7c:	9000      	str	r0, [sp, #0]
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	da00      	bge.n	8006e84 <_printf_common+0x14>
 8006e82:	0013      	movs	r3, r2
 8006e84:	0022      	movs	r2, r4
 8006e86:	6033      	str	r3, [r6, #0]
 8006e88:	3243      	adds	r2, #67	@ 0x43
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	d001      	beq.n	8006e94 <_printf_common+0x24>
 8006e90:	3301      	adds	r3, #1
 8006e92:	6033      	str	r3, [r6, #0]
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	069b      	lsls	r3, r3, #26
 8006e98:	d502      	bpl.n	8006ea0 <_printf_common+0x30>
 8006e9a:	6833      	ldr	r3, [r6, #0]
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	6033      	str	r3, [r6, #0]
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	2306      	movs	r3, #6
 8006ea4:	0015      	movs	r5, r2
 8006ea6:	401d      	ands	r5, r3
 8006ea8:	421a      	tst	r2, r3
 8006eaa:	d027      	beq.n	8006efc <_printf_common+0x8c>
 8006eac:	0023      	movs	r3, r4
 8006eae:	3343      	adds	r3, #67	@ 0x43
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	1e5a      	subs	r2, r3, #1
 8006eb4:	4193      	sbcs	r3, r2
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	0692      	lsls	r2, r2, #26
 8006eba:	d430      	bmi.n	8006f1e <_printf_common+0xae>
 8006ebc:	0022      	movs	r2, r4
 8006ebe:	9901      	ldr	r1, [sp, #4]
 8006ec0:	9800      	ldr	r0, [sp, #0]
 8006ec2:	9d08      	ldr	r5, [sp, #32]
 8006ec4:	3243      	adds	r2, #67	@ 0x43
 8006ec6:	47a8      	blx	r5
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d025      	beq.n	8006f18 <_printf_common+0xa8>
 8006ecc:	2206      	movs	r2, #6
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	2500      	movs	r5, #0
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d105      	bne.n	8006ee4 <_printf_common+0x74>
 8006ed8:	6833      	ldr	r3, [r6, #0]
 8006eda:	68e5      	ldr	r5, [r4, #12]
 8006edc:	1aed      	subs	r5, r5, r3
 8006ede:	43eb      	mvns	r3, r5
 8006ee0:	17db      	asrs	r3, r3, #31
 8006ee2:	401d      	ands	r5, r3
 8006ee4:	68a3      	ldr	r3, [r4, #8]
 8006ee6:	6922      	ldr	r2, [r4, #16]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	dd01      	ble.n	8006ef0 <_printf_common+0x80>
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	18ed      	adds	r5, r5, r3
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	42b5      	cmp	r5, r6
 8006ef4:	d120      	bne.n	8006f38 <_printf_common+0xc8>
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	e010      	b.n	8006f1c <_printf_common+0xac>
 8006efa:	3501      	adds	r5, #1
 8006efc:	68e3      	ldr	r3, [r4, #12]
 8006efe:	6832      	ldr	r2, [r6, #0]
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	42ab      	cmp	r3, r5
 8006f04:	ddd2      	ble.n	8006eac <_printf_common+0x3c>
 8006f06:	0022      	movs	r2, r4
 8006f08:	2301      	movs	r3, #1
 8006f0a:	9901      	ldr	r1, [sp, #4]
 8006f0c:	9800      	ldr	r0, [sp, #0]
 8006f0e:	9f08      	ldr	r7, [sp, #32]
 8006f10:	3219      	adds	r2, #25
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	d1f0      	bne.n	8006efa <_printf_common+0x8a>
 8006f18:	2001      	movs	r0, #1
 8006f1a:	4240      	negs	r0, r0
 8006f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f1e:	2030      	movs	r0, #48	@ 0x30
 8006f20:	18e1      	adds	r1, r4, r3
 8006f22:	3143      	adds	r1, #67	@ 0x43
 8006f24:	7008      	strb	r0, [r1, #0]
 8006f26:	0021      	movs	r1, r4
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	3145      	adds	r1, #69	@ 0x45
 8006f2c:	7809      	ldrb	r1, [r1, #0]
 8006f2e:	18a2      	adds	r2, r4, r2
 8006f30:	3243      	adds	r2, #67	@ 0x43
 8006f32:	3302      	adds	r3, #2
 8006f34:	7011      	strb	r1, [r2, #0]
 8006f36:	e7c1      	b.n	8006ebc <_printf_common+0x4c>
 8006f38:	0022      	movs	r2, r4
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	9901      	ldr	r1, [sp, #4]
 8006f3e:	9800      	ldr	r0, [sp, #0]
 8006f40:	9f08      	ldr	r7, [sp, #32]
 8006f42:	321a      	adds	r2, #26
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	d0e6      	beq.n	8006f18 <_printf_common+0xa8>
 8006f4a:	3601      	adds	r6, #1
 8006f4c:	e7d1      	b.n	8006ef2 <_printf_common+0x82>
	...

08006f50 <_printf_i>:
 8006f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f52:	b08b      	sub	sp, #44	@ 0x2c
 8006f54:	9206      	str	r2, [sp, #24]
 8006f56:	000a      	movs	r2, r1
 8006f58:	3243      	adds	r2, #67	@ 0x43
 8006f5a:	9307      	str	r3, [sp, #28]
 8006f5c:	9005      	str	r0, [sp, #20]
 8006f5e:	9203      	str	r2, [sp, #12]
 8006f60:	7e0a      	ldrb	r2, [r1, #24]
 8006f62:	000c      	movs	r4, r1
 8006f64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f66:	2a78      	cmp	r2, #120	@ 0x78
 8006f68:	d809      	bhi.n	8006f7e <_printf_i+0x2e>
 8006f6a:	2a62      	cmp	r2, #98	@ 0x62
 8006f6c:	d80b      	bhi.n	8006f86 <_printf_i+0x36>
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	d100      	bne.n	8006f74 <_printf_i+0x24>
 8006f72:	e0ba      	b.n	80070ea <_printf_i+0x19a>
 8006f74:	497a      	ldr	r1, [pc, #488]	@ (8007160 <_printf_i+0x210>)
 8006f76:	9104      	str	r1, [sp, #16]
 8006f78:	2a58      	cmp	r2, #88	@ 0x58
 8006f7a:	d100      	bne.n	8006f7e <_printf_i+0x2e>
 8006f7c:	e08e      	b.n	800709c <_printf_i+0x14c>
 8006f7e:	0025      	movs	r5, r4
 8006f80:	3542      	adds	r5, #66	@ 0x42
 8006f82:	702a      	strb	r2, [r5, #0]
 8006f84:	e022      	b.n	8006fcc <_printf_i+0x7c>
 8006f86:	0010      	movs	r0, r2
 8006f88:	3863      	subs	r0, #99	@ 0x63
 8006f8a:	2815      	cmp	r0, #21
 8006f8c:	d8f7      	bhi.n	8006f7e <_printf_i+0x2e>
 8006f8e:	f7f9 f8bb 	bl	8000108 <__gnu_thumb1_case_shi>
 8006f92:	0016      	.short	0x0016
 8006f94:	fff6001f 	.word	0xfff6001f
 8006f98:	fff6fff6 	.word	0xfff6fff6
 8006f9c:	001ffff6 	.word	0x001ffff6
 8006fa0:	fff6fff6 	.word	0xfff6fff6
 8006fa4:	fff6fff6 	.word	0xfff6fff6
 8006fa8:	0036009f 	.word	0x0036009f
 8006fac:	fff6007e 	.word	0xfff6007e
 8006fb0:	00b0fff6 	.word	0x00b0fff6
 8006fb4:	0036fff6 	.word	0x0036fff6
 8006fb8:	fff6fff6 	.word	0xfff6fff6
 8006fbc:	0082      	.short	0x0082
 8006fbe:	0025      	movs	r5, r4
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	3542      	adds	r5, #66	@ 0x42
 8006fc4:	1d11      	adds	r1, r2, #4
 8006fc6:	6019      	str	r1, [r3, #0]
 8006fc8:	6813      	ldr	r3, [r2, #0]
 8006fca:	702b      	strb	r3, [r5, #0]
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e09e      	b.n	800710e <_printf_i+0x1be>
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	6809      	ldr	r1, [r1, #0]
 8006fd4:	1d02      	adds	r2, r0, #4
 8006fd6:	060d      	lsls	r5, r1, #24
 8006fd8:	d50b      	bpl.n	8006ff2 <_printf_i+0xa2>
 8006fda:	6806      	ldr	r6, [r0, #0]
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	da03      	bge.n	8006fea <_printf_i+0x9a>
 8006fe2:	232d      	movs	r3, #45	@ 0x2d
 8006fe4:	9a03      	ldr	r2, [sp, #12]
 8006fe6:	4276      	negs	r6, r6
 8006fe8:	7013      	strb	r3, [r2, #0]
 8006fea:	4b5d      	ldr	r3, [pc, #372]	@ (8007160 <_printf_i+0x210>)
 8006fec:	270a      	movs	r7, #10
 8006fee:	9304      	str	r3, [sp, #16]
 8006ff0:	e018      	b.n	8007024 <_printf_i+0xd4>
 8006ff2:	6806      	ldr	r6, [r0, #0]
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	0649      	lsls	r1, r1, #25
 8006ff8:	d5f1      	bpl.n	8006fde <_printf_i+0x8e>
 8006ffa:	b236      	sxth	r6, r6
 8006ffc:	e7ef      	b.n	8006fde <_printf_i+0x8e>
 8006ffe:	6808      	ldr	r0, [r1, #0]
 8007000:	6819      	ldr	r1, [r3, #0]
 8007002:	c940      	ldmia	r1!, {r6}
 8007004:	0605      	lsls	r5, r0, #24
 8007006:	d402      	bmi.n	800700e <_printf_i+0xbe>
 8007008:	0640      	lsls	r0, r0, #25
 800700a:	d500      	bpl.n	800700e <_printf_i+0xbe>
 800700c:	b2b6      	uxth	r6, r6
 800700e:	6019      	str	r1, [r3, #0]
 8007010:	4b53      	ldr	r3, [pc, #332]	@ (8007160 <_printf_i+0x210>)
 8007012:	270a      	movs	r7, #10
 8007014:	9304      	str	r3, [sp, #16]
 8007016:	2a6f      	cmp	r2, #111	@ 0x6f
 8007018:	d100      	bne.n	800701c <_printf_i+0xcc>
 800701a:	3f02      	subs	r7, #2
 800701c:	0023      	movs	r3, r4
 800701e:	2200      	movs	r2, #0
 8007020:	3343      	adds	r3, #67	@ 0x43
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	6863      	ldr	r3, [r4, #4]
 8007026:	60a3      	str	r3, [r4, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	db06      	blt.n	800703a <_printf_i+0xea>
 800702c:	2104      	movs	r1, #4
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	9d03      	ldr	r5, [sp, #12]
 8007032:	438a      	bics	r2, r1
 8007034:	6022      	str	r2, [r4, #0]
 8007036:	4333      	orrs	r3, r6
 8007038:	d00c      	beq.n	8007054 <_printf_i+0x104>
 800703a:	9d03      	ldr	r5, [sp, #12]
 800703c:	0030      	movs	r0, r6
 800703e:	0039      	movs	r1, r7
 8007040:	f7f9 f8f2 	bl	8000228 <__aeabi_uidivmod>
 8007044:	9b04      	ldr	r3, [sp, #16]
 8007046:	3d01      	subs	r5, #1
 8007048:	5c5b      	ldrb	r3, [r3, r1]
 800704a:	702b      	strb	r3, [r5, #0]
 800704c:	0033      	movs	r3, r6
 800704e:	0006      	movs	r6, r0
 8007050:	429f      	cmp	r7, r3
 8007052:	d9f3      	bls.n	800703c <_printf_i+0xec>
 8007054:	2f08      	cmp	r7, #8
 8007056:	d109      	bne.n	800706c <_printf_i+0x11c>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07db      	lsls	r3, r3, #31
 800705c:	d506      	bpl.n	800706c <_printf_i+0x11c>
 800705e:	6862      	ldr	r2, [r4, #4]
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	429a      	cmp	r2, r3
 8007064:	dc02      	bgt.n	800706c <_printf_i+0x11c>
 8007066:	2330      	movs	r3, #48	@ 0x30
 8007068:	3d01      	subs	r5, #1
 800706a:	702b      	strb	r3, [r5, #0]
 800706c:	9b03      	ldr	r3, [sp, #12]
 800706e:	1b5b      	subs	r3, r3, r5
 8007070:	6123      	str	r3, [r4, #16]
 8007072:	9b07      	ldr	r3, [sp, #28]
 8007074:	0021      	movs	r1, r4
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	9805      	ldr	r0, [sp, #20]
 800707a:	9b06      	ldr	r3, [sp, #24]
 800707c:	aa09      	add	r2, sp, #36	@ 0x24
 800707e:	f7ff fef7 	bl	8006e70 <_printf_common>
 8007082:	3001      	adds	r0, #1
 8007084:	d148      	bne.n	8007118 <_printf_i+0x1c8>
 8007086:	2001      	movs	r0, #1
 8007088:	4240      	negs	r0, r0
 800708a:	b00b      	add	sp, #44	@ 0x2c
 800708c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800708e:	2220      	movs	r2, #32
 8007090:	6809      	ldr	r1, [r1, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	6022      	str	r2, [r4, #0]
 8007096:	2278      	movs	r2, #120	@ 0x78
 8007098:	4932      	ldr	r1, [pc, #200]	@ (8007164 <_printf_i+0x214>)
 800709a:	9104      	str	r1, [sp, #16]
 800709c:	0021      	movs	r1, r4
 800709e:	3145      	adds	r1, #69	@ 0x45
 80070a0:	700a      	strb	r2, [r1, #0]
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	6822      	ldr	r2, [r4, #0]
 80070a6:	c940      	ldmia	r1!, {r6}
 80070a8:	0610      	lsls	r0, r2, #24
 80070aa:	d402      	bmi.n	80070b2 <_printf_i+0x162>
 80070ac:	0650      	lsls	r0, r2, #25
 80070ae:	d500      	bpl.n	80070b2 <_printf_i+0x162>
 80070b0:	b2b6      	uxth	r6, r6
 80070b2:	6019      	str	r1, [r3, #0]
 80070b4:	07d3      	lsls	r3, r2, #31
 80070b6:	d502      	bpl.n	80070be <_printf_i+0x16e>
 80070b8:	2320      	movs	r3, #32
 80070ba:	4313      	orrs	r3, r2
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	2e00      	cmp	r6, #0
 80070c0:	d001      	beq.n	80070c6 <_printf_i+0x176>
 80070c2:	2710      	movs	r7, #16
 80070c4:	e7aa      	b.n	800701c <_printf_i+0xcc>
 80070c6:	2220      	movs	r2, #32
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	4393      	bics	r3, r2
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	e7f8      	b.n	80070c2 <_printf_i+0x172>
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	680d      	ldr	r5, [r1, #0]
 80070d4:	1d10      	adds	r0, r2, #4
 80070d6:	6949      	ldr	r1, [r1, #20]
 80070d8:	6018      	str	r0, [r3, #0]
 80070da:	6813      	ldr	r3, [r2, #0]
 80070dc:	062e      	lsls	r6, r5, #24
 80070de:	d501      	bpl.n	80070e4 <_printf_i+0x194>
 80070e0:	6019      	str	r1, [r3, #0]
 80070e2:	e002      	b.n	80070ea <_printf_i+0x19a>
 80070e4:	066d      	lsls	r5, r5, #25
 80070e6:	d5fb      	bpl.n	80070e0 <_printf_i+0x190>
 80070e8:	8019      	strh	r1, [r3, #0]
 80070ea:	2300      	movs	r3, #0
 80070ec:	9d03      	ldr	r5, [sp, #12]
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	e7bf      	b.n	8007072 <_printf_i+0x122>
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	1d11      	adds	r1, r2, #4
 80070f6:	6019      	str	r1, [r3, #0]
 80070f8:	6815      	ldr	r5, [r2, #0]
 80070fa:	2100      	movs	r1, #0
 80070fc:	0028      	movs	r0, r5
 80070fe:	6862      	ldr	r2, [r4, #4]
 8007100:	f000 f844 	bl	800718c <memchr>
 8007104:	2800      	cmp	r0, #0
 8007106:	d001      	beq.n	800710c <_printf_i+0x1bc>
 8007108:	1b40      	subs	r0, r0, r5
 800710a:	6060      	str	r0, [r4, #4]
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	6123      	str	r3, [r4, #16]
 8007110:	2300      	movs	r3, #0
 8007112:	9a03      	ldr	r2, [sp, #12]
 8007114:	7013      	strb	r3, [r2, #0]
 8007116:	e7ac      	b.n	8007072 <_printf_i+0x122>
 8007118:	002a      	movs	r2, r5
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	9906      	ldr	r1, [sp, #24]
 800711e:	9805      	ldr	r0, [sp, #20]
 8007120:	9d07      	ldr	r5, [sp, #28]
 8007122:	47a8      	blx	r5
 8007124:	3001      	adds	r0, #1
 8007126:	d0ae      	beq.n	8007086 <_printf_i+0x136>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	079b      	lsls	r3, r3, #30
 800712c:	d415      	bmi.n	800715a <_printf_i+0x20a>
 800712e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007130:	68e0      	ldr	r0, [r4, #12]
 8007132:	4298      	cmp	r0, r3
 8007134:	daa9      	bge.n	800708a <_printf_i+0x13a>
 8007136:	0018      	movs	r0, r3
 8007138:	e7a7      	b.n	800708a <_printf_i+0x13a>
 800713a:	0022      	movs	r2, r4
 800713c:	2301      	movs	r3, #1
 800713e:	9906      	ldr	r1, [sp, #24]
 8007140:	9805      	ldr	r0, [sp, #20]
 8007142:	9e07      	ldr	r6, [sp, #28]
 8007144:	3219      	adds	r2, #25
 8007146:	47b0      	blx	r6
 8007148:	3001      	adds	r0, #1
 800714a:	d09c      	beq.n	8007086 <_printf_i+0x136>
 800714c:	3501      	adds	r5, #1
 800714e:	68e3      	ldr	r3, [r4, #12]
 8007150:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	42ab      	cmp	r3, r5
 8007156:	dcf0      	bgt.n	800713a <_printf_i+0x1ea>
 8007158:	e7e9      	b.n	800712e <_printf_i+0x1de>
 800715a:	2500      	movs	r5, #0
 800715c:	e7f7      	b.n	800714e <_printf_i+0x1fe>
 800715e:	46c0      	nop			@ (mov r8, r8)
 8007160:	08007ab5 	.word	0x08007ab5
 8007164:	08007ac6 	.word	0x08007ac6

08007168 <_sbrk_r>:
 8007168:	2300      	movs	r3, #0
 800716a:	b570      	push	{r4, r5, r6, lr}
 800716c:	4d06      	ldr	r5, [pc, #24]	@ (8007188 <_sbrk_r+0x20>)
 800716e:	0004      	movs	r4, r0
 8007170:	0008      	movs	r0, r1
 8007172:	602b      	str	r3, [r5, #0]
 8007174:	f7fa fecc 	bl	8001f10 <_sbrk>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d103      	bne.n	8007184 <_sbrk_r+0x1c>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d000      	beq.n	8007184 <_sbrk_r+0x1c>
 8007182:	6023      	str	r3, [r4, #0]
 8007184:	bd70      	pop	{r4, r5, r6, pc}
 8007186:	46c0      	nop			@ (mov r8, r8)
 8007188:	20000780 	.word	0x20000780

0800718c <memchr>:
 800718c:	b2c9      	uxtb	r1, r1
 800718e:	1882      	adds	r2, r0, r2
 8007190:	4290      	cmp	r0, r2
 8007192:	d101      	bne.n	8007198 <memchr+0xc>
 8007194:	2000      	movs	r0, #0
 8007196:	4770      	bx	lr
 8007198:	7803      	ldrb	r3, [r0, #0]
 800719a:	428b      	cmp	r3, r1
 800719c:	d0fb      	beq.n	8007196 <memchr+0xa>
 800719e:	3001      	adds	r0, #1
 80071a0:	e7f6      	b.n	8007190 <memchr+0x4>

080071a2 <_realloc_r>:
 80071a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071a4:	0006      	movs	r6, r0
 80071a6:	000c      	movs	r4, r1
 80071a8:	0015      	movs	r5, r2
 80071aa:	2900      	cmp	r1, #0
 80071ac:	d105      	bne.n	80071ba <_realloc_r+0x18>
 80071ae:	0011      	movs	r1, r2
 80071b0:	f7ff fc70 	bl	8006a94 <_malloc_r>
 80071b4:	0004      	movs	r4, r0
 80071b6:	0020      	movs	r0, r4
 80071b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	d103      	bne.n	80071c6 <_realloc_r+0x24>
 80071be:	f7ff fbfd 	bl	80069bc <_free_r>
 80071c2:	002c      	movs	r4, r5
 80071c4:	e7f7      	b.n	80071b6 <_realloc_r+0x14>
 80071c6:	f000 f81c 	bl	8007202 <_malloc_usable_size_r>
 80071ca:	0007      	movs	r7, r0
 80071cc:	4285      	cmp	r5, r0
 80071ce:	d802      	bhi.n	80071d6 <_realloc_r+0x34>
 80071d0:	0843      	lsrs	r3, r0, #1
 80071d2:	42ab      	cmp	r3, r5
 80071d4:	d3ef      	bcc.n	80071b6 <_realloc_r+0x14>
 80071d6:	0029      	movs	r1, r5
 80071d8:	0030      	movs	r0, r6
 80071da:	f7ff fc5b 	bl	8006a94 <_malloc_r>
 80071de:	9001      	str	r0, [sp, #4]
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d101      	bne.n	80071e8 <_realloc_r+0x46>
 80071e4:	9c01      	ldr	r4, [sp, #4]
 80071e6:	e7e6      	b.n	80071b6 <_realloc_r+0x14>
 80071e8:	002a      	movs	r2, r5
 80071ea:	42bd      	cmp	r5, r7
 80071ec:	d900      	bls.n	80071f0 <_realloc_r+0x4e>
 80071ee:	003a      	movs	r2, r7
 80071f0:	0021      	movs	r1, r4
 80071f2:	9801      	ldr	r0, [sp, #4]
 80071f4:	f7ff fbd8 	bl	80069a8 <memcpy>
 80071f8:	0021      	movs	r1, r4
 80071fa:	0030      	movs	r0, r6
 80071fc:	f7ff fbde 	bl	80069bc <_free_r>
 8007200:	e7f0      	b.n	80071e4 <_realloc_r+0x42>

08007202 <_malloc_usable_size_r>:
 8007202:	1f0b      	subs	r3, r1, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	1f18      	subs	r0, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	da01      	bge.n	8007210 <_malloc_usable_size_r+0xe>
 800720c:	580b      	ldr	r3, [r1, r0]
 800720e:	18c0      	adds	r0, r0, r3
 8007210:	4770      	bx	lr
	...

08007214 <_init>:
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007216:	46c0      	nop			@ (mov r8, r8)
 8007218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721a:	bc08      	pop	{r3}
 800721c:	469e      	mov	lr, r3
 800721e:	4770      	bx	lr

08007220 <_fini>:
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007222:	46c0      	nop			@ (mov r8, r8)
 8007224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007226:	bc08      	pop	{r3}
 8007228:	469e      	mov	lr, r3
 800722a:	4770      	bx	lr
